androidx.preference.PreferenceScreen
org.chromium.support_lib_boundary.FeatureFlagHolderBoundaryInterface
io.flutter.plugins.webviewflutter.WebResourceErrorProxyApi
io.flutter.embedding.engine.FlutterJNI$Factory
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder
io.flutter.app.FlutterPluginRegistry
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult$Builder
io.flutter.plugin.platform.PlatformViewRenderTarget
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2$1
io.flutter.plugin.common.BinaryMessenger$BinaryReply
io.flutter.view.AccessibilityBridge$SemanticsNode
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getAll$1
io.flutter.plugin.common.PluginRegistry$PluginRegistrantCallback
io.flutter.plugins.imagepicker.Messages$CanIgnoreReturnValue
io.flutter.plugins.urllauncher.Messages$WebViewOptions$Builder
io.flutter.plugins.imagepicker.Messages$VoidResult
io.flutter.plugin.platform.VirtualDisplayController
io.flutter.plugins.webviewflutter.ProxyApiRegistrar
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getPrefs$1
io.flutter.plugin.platform.PlatformPlugin$2
io.flutter.plugins.imagepicker.Messages$GeneralOptions
io.flutter.Build$API_LEVELS
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1
io.flutter.plugins.webviewflutter.FileChooserMode$Companion
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget
io.flutter.view.AccessibilityBridge$TextDirection
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation
io.flutter.embedding.engine.systemchannels.NavigationChannel
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder
io.flutter.embedding.engine.systemchannels.RestorationChannel$2
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics
org.chromium.support_lib_boundary.WebViewCookieManagerBoundaryInterface
androidx.core.app.CoreComponentFactory
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi$Companion
io.flutter.plugins.imagepicker.ImagePickerUtils
io.flutter.view.TextureRegistry$GLTextureConsumer
io.flutter.plugin.platform.PlatformViewFactory
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$FeatureInstallStateUpdatedListener
io.flutter.embedding.engine.systemchannels.KeyboardChannel$KeyboardMethodHandler
io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener
io.flutter.plugins.webviewflutter.CookieManagerProxyApi
io.flutter.util.ViewUtils
io.flutter.plugin.common.MethodChannel$Result
io.flutter.plugins.imagepicker.ImagePickerFileProvider
io.flutter.plugin.platform.SingleViewWindowManager
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1
androidx.appcompat.app.AlertController$RecycleListView
io.flutter.embedding.engine.systemchannels.BackGestureChannel
io.flutter.util.Preconditions
io.flutter.plugins.webviewflutter.PermissionRequestProxyApi
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry
io.flutter.FlutterInjector$1
io.flutter.embedding.engine.FlutterEngineCache
io.flutter.view.AccessibilityBridge$2
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$SentConfiguration
io.flutter.plugins.webviewflutter.ConsoleMessageLevel
io.flutter.embedding.android.FlutterImageView$1
io.flutter.embedding.engine.plugins.FlutterPlugin
io.flutter.embedding.android.KeyboardManager$Responder
io.flutter.embedding.engine.systemchannels.LocalizationChannel
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder
androidx.startup.InitializationProvider
io.flutter.view.AccessibilityBridge
io.flutter.plugins.webviewflutter.WebViewPointProxyApi
androidx.lifecycle.DefaultLifecycleObserver
org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface
io.flutter.embedding.android.FlutterTextureView$1
io.flutter.plugin.common.JSONUtil
io.flutter.plugin.editing.TextInputPlugin$1
io.flutter.plugins.sharedpreferences.Messages
io.flutter.plugins.imagepicker.FileUtils
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2$1
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi
io.flutter.plugins.sharedpreferences.ListEncoder
io.flutter.embedding.android.KeyChannelResponder
io.flutter.view.AccessibilityViewEmbedder
io.flutter.plugin.editing.ListenableEditingState$EditingStateWatcher
io.flutter.plugin.platform.PlatformPlugin$PlatformPluginDelegate
io.flutter.plugin.platform.PlatformPlugin$1
io.flutter.plugins.sharedpreferences.StringListResult$Companion
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient$Companion
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonCodec
io.flutter.embedding.engine.plugins.service.ServicePluginBinding
io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget$1
io.flutter.embedding.android.FlutterActivityLaunchConfigs
io.flutter.view.TextureRegistry$OnFrameConsumedListener
io.flutter.plugins.webviewflutter.AndroidWebKitError
io.flutter.plugin.localization.LocalizationPlugin$1
io.flutter.embedding.android.ExclusiveAppComponent
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType
io.flutter.view.FlutterNativeView$1
io.flutter.plugins.webviewflutter.ViewProxyApi
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1
io.flutter.plugin.common.EventChannel
androidx.appcompat.widget.ActionBarContainer
io.flutter.embedding.engine.systemchannels.ProcessTextChannel$ProcessTextMethodHandler
io.flutter.plugins.webviewflutter.FlutterAssetManager$PluginBindingFlutterAssetManager
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$1
io.flutter.plugins.sharedpreferences.R
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineContentProviderPluginBinding
io.flutter.plugin.platform.SurfaceProducerPlatformViewRenderTarget
io.flutter.plugins.imagepicker.ImagePickerDelegate
io.flutter.embedding.engine.dart.DartExecutor
io.flutter.plugins.imagepicker.Messages$SourceSpecification
io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener
io.flutter.plugin.common.PluginRegistry$ViewDestroyListener
io.flutter.plugin.common.ErrorLogResult
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$1
io.flutter.plugin.platform.PlatformViewRegistryImpl
io.flutter.embedding.engine.dart.DartMessenger$Reply
io.flutter.view.AccessibilityViewEmbedder$1
io.flutter.view.FlutterView$ZeroSides
io.flutter.embedding.engine.systemchannels.MouseCursorChannel$MouseCursorMethodHandler
androidx.appcompat.widget.ButtonBarLayout
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener
org.chromium.support_lib_boundary.WebResourceRequestBoundaryInterface
io.flutter.plugins.webviewflutter.JavaScriptChannel
io.flutter.embedding.android.KeyboardMap$PressingGoal
io.flutter.embedding.engine.renderer.FlutterRenderer$1
io.flutter.view.FlutterView$1
io.flutter.embedding.engine.systemchannels.ProcessTextChannel$1
io.flutter.plugin.editing.TextInputPlugin$MinMax
io.flutter.plugin.platform.AccessibilityEventsDelegate
org.chromium.support_lib_boundary.PrefetchOperationResultBoundaryInterface
io.flutter.embedding.engine.renderer.FlutterUiDisplayListener
io.flutter.BuildConfig
org.chromium.support_lib_boundary.WebViewRendererClientBoundaryInterface
io.flutter.embedding.engine.dart.DartMessenger
io.flutter.plugin.common.BasicMessageChannel
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$3
io.flutter.plugins.webviewflutter.PigeonApiWebResourceErrorCompat
io.flutter.embedding.engine.loader.FlutterLoader$Settings
io.flutter.embedding.engine.loader.FlutterApplicationInfo
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding
io.flutter.embedding.engine.systemchannels.SpellCheckChannel
io.flutter.plugin.mouse.MouseCursorPlugin$1
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2
io.flutter.embedding.android.FlutterEngineProvider
androidx.preference.DialogPreference
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager$Companion
io.flutter.plugins.webviewflutter.FileChooserParamsProxyApi
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl
androidx.preference.TwoStatePreference
io.flutter.plugin.common.BinaryMessenger$TaskQueue
org.chromium.support_lib_boundary.ServiceWorkerClientBoundaryInterface
io.flutter.view.TextureRegistry$SurfaceProducer
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions
io.flutter.plugins.webviewflutter.PigeonApiCookieManager$Companion
io.flutter.embedding.engine.plugins.PluginRegistry
io.flutter.plugins.webviewflutter.WebResourceRequestProxyApi
io.flutter.plugins.urllauncher.UrlLauncher$IntentResolver
androidx.recyclerview.widget.LinearLayoutManager
io.flutter.embedding.engine.systemchannels.KeyboardChannel$1
androidx.appcompat.widget.ActionBarOverlayLayout
io.flutter.plugins.imagepicker.ImagePickerCache$CacheType
androidx.appcompat.view.menu.ActionMenuItemView
io.flutter.plugins.webviewflutter.PigeonApiWebStorage$Companion
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1
io.flutter.embedding.android.FlutterView$1
io.flutter.embedding.android.KeyboardMap
io.flutter.view.TextureRegistry$SurfaceProducer$Callback
io.flutter.plugins.urllauncher.UrlLauncher
io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback
io.flutter.plugins.imagepicker.ImagePickerCache
io.flutter.embedding.android.FlutterFragment$1
io.flutter.plugins.webviewflutter.WebStorageProxyApi
io.flutter.FlutterInjector
io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder
androidx.preference.SwitchPreference
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$2
io.flutter.embedding.android.KeyboardMap$KeyPair
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler
io.flutter.embedding.engine.loader.ApplicationInfoLoader
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper
androidx.appcompat.widget.FitWindowsLinearLayout
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getKeys$prefs$1
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1
io.flutter.plugin.platform.PlatformViewsController
androidx.appcompat.widget.ContentFrameLayout
androidx.appcompat.widget.ActionMenuView
io.flutter.plugins.sharedpreferences.MessagesAsync_gKt
io.flutter.plugins.webviewflutter.PigeonApiFileChooserParams
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener
io.flutter.view.VsyncWaiter$1
androidx.preference.internal.PreferenceImageView
io.flutter.embedding.engine.loader.FlutterLoader$InitResult
androidx.window.layout.adapter.sidecar.DistinctElementSidecarCallback
io.flutter.app.FlutterActivityEvents
org.chromium.support_lib_boundary.ProcessGlobalConfigConstants
io.flutter.embedding.engine.dart.DartMessenger$TaskQueueToken
io.flutter.plugins.imagepicker.ImagePickerDelegate$PendingCallState
io.flutter.plugins.imagepicker.R$xml
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$WebViewMediaIntegrityApiStatus
kotlinx.coroutines.internal.StackTraceRecoveryKt
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView$1
io.flutter.view.AccessibilityBridge$4
io.flutter.plugins.sharedpreferences.StringListResult
io.flutter.plugin.text.ProcessTextPlugin
androidx.appcompat.view.menu.ExpandedMenuView
io.flutter.embedding.android.FlutterFragmentActivity
io.flutter.app.FlutterFragmentActivity
androidx.preference.PreferenceCategory
io.flutter.plugins.webviewflutter.PigeonApiWebSettings
androidx.recyclerview.widget.GridLayoutManager
io.flutter.embedding.engine.loader.FlutterLoader$1
io.flutter.plugin.platform.WindowManagerHandler
io.flutter.plugin.mouse.MouseCursorPlugin
io.flutter.embedding.engine.FlutterEngineConnectionRegistry
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar$1
io.flutter.util.Predicate
io.flutter.view.FlutterRunArguments
io.flutter.embedding.engine.systemchannels.SpellCheckChannel$SpellCheckMethodHandler
io.flutter.embedding.engine.dart.DartMessenger$BufferedMessageInfo
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2
io.flutter.view.FlutterView$3
io.flutter.embedding.engine.systemchannels.RestorationChannel
io.flutter.plugin.common.StandardMessageCodec
io.flutter.view.VsyncWaiter$FrameCallback
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions$Builder
androidx.profileinstaller.ProfileInstallerInitializer
io.flutter.plugins.imagepicker.ImagePickerCache$1
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult
io.flutter.plugins.webviewflutter.PigeonApiWebView
io.flutter.view.TextureRegistry$SurfaceTextureEntry
io.flutter.plugins.imagepicker.Messages$SourceType
io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage
io.flutter.plugins.webviewflutter.PigeonApiCookieManager
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler
io.flutter.plugin.common.MethodChannel$MethodCallHandler
org.chromium.support_lib_boundary.TracingControllerBoundaryInterface
io.flutter.plugins.imagepicker.ImagePickerPlugin
io.flutter.util.ViewUtils$DisplayUpdater
io.flutter.plugins.urllauncher.Messages$CanIgnoreReturnValue
androidx.preference.EditTextPreference
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager$Companion
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback
io.flutter.plugins.webviewflutter.GeolocationPermissionsCallbackProxyApi
io.flutter.plugins.webviewflutter.ConsoleMessageProxyApi$1
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setString$1
io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest
io.flutter.plugins.sharedpreferences.SharedPreferencesError
io.flutter.plugins.imagepicker.ImagePickerDelegate$1
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode
io.flutter.embedding.android.KeyboardMap$2
io.flutter.embedding.engine.FlutterEngineGroupCache
io.flutter.plugin.platform.SingleViewPresentation$PresentationState
androidx.core.graphics.drawable.IconCompat
io.flutter.embedding.engine.FlutterEngineGroup$Options
io.flutter.embedding.engine.FlutterShellArgs
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderAware
io.flutter.embedding.android.FlutterView$ZeroSides
io.flutter.embedding.engine.dart.DartExecutor$1
io.flutter.view.AccessibilityBridge$3
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget$1
io.flutter.view.AccessibilityBridge$Flag
io.flutter.plugin.editing.ListenableEditingState$1
io.flutter.view.FlutterCallbackInformation
io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder
io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind
io.flutter.view.AccessibilityViewEmbedder$ViewAndId
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference
io.flutter.embedding.engine.plugins.shim.ShimRegistrar
io.flutter.plugins.webviewflutter.WebResourceErrorCompatProxyApi
io.flutter.plugins.imagepicker.ImagePickerDelegate$OnPathReadyListener
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation
io.flutter.plugins.webviewflutter.PigeonApiConsoleMessage
io.flutter.plugins.webviewflutter.PigeonApiWebResourceError
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewBufferResized
org.chromium.support_lib_boundary.SafeBrowsingResponseBoundaryInterface
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest
io.flutter.embedding.android.KeyboardMap$1
io.flutter.embedding.engine.systemchannels.MouseCursorChannel
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler
io.flutter.embedding.engine.dart.DartMessenger$SerialTaskQueue
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView
org.chromium.support_lib_boundary.WebViewClientBoundaryInterface
io.flutter.plugin.common.MethodCodec
io.flutter.plugins.sharedpreferences.SharedPreferencesListEncoder
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi
androidx.window.layout.adapter.sidecar.SidecarCompat$TranslatingCallback
io.flutter.embedding.engine.systemchannels.LocalizationChannel$1
org.chromium.support_lib_boundary.StaticsBoundaryInterface
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager
io.flutter.plugins.webviewflutter.FlutterViewFactory$1
io.flutter.util.PathUtils
io.flutter.plugins.webviewflutter.AndroidWebkitLibrary_gKt
io.flutter.embedding.engine.systemchannels.SpellCheckChannel$1
io.flutter.app.FlutterPlayStoreSplitApplication
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient$Companion
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$2
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient
io.flutter.view.FlutterView$Provider
io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError
io.flutter.embedding.android.FlutterImageView$SurfaceKind
io.flutter.embedding.android.RenderMode
androidx.window.area.reflectionguard.ExtensionWindowAreaPresentationRequirements
org.chromium.support_lib_boundary.PrefetchStatusCodeBoundaryInterface
androidx.preference.SeekBarPreference
androidx.appcompat.view.menu.ListMenuItemView
io.flutter.plugins.sharedpreferences.MessagesAsyncPigeonCodec
io.flutter.plugins.webviewflutter.CustomViewCallbackProxyApi
io.flutter.plugin.editing.TextInputPlugin
io.flutter.plugins.webviewflutter.WebViewProxyApi
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient$1
org.chromium.support_lib_boundary.WebResourceErrorBoundaryInterface
io.flutter.view.AccessibilityBridge$SpellOutStringAttribute
io.flutter.embedding.engine.loader.ResourceExtractor$1
io.flutter.plugin.editing.TextInputPlugin$2
io.flutter.embedding.android.MotionEventTracker
androidx.appcompat.widget.SearchView$SearchAutoComplete
io.flutter.plugin.localization.LocalizationPlugin
io.flutter.embedding.android.KeyEmbedderResponder$1
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$1
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverAware
io.flutter.embedding.engine.systemchannels.TextInputChannel
android.support.v4.app.RemoteActionCompatParcelizer
org.chromium.support_lib_boundary.DropDataContentProviderBoundaryInterface
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType
io.flutter.embedding.engine.dart.DartMessenger$1
kotlin.coroutines.jvm.internal.BaseContinuationImpl
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind
io.flutter.embedding.android.WindowInfoRepositoryCallbackAdapterWrapper
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$1
io.flutter.util.HandlerCompat
io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler$Companion
io.flutter.plugin.platform.PlatformViewsController$1
io.flutter.embedding.android.FlutterTextureView
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDeprecatedStringList$1
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface
androidx.window.layout.adapter.sidecar.SidecarCompat
io.flutter.plugin.common.BasicMessageChannel$Reply
io.flutter.plugins.imagepicker.Messages$GeneralOptions$Builder
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeature
io.flutter.plugin.editing.SpellCheckPlugin
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverPluginBinding
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions$Builder
io.flutter.plugin.platform.VirtualDisplayController$1
androidx.appcompat.widget.ActivityChooserView$InnerLayout
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions$Builder
androidx.core.app.RemoteActionCompatParcelizer
io.flutter.embedding.engine.systemchannels.MouseCursorChannel$1
io.flutter.plugins.sharedpreferences.SharedPreferencesPluginKt
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1
io.flutter.plugin.common.BasicMessageChannel$MessageHandler
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions
androidx.appcompat.widget.ViewStubCompat
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$SpeculativeLoadingStatus
io.flutter.plugin.common.MessageCodec
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1
io.flutter.embedding.android.TransparencyMode
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler
io.flutter.view.TextureRegistry$ImageTextureEntry
androidx.appcompat.widget.SearchView
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2$1
io.flutter.embedding.engine.systemchannels.TextInputChannel$1
io.flutter.embedding.engine.systemchannels.BackGestureChannel$1
io.flutter.embedding.engine.dart.DartMessenger$DefaultTaskQueueFactory
io.flutter.view.AccessibilityBridge$AccessibilityFeature
io.flutter.embedding.android.FlutterFragment
io.flutter.plugins.webviewflutter.FlutterAssetManager
io.flutter.Log
io.flutter.view.TextureRegistry$ImageConsumer
io.flutter.plugins.urllauncher.Messages$BrowserOptions
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange
org.chromium.support_lib_boundary.WebMessageListenerBoundaryInterface
org.chromium.support_lib_boundary.WebMessageBoundaryInterface
io.flutter.plugins.sharedpreferences.StringListLookupResultType$Companion
io.flutter.plugins.webviewflutter.WebViewFlutterAndroidExternalApi
io.flutter.embedding.engine.renderer.FlutterRenderer$2
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl
org.chromium.support_lib_boundary.ProfileBoundaryInterface
io.flutter.view.TextureRegistry$TextureEntry
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest$Companion
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineBroadcastReceiverPluginBinding
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1$1
io.flutter.view.VsyncWaiter$DisplayListener
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState
io.flutter.plugins.imagepicker.ImageResizer
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger
io.flutter.plugin.editing.InputConnectionAdaptor
io.flutter.embedding.engine.plugins.util.GeneratedPluginRegister
io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback$Companion
io.flutter.plugin.common.EventChannel$EventSink
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$WebauthnSupport
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate
io.flutter.plugins.webviewflutter.DisplayListenerProxy
androidx.versionedparcelable.ParcelImpl
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1$1
io.flutter.plugins.webviewflutter.ConsoleMessageProxyApi
androidx.browser.browseractions.BrowserActionsFallbackMenuView
io.flutter.plugins.webviewflutter.FlutterAssetManagerProxyApi
io.flutter.plugins.webviewflutter.R
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$1
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode
org.chromium.support_lib_boundary.PrefetchParamsBoundaryInterface
io.flutter.embedding.engine.systemchannels.LifecycleChannel
io.flutter.Build
io.flutter.view.FlutterMain$Settings
org.chromium.support_lib_boundary.ProfileStoreBoundaryInterface
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel
io.flutter.plugin.common.FlutterException
io.flutter.plugins.webviewflutter.PigeonApiView$Companion
io.flutter.plugins.webviewflutter.WebViewFlutterPlugin
io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener
io.flutter.app.FlutterActivityDelegate$ViewFactory
io.flutter.embedding.engine.dart.DartMessenger$ConcurrentTaskQueue
androidx.transition.FragmentTransitionSupport
io.flutter.view.FlutterMain
io.flutter.view.AccessibilityBridge$5
io.flutter.plugins.urllauncher.WebViewActivity$1
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1
io.flutter.util.TraceSection
io.flutter.plugin.common.PluginRegistry$ActivityResultListener
androidx.core.widget.NestedScrollView
io.flutter.plugins.webviewflutter.PigeonApiWebViewPoint
androidx.recyclerview.widget.RecyclerView
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1$1
io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder
io.flutter.embedding.android.KeyboardMap$TogglingGoal
io.flutter.view.TextureRegistry$OnTrimMemoryListener
io.flutter.view.AccessibilityBridge$StringAttribute
io.flutter.plugin.common.MethodCall
io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin
io.flutter.embedding.engine.systemchannels.KeyEventChannel$EventResponseHandler
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener
io.flutter.plugins.urllauncher.WebViewActivity$2
io.flutter.plugins.sharedpreferences.StringListObjectInputStream
io.flutter.embedding.android.FlutterView$2
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction
io.flutter.embedding.engine.systemchannels.SystemChannel
io.flutter.plugin.common.PluginRegistry
io.flutter.embedding.engine.systemchannels.PlatformChannel$1
android.support.v4.graphics.drawable.IconCompatParcelizer
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState
io.flutter.plugin.common.BinaryCodec
io.flutter.view.TextureRegistry
androidx.versionedparcelable.CustomVersionedParcelable
io.flutter.plugins.imagepicker.ImagePickerDelegate$FileUriResolver
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec
io.flutter.view.AccessibilityBridge$1
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler
io.flutter.embedding.android.FlutterActivity$1
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView
io.flutter.embedding.engine.plugins.lifecycle.FlutterLifecycleAdapter
io.flutter.embedding.engine.systemchannels.LifecycleChannel$1
io.flutter.plugins.urllauncher.Messages$FlutterError
org.chromium.support_lib_boundary.WebMessagePayloadBoundaryInterface$WebMessagePayloadType
io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1
io.flutter.embedding.android.FlutterSurfaceView$1
io.flutter.embedding.engine.FlutterEngine
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions$Companion
io.flutter.embedding.engine.plugins.service.ServiceControlSurface
io.flutter.embedding.android.FlutterSurfaceView
io.flutter.embedding.android.FlutterImageView
io.flutter.embedding.android.KeyData$DeviceType
io.flutter.plugins.urllauncher.UrlLauncherPlugin
io.flutter.embedding.engine.dart.DartMessenger$TaskQueueFactory
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1
io.flutter.plugins.imagepicker.ImagePickerDelegate$PermissionManager
androidx.appcompat.widget.ActionBarContextView
io.flutter.embedding.android.FlutterFragment$ActivityCallThrough
io.flutter.embedding.android.FlutterEngineConfigurator
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors
androidx.lifecycle.ProcessLifecycleInitializer
io.flutter.embedding.engine.plugins.service.ServiceAware
io.flutter.plugin.platform.PlatformPlugin$3
androidx.preference.MultiSelectListPreference
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat
io.flutter.plugins.urllauncher.Messages
io.flutter.plugins.webviewflutter.PigeonApiView
androidx.preference.ListPreference
org.chromium.support_lib_boundary.ScriptHandlerBoundaryInterface
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError$Builder
io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice
io.flutter.embedding.engine.FlutterEngineGroup$1
io.flutter.embedding.engine.systemchannels.SettingsChannel
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions
io.flutter.plugins.imagepicker.R
androidx.appcompat.widget.DialogTitle
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding
io.flutter.plugin.common.BinaryMessenger
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState
io.flutter.plugins.sharedpreferences.Messages$PigeonCodec
io.flutter.plugins.urllauncher.WebViewActivity
androidx.appcompat.widget.FitWindowsFrameLayout
io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback
androidx.core.app.RemoteActionCompat
io.flutter.embedding.android.FlutterActivity
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder
io.flutter.embedding.engine.FlutterJNI
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel$Companion
io.flutter.plugins.imagepicker.Messages$CacheRetrievalType
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType
io.flutter.plugin.common.PluginRegistry$Registrar
io.flutter.plugins.webviewflutter.PigeonApiWebResourceResponse
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$dataStoreSetString$2
io.flutter.plugins.webviewflutter.ConsoleMessageLevel$Companion
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver
io.flutter.plugins.webviewflutter.WebSettingsProxyApi
androidx.window.extensions.core.util.function.Predicate
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2$1
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderControlSurface
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$1
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient
io.flutter.app.FlutterActivityDelegate
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$DefaultFlutterAssets
io.flutter.plugins.sharedpreferences.Messages$FlutterError
io.flutter.embedding.android.KeyEmbedderResponder
io.flutter.embedding.engine.renderer.FlutterRenderer$TextureFinalizerRunnable
io.flutter.plugin.platform.PlatformView
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel$1
io.flutter.embedding.android.FlutterSurfaceView$2
androidx.appcompat.widget.Toolbar
io.flutter.plugins.flutter_plugin_android_lifecycle.R
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi
io.flutter.embedding.engine.dart.PlatformTaskQueue
io.flutter.embedding.engine.renderer.FlutterRenderer
io.flutter.embedding.android.MotionEventTracker$MotionEventId
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization
io.flutter.plugins.webviewflutter.FlutterViewFactory
io.flutter.plugin.common.BasicMessageChannel$1
io.flutter.embedding.engine.FlutterOverlaySurface
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$ForceDarkBehavior
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue
org.chromium.support_lib_boundary.WebMessagePortBoundaryInterface
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType
io.flutter.view.FlutterView
io.flutter.embedding.android.KeyData$Type
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder$Callback
io.flutter.embedding.android.FlutterPlayStoreSplitApplication
org.chromium.support_lib_boundary.ProxyControllerBoundaryInterface
io.flutter.plugins.urllauncher.Messages$BrowserOptions$Builder
io.flutter.view.FlutterView$FirstFrameListener
io.flutter.embedding.engine.systemchannels.ProcessTextChannel
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl
androidx.profileinstaller.ProfileInstallReceiver
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin
io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar
io.flutter.plugin.common.PluginRegistry$NewIntentListener
io.flutter.embedding.engine.systemchannels.AccessibilityChannel
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface
io.flutter.embedding.engine.dart.DartMessenger$HandlerInfo
io.flutter.plugins.urllauncher.BuildConfig
io.flutter.plugin.platform.SingleViewPresentation
io.flutter.plugins.sharedpreferences.StringListLookupResultType
io.flutter.plugins.imagepicker.Messages$SourceSpecification$Builder
io.flutter.plugins.imagepicker.Messages$Result
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay
androidx.preference.DropDownPreference
io.flutter.plugins.webviewflutter.DownloadListenerProxyApi$DownloadListenerImpl
io.flutter.embedding.android.KeyboardManager$ViewDelegate
io.flutter.plugin.platform.PlatformViewRegistry
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1
org.chromium.support_lib_boundary.ProcessGlobalConfigConstants$ProcessGlobalConfigMapKey
io.flutter.embedding.engine.renderer.RenderSurface
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1$1
io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback$Companion
io.flutter.plugins.webviewflutter.FileChooserMode
io.flutter.embedding.engine.dart.DartMessenger$DartMessengerTaskQueue
io.flutter.plugins.webviewflutter.ResultCompat$Companion
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel
io.flutter.embedding.engine.dart.PlatformMessageHandler
io.flutter.plugins.webviewflutter.DownloadListenerProxyApi
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderPluginBinding
io.flutter.plugins.webviewflutter.PigeonApiWebStorage
io.flutter.embedding.android.KeyboardManager$1
io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener
io.flutter.plugins.imagepicker.ImagePickerPlugin$1
androidx.recyclerview.widget.StaggeredGridLayoutManager
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry
androidx.preference.UnPressableLinearLayout
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener$Companion
io.flutter.plugins.imagepicker.Messages$FlutterError
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding
io.flutter.embedding.engine.systemchannels.PlatformChannel$2
io.flutter.embedding.engine.dart.DartExecutor$DartCallback
io.flutter.embedding.engine.systemchannels.RestorationChannel$1
androidx.preference.CheckBoxPreference
io.flutter.plugins.imagepicker.ImagePickerDelegate$2
io.flutter.plugin.common.JSONMethodCodec
androidx.window.extensions.core.util.function.Consumer
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setEncodedStringList$1
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream
io.flutter.plugin.mouse.MouseCursorPlugin$2
io.flutter.view.AccessibilityBridge$LocaleStringAttribute
androidx.window.area.reflectionguard.ExtensionWindowAreaStatusRequirements
io.flutter.embedding.engine.plugins.activity.ActivityControlSurface
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent
io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget
com.example.bnm_edu.MainActivity
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient$1
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2
io.flutter.plugins.webviewflutter.WebViewPoint
io.flutter.embedding.engine.FlutterEngineGroup
androidx.preference.PreferenceGroup
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription
io.flutter.embedding.android.KeyboardManager$CharacterCombiner
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1
io.flutter.plugin.editing.TextInputPlugin$InputTarget
io.flutter.embedding.android.AndroidTouchProcessor
org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface
io.flutter.embedding.engine.loader.FlutterLoader
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient
io.flutter.embedding.android.FlutterView$3
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$DelegateFactory
io.flutter.embedding.android.KeyData
io.flutter.plugins.imagepicker.Messages
io.flutter.plugin.platform.VirtualDisplayController$2$1
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2$1
io.flutter.view.AccessibilityBridge$StringAttributeType
io.flutter.plugin.editing.InputConnectionAdaptor$KeyboardDelegate
org.chromium.support_lib_boundary.IsomorphicObjectBoundaryInterface
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler
io.flutter.plugins.webviewflutter.WebViewClientProxyApi
io.flutter.plugin.platform.PlatformViewWrapper
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin
io.flutter.plugin.common.StandardMethodCodec
io.flutter.embedding.engine.systemchannels.KeyboardChannel
io.flutter.plugin.common.StringCodec
io.flutter.embedding.engine.systemchannels.KeyEventChannel
io.flutter.plugins.webviewflutter.WebResourceResponseProxyApi
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2
io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler
io.flutter.plugins.urllauncher.Messages$PigeonCodec
io.flutter.plugin.editing.ListenableEditingState
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness
io.flutter.app.FlutterActivityDelegate$1$1
org.chromium.support_lib_boundary.WebMessagePayloadBoundaryInterface
io.flutter.plugin.editing.FlutterTextUtils
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate
io.flutter.plugin.common.MethodChannel$IncomingResultHandler
org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface
io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate
io.flutter.embedding.engine.plugins.service.ServiceAware$OnModeChangeListener
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$1
io.flutter.plugin.platform.SingleViewFakeWindowViewGroup
io.flutter.embedding.engine.systemchannels.NavigationChannel$1
io.flutter.embedding.android.FlutterView$4
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1
io.flutter.embedding.android.FlutterFragment$2
io.flutter.plugin.common.EventChannel$StreamHandler
io.flutter.plugin.platform.PlatformOverlayView
io.flutter.view.FlutterNativeView
org.chromium.support_lib_boundary.JsReplyProxyBoundaryInterface
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin$ListEncoder
io.flutter.plugins.imagepicker.ExifDataCopier
io.flutter.view.VsyncWaiter
io.flutter.plugins.imagepicker.Messages$NullableResult
io.flutter.plugin.platform.PlatformPlugin
org.chromium.support_lib_boundary.WebViewRendererBoundaryInterface
org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface
io.flutter.plugins.webviewflutter.DisplayListenerProxy$1
androidx.appcompat.widget.SwitchCompat
io.flutter.plugins.imagepicker.Messages$PigeonCodec
io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate
io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask
io.flutter.plugins.imagepicker.Messages$ImagePickerApi
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverControlSurface
io.flutter.view.FlutterView$2
io.flutter.embedding.android.FlutterView
io.flutter.FlutterInjector$Builder$NamedThreadFactory
io.flutter.embedding.engine.FlutterEngine$1
io.flutter.plugins.webviewflutter.JavaScriptChannelProxyApi
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler
io.flutter.embedding.android.KeyboardManager
io.flutter.embedding.android.FlutterView$5
io.flutter.view.FlutterView$ViewportMetrics
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager
androidx.core.graphics.drawable.IconCompatParcelizer
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewBufferSize
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler
io.flutter.plugins.urllauncher.Messages$WebViewOptions
androidx.preference.SwitchPreferenceCompat
io.flutter.plugin.platform.VirtualDisplayController$2
io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack
io.flutter.plugin.platform.SingleViewPresentation$ImmContext
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness
io.flutter.plugins.imagepicker.Messages$SourceCamera
io.flutter.plugin.editing.TextEditingDelta
io.flutter.embedding.engine.loader.ResourceExtractor
io.flutter.plugin.common.MethodChannel
io.flutter.view.AccessibilityBridge$Action
androidx.window.extensions.core.util.function.Function
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2$1
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar
io.flutter.FlutterInjector$Builder
io.flutter.plugin.platform.PlatformViewWrapper$1
androidx.appcompat.widget.AlertDialogLayout
kotlinx.coroutines.android.AndroidDispatcherFactory
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder
io.flutter.app.FlutterActivity
io.flutter.plugin.common.JSONMessageCodec
io.flutter.util.ViewUtils$ViewVisitor
io.flutter.plugins.imagepicker.ImagePickerDelegate$MediaPath
io.flutter.plugins.GeneratedPluginRegistrant
io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState
io.flutter.plugins.webviewflutter.HttpAuthHandlerProxyApi
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$AttributionBehavior
io.flutter.app.FlutterApplication
io.flutter.plugins.webviewflutter.ResultCompat
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager$PigeonFinalizationListener
io.flutter.embedding.engine.plugins.activity.ActivityAware
io.flutter.embedding.engine.systemchannels.PlatformChannel
org.chromium.support_lib_boundary.WebMessageCallbackBoundaryInterface
io.flutter.plugin.common.ActivityLifecycleListener
io.flutter.plugins.urllauncher.R
org.chromium.support_lib_boundary.VisualStateCallbackBoundaryInterface
io.flutter.app.FlutterActivityDelegate$1
io.flutter.plugin.common.EventChannel$1
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle
androidx.annotation.Keep
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest
androidx.webkit.WebViewClientCompat
androidx.preference.Preference
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_READ_ONLY
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_SHOULD_DELAY_FIRST_ANDROID_VIEW_DRAW
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineContentProviderPluginBinding contentProviderPluginBinding
io.flutter.view.AccessibilityBridge$SemanticsNode: int currentValueLength
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions: java.lang.Long maxDurationSeconds
io.flutter.view.AccessibilityBridge$SemanticsNode: float previousScrollExtentMax
io.flutter.embedding.engine.systemchannels.SettingsChannel: io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue CONFIGURATION_QUEUE
io.flutter.Log: int DEBUG
io.flutter.plugin.common.StandardMessageCodec: byte LONG_ARRAY
io.flutter.embedding.android.KeyboardMap: long kValueMask
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: io.flutter.view.TextureRegistry$SurfaceTextureEntry surfaceTextureEntry
io.flutter.embedding.engine.dart.DartExecutor: boolean isApplicationRunning
io.flutter.view.AccessibilityBridge$SemanticsNode: float bottom
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType inputType
io.flutter.plugin.common.StandardMessageCodec: byte LIST
kotlinx.coroutines.flow.StateFlowSlot: java.lang.Object _state
androidx.fragment.app.Fragment: java.lang.String mTargetWho
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: android.content.SharedPreferences preferences
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: double logicalWidth
io.flutter.plugins.webviewflutter.FlutterViewFactory$1: java.lang.Object val$instance
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterTextureView flutterTextureView
io.flutter.embedding.engine.loader.FlutterLoader: java.util.concurrent.Future initResultFuture
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack this$0
io.flutter.app.FlutterFragmentActivity: io.flutter.app.FlutterActivityDelegate delegate
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: java.lang.Runnable onFrameConsumed
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_TRACE_SYSTRACE
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions: io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions imageSelectionOptions
io.flutter.embedding.engine.renderer.FlutterRenderer$TextureFinalizerRunnable: long id
io.flutter.plugin.common.StringCodec: io.flutter.plugin.common.StringCodec INSTANCE
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1: int label
io.flutter.embedding.engine.systemchannels.KeyboardChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: java.lang.Integer previousVisibility
io.flutter.plugin.editing.ListenableEditingState: int mChangeNotificationDepth
io.flutter.plugins.webviewflutter.WebViewFlutterPlugin: io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding pluginBinding
androidx.datastore.preferences.PreferencesProto$PreferenceMap: androidx.datastore.preferences.protobuf.Parser PARSER
io.flutter.Build$API_LEVELS: int API_25
androidx.activity.OnBackPressedCallback: kotlin.jvm.functions.Function0 enabledChangedCallback
io.flutter.plugin.common.BasicMessageChannel: io.flutter.plugin.common.BinaryMessenger messenger
io.flutter.BuildConfig: boolean PROFILE
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object _next
io.flutter.plugins.urllauncher.BuildConfig: java.lang.String BUILD_TYPE
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType CLIP_RRECT
io.flutter.embedding.engine.systemchannels.ProcessTextChannel: io.flutter.embedding.engine.systemchannels.ProcessTextChannel$ProcessTextMethodHandler processTextMethodHandler
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1: java.util.List $allowList
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization textCapitalization
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: android.view.Surface surface
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: java.lang.String[] contentCommitMimeTypes
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: java.lang.String name
androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object value
io.flutter.plugins.webviewflutter.WebViewPoint: long y
kotlinx.coroutines.channels.BufferedChannel: long sendersAndCloseStatus
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: android.os.Handler handler
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean isFirstFrameRendered
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode parent
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String IMPELLER_BACKEND_META_DATA_KEY
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined
io.flutter.embedding.android.FlutterView: androidx.core.util.Consumer windowInfoListener
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setEncodedStringList$1: java.lang.String $value
io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback: io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback$Companion Companion
io.flutter.embedding.engine.FlutterEngineGroup: java.util.List activeEngines
androidx.datastore.preferences.protobuf.GeneratedMessageLite: androidx.datastore.preferences.protobuf.UnknownFieldSetLite unknownFields
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2: androidx.datastore.preferences.core.Preferences$Key $key$inlined
io.flutter.plugin.platform.SurfaceProducerPlatformViewRenderTarget: io.flutter.view.TextureRegistry$SurfaceProducer producer
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow
io.flutter.view.FlutterNativeView: io.flutter.app.FlutterPluginRegistry mPluginRegistry
io.flutter.plugins.webviewflutter.DisplayListenerProxy: java.lang.String TAG
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: java.lang.String fileName
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.plugin.common.StandardMessageCodec: byte DOUBLE
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int deviceId
io.flutter.plugin.platform.PlatformViewsController: android.util.SparseArray platformViews
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingHandler
kotlinx.coroutines.UndispatchedCoroutine: boolean threadLocalIsSet
io.flutter.Build$API_LEVELS: int API_33
io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder: java.lang.String cachedEngineId
androidx.datastore.preferences.protobuf.GeneratedMessageLite: int MUTABLE_FLAG_MASK
androidx.datastore.preferences.PreferencesProto$Value: int BOOLEAN_FIELD_NUMBER
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient: android.webkit.WebViewClient webViewClient
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: java.util.Map nameToSessionId
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.FlutterEngineConnectionRegistry pluginRegistry
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl: io.flutter.view.FlutterNativeView this$0
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String previousValue
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer this$1
io.flutter.embedding.engine.systemchannels.LifecycleChannel: boolean lastFocus
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: java.lang.String MAPPING_KEY
io.flutter.embedding.engine.systemchannels.ProcessTextChannel: java.lang.String METHOD_PROCESS_TEXT_ACTION
androidx.activity.ComponentActivity: androidx.activity.contextaware.ContextAwareHelper contextAwareHelper
io.flutter.plugins.imagepicker.ImagePickerDelegate: android.net.Uri pendingCameraMediaUri
io.flutter.embedding.android.KeyboardManager: io.flutter.embedding.android.KeyboardManager$ViewDelegate viewDelegate
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener insetsListener
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$WebViewMediaIntegrityApiStatus: int DISABLED
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String IMPELLER_VULKAN_GPU_TRACING_DATA_KEY
io.flutter.embedding.android.KeyData: io.flutter.embedding.android.KeyData$DeviceType deviceType
io.flutter.embedding.engine.renderer.FlutterRenderer: boolean debugForceSurfaceProducerGlTextures
io.flutter.embedding.android.AndroidTouchProcessor: io.flutter.embedding.engine.renderer.FlutterRenderer renderer
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_TEXT_FIELD
io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask: java.util.HashSet mResources
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder: java.lang.String dartEntrypoint
io.flutter.plugin.platform.PlatformViewFactory: io.flutter.plugin.common.MessageCodec createArgsCodec
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method longArrayGetIndex
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$1: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate this$0
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: int raw
androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelStore _viewModelStore
io.flutter.plugins.imagepicker.Messages$CacheRetrievalType: io.flutter.plugins.imagepicker.Messages$CacheRetrievalType VIDEO
io.flutter.embedding.android.FlutterView$5: io.flutter.embedding.android.FlutterView this$0
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List labelAttributes
io.flutter.view.VsyncWaiter$FrameCallback: long cookie
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: android.util.SparseArray sessionIdToState
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow
androidx.fragment.app.BackStackRecordState: android.os.Parcelable$Creator CREATOR
io.flutter.plugin.editing.SpellCheckPlugin: java.lang.String SUGGESTIONS_KEY
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode TEXTURE_WITH_HYBRID_FALLBACK
io.flutter.view.FlutterView: java.util.concurrent.atomic.AtomicLong nextTextureId
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String DEFAULT_BACKGROUND_MODE
io.flutter.app.FlutterFragmentActivity: io.flutter.view.FlutterView$Provider viewProvider
io.flutter.view.VsyncWaiter: io.flutter.view.VsyncWaiter$DisplayListener listener
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: java.lang.Integer systemNavigationBarColor
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: io.flutter.plugin.common.BinaryMessenger messenger
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType POSTAL_ADDRESS
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_INITIAL_ROUTE
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: io.flutter.plugins.webviewflutter.ConsoleMessageLevel WARNING
io.flutter.embedding.engine.loader.FlutterApplicationInfo: boolean automaticallyRegisterPlugins
io.flutter.plugins.webviewflutter.FileChooserMode: io.flutter.plugins.webviewflutter.FileChooserMode OPEN_MULTIPLE
io.flutter.embedding.android.FlutterTextureView$1: io.flutter.embedding.android.FlutterTextureView this$0
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader: android.media.ImageReader reader
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$AttributionBehavior: int DISABLED
io.flutter.plugin.platform.PlatformPlugin: io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler mPlatformMessageHandler
io.flutter.view.AccessibilityBridge$SemanticsNode: float left
io.flutter.embedding.android.KeyboardMap$TogglingGoal: int mask
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding activityPluginBinding
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.loader.FlutterLoader instance
io.flutter.embedding.android.FlutterFragment$2: io.flutter.embedding.android.FlutterFragment this$0
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature INVERT_COLORS
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.plugin.common.BinaryMessenger binaryMessenger
io.flutter.embedding.engine.FlutterJNI: java.lang.String TAG
io.flutter.plugins.imagepicker.ImagePickerPlugin$1: int[] $SwitchMap$io$flutter$plugins$imagepicker$Messages$SourceCamera
io.flutter.embedding.engine.loader.FlutterLoader$InitResult: java.lang.String dataDirPath
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String EXTRA_ENABLE_STATE_RESTORATION
androidx.activity.ComponentActivity: int contentLayoutId
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode HYBRID_ONLY
io.flutter.embedding.engine.systemchannels.LifecycleChannel: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState lastFlutterState
io.flutter.plugins.imagepicker.ImagePickerDelegate: android.app.Activity activity
io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask: java.lang.String mDataDirPath
io.flutter.embedding.android.FlutterTextureView: android.view.TextureView$SurfaceTextureListener surfaceTextureListener
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String MAP_KEY_TYPE
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object result
io.flutter.plugins.urllauncher.UrlLauncher: android.content.Context applicationContext
androidx.datastore.preferences.PreferencesProto$PreferenceMap: int PREFERENCES_FIELD_NUMBER
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout: android.view.View embeddedView
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String increasedValue
kotlinx.coroutines.JobSupport: java.lang.Object _parentHandle
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.lang.String pluginId
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewBufferSize: int width
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: android.content.Context flutterAppWindowContext
androidx.activity.ComponentActivity: kotlin.Lazy fullyDrawnReporter$delegate
io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder: java.lang.Class activityClass
io.flutter.FlutterInjector$Builder$NamedThreadFactory: io.flutter.FlutterInjector$Builder this$0
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$2: io.flutter.embedding.android.FlutterView val$flutterView
io.flutter.plugin.editing.TextInputPlugin: java.lang.String TAG
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.ExtractedTextRequest mExtractRequest
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState DETACHED
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getKeys$prefs$1: java.util.List $allowList
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: android.webkit.WebViewClient currentWebViewClient
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: io.flutter.plugin.common.BasicMessageChannel$MessageHandler handler
io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions: boolean isSerial
io.flutter.embedding.android.FlutterActivity: java.lang.String TAG
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: java.util.Map componentNameToResults
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String EXTRA_BACKGROUND_MODE
io.flutter.embedding.android.FlutterTextureView: boolean isPaused
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: int encodedValue
io.flutter.plugins.webviewflutter.ConsoleMessageProxyApi$1: int[] $SwitchMap$android$webkit$ConsoleMessage$MessageLevel
io.flutter.view.AccessibilityBridge$5: int[] $SwitchMap$io$flutter$view$AccessibilityBridge$StringAttributeType
io.flutter.plugin.common.StandardMessageCodec: io.flutter.plugin.common.StandardMessageCodec INSTANCE
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getPrefs$1: java.lang.Object L$0
io.flutter.embedding.engine.systemchannels.ProcessTextChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler
io.flutter.view.AccessibilityBridge$4: io.flutter.view.AccessibilityBridge this$0
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: io.flutter.plugins.webviewflutter.WebChromeClientProxyApi api
io.flutter.BuildConfig: boolean RELEASE
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean isFlutterUiDisplayed
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion $$INSTANCE
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewInsetRight
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_CHARACTER
io.flutter.embedding.android.FlutterView: java.lang.String TAG
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String MAP_TYPE_VALUE_IMAGE
io.flutter.app.FlutterActivityDelegate: io.flutter.app.FlutterActivityDelegate$ViewFactory viewFactory
io.flutter.view.AccessibilityViewEmbedder: java.util.Map originToFlutterId
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: android.os.Handler handler
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: boolean isDecimal
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_OBSERVATORY_PORT
io.flutter.view.AccessibilityBridge$3: io.flutter.view.AccessibilityBridge this$0
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode IMMERSIVE_STICKY
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1$1: int label
io.flutter.embedding.android.FlutterView: java.util.Set flutterUiDisplayListeners
io.flutter.plugin.platform.PlatformViewsController: java.util.HashMap vdControllers
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode image
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.android.MotionEventTracker motionEventTracker
io.flutter.embedding.engine.systemchannels.RestorationChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.NavigationChannel navigationChannel
androidx.datastore.preferences.protobuf.GeneratedMessageLite: int memoizedSerializedSize
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String MAP_KEY_MAX_WIDTH
io.flutter.embedding.engine.renderer.FlutterRenderer: android.os.Handler handler
io.flutter.plugin.platform.SingleViewFakeWindowViewGroup: android.graphics.Rect viewBounds
androidx.fragment.app.Fragment: int STARTED
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: io.flutter.plugin.common.EventChannel this$0
androidx.core.content.FileProvider: java.lang.String TAG_FILES_PATH
io.flutter.plugin.platform.PlatformViewWrapper: java.lang.String TAG
kotlinx.coroutines.CompletedExceptionally: int _handled
io.flutter.view.FlutterView: io.flutter.embedding.android.KeyboardManager mKeyboardManager
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType type
io.flutter.plugins.urllauncher.UrlLauncher: java.lang.String TAG
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action INCREASE
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int systemGestureInsetRight
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String MAP_KEY_ERROR
io.flutter.plugins.webviewflutter.PigeonApiView: io.flutter.plugins.webviewflutter.PigeonApiView$Companion Companion
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_DUMP_SHADER_SKP_ON_SHADER_COMPILATION
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setString$1: java.lang.String $value
androidx.core.content.FileProvider: java.lang.String TAG_CACHE_PATH
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: java.lang.ref.ReferenceQueue referenceQueue
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness LIGHT
io.flutter.plugin.common.StandardMessageCodec: byte INT_ARRAY
io.flutter.view.FlutterView$ViewportMetrics: float devicePixelRatio
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader lastReaderDequeuedFrom
io.flutter.embedding.engine.systemchannels.SpellCheckChannel: io.flutter.embedding.engine.systemchannels.SpellCheckChannel$SpellCheckMethodHandler spellCheckMethodHandler
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: android.util.DisplayMetrics displayMetrics
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection UNKNOWN
io.flutter.view.AccessibilityBridge$2: io.flutter.view.AccessibilityBridge this$0
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SCROLL_UP
io.flutter.plugins.webviewflutter.FlutterViewFactory: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager instanceManager
io.flutter.embedding.engine.FlutterEngine: java.util.Set engineLifecycleListeners
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel platformViewsChannel
io.flutter.view.FlutterView: java.util.List mActivityLifecycleListeners
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat PLAIN_TEXT
androidx.core.widget.NestedScrollView$SavedState: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.systemchannels.SettingsChannel: java.lang.String CONFIGURATION_ID
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: java.lang.Boolean systemStatusBarContrastEnforced
io.flutter.plugins.urllauncher.WebViewActivity: java.lang.String ACTION_CLOSE
androidx.fragment.app.BackStackState: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_START_PAUSED
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int unsetValue
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType CLIP_PATH
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String FLUTTER_ASSETS_DIR_KEY
io.flutter.embedding.engine.systemchannels.KeyboardChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest: io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest$Companion Companion
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout rootView
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String EXTRA_CACHED_ENGINE_GROUP_ID
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$WebauthnSupport: int APP
io.flutter.embedding.android.FlutterView$5: io.flutter.embedding.engine.renderer.FlutterRenderer val$renderer
kotlinx.coroutines.JobSupport$Finishing: int _isCompleting
io.flutter.plugins.webviewflutter.FileChooserMode: kotlin.enums.EnumEntries $ENTRIES
io.flutter.embedding.engine.loader.FlutterLoader$1: io.flutter.embedding.engine.loader.FlutterLoader this$0
io.flutter.plugin.mouse.MouseCursorPlugin$2: io.flutter.plugin.mouse.MouseCursorPlugin this$0
io.flutter.plugin.common.MethodCall: java.lang.Object arguments
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: boolean returnValueForShouldOverrideUrlLoading
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List increasedValueAttributes
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView$1: android.view.View$OnFocusChangeListener val$userFocusListener
io.flutter.plugins.imagepicker.ImagePickerDelegate$PendingCallState: io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions videoOptions
io.flutter.embedding.engine.FlutterEngineGroup$Options: boolean waitForRestorationData
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$0
androidx.fragment.app.Fragment: boolean mInLayout
io.flutter.plugin.common.StandardMessageCodec: byte DOUBLE_ARRAY
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType ALERT
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: android.view.View view
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int REMOVE
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$DefaultFlutterAssets: io.flutter.embedding.engine.loader.FlutterLoader flutterLoader
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$0
io.flutter.Build$API_LEVELS: int API_30
io.flutter.embedding.android.KeyData: long timestamp
io.flutter.app.FlutterPluginRegistry: android.content.Context mAppContext
io.flutter.plugin.platform.PlatformViewsController: android.util.SparseArray overlayLayerViews
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: android.view.ViewTreeObserver$OnGlobalFocusChangeListener activeFocusListener
io.flutter.view.FlutterView$ViewportMetrics: int physicalViewPaddingBottom
androidx.datastore.preferences.PreferencesProto$Value: int INTEGER_FIELD_NUMBER
io.flutter.view.AccessibilityViewEmbedder: android.util.SparseArray flutterIdToOrigin
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SCROLL_RIGHT
io.flutter.embedding.android.FlutterImageView$1: int[] $SwitchMap$io$flutter$embedding$android$FlutterImageView$SurfaceKind
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: boolean shouldAttachEngineToActivity
io.flutter.plugins.imagepicker.ImagePickerPlugin$1: int[] $SwitchMap$io$flutter$plugins$imagepicker$Messages$SourceType
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String tooltip
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1: java.lang.String $key
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int requestedHeight
io.flutter.embedding.android.KeyboardManager: io.flutter.embedding.android.KeyboardManager$Responder[] responders
io.flutter.plugins.webviewflutter.PigeonApiFileChooserParams: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: io.flutter.embedding.engine.systemchannels.MouseCursorChannel$MouseCursorMethodHandler mouseCursorMethodHandler
io.flutter.embedding.engine.loader.FlutterLoader: java.util.concurrent.ExecutorService executorService
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityViewEmbedder accessibilityViewEmbedder
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.BackGestureChannel backGestureChannel
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _prev
io.flutter.embedding.engine.FlutterEngine: java.lang.String TAG
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputConnection lastInputConnection
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.view.TextureRegistry$SurfaceProducer$Callback callback
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean ignoringFence
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.view.TextureRegistry textureRegistry
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numTrims
io.flutter.embedding.engine.systemchannels.SettingsChannel: java.lang.String NATIVE_SPELL_CHECK_SERVICE_DEFINED
io.flutter.plugin.editing.TextInputPlugin: android.util.SparseArray autofillConfiguration
io.flutter.plugin.common.StringCodec: java.nio.charset.Charset UTF8
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding pluginBinding
kotlinx.coroutines.flow.StateFlowImpl: java.lang.Object _state
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$FeatureInstallStateUpdatedListener listener
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentHostCallback mHost
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object _closeCause
io.flutter.embedding.engine.FlutterJNI: float displayDensity
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: java.lang.String PLUGINS_RESTORATION_BUNDLE_KEY
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1: kotlin.jvm.internal.Ref$ObjectRef $value
androidx.fragment.app.Fragment: boolean mRetainInstanceChangedWhileDetached
io.flutter.view.AccessibilityBridge: android.database.ContentObserver animationScaleObserver
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler isolateChannelMessageHandler
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: android.app.Service service
io.flutter.plugin.platform.VirtualDisplayController: android.content.Context context
io.flutter.embedding.engine.dart.DartMessenger: java.util.Map pendingReplies
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int resourceId
kotlinx.coroutines.channels.BufferedChannel: long receivers
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode opaque
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage: long queuedTime
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String label
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] $VALUES
io.flutter.Log: int WARN
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult$Builder: java.util.List paths
io.flutter.embedding.android.KeyData: long physicalKey
io.flutter.plugins.webviewflutter.ResultCompat: io.flutter.plugins.webviewflutter.ResultCompat$Companion Companion
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: java.util.Map activityAwarePlugins
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.view.AccessibilityBridge$SemanticsNode: int textSelectionBase
io.flutter.view.AccessibilityBridge$SemanticsNode: int scrollIndex
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int DOWN
androidx.activity.ComponentActivity: boolean dispatchingOnPictureInPictureModeChanged
io.flutter.view.AccessibilityViewEmbedder: java.lang.String TAG
io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder: java.lang.Class activityClass
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type FRAMEWORK_CLIENT
androidx.fragment.app.Fragment: androidx.lifecycle.Lifecycle$State mMaxState
io.flutter.plugin.platform.PlatformPlugin: int DEFAULT_SYSTEM_UI
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: io.flutter.plugins.sharedpreferences.SharedPreferencesListEncoder listEncoder
io.flutter.plugins.urllauncher.UrlLauncher: io.flutter.plugins.urllauncher.UrlLauncher$IntentResolver intentResolver
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2: androidx.datastore.preferences.core.Preferences$Key $preferencesKey$inlined
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader imageReader
kotlinx.coroutines.InvokeOnCancelling: int _invoked
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: android.media.Image image
io.flutter.embedding.android.FlutterView$2: io.flutter.embedding.android.FlutterView this$0
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: io.flutter.plugins.webviewflutter.ConsoleMessageLevel[] $VALUES
io.flutter.view.AccessibilityBridge: float DISABLED_TRANSITION_ANIMATION_SCALE
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder$Callback: boolean isCalled
io.flutter.view.VsyncWaiter: io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate
io.flutter.view.AccessibilityBridge$SemanticsNode: float previousScrollPosition
io.flutter.plugins.urllauncher.Messages$WebViewOptions$Builder: java.lang.Boolean enableJavaScript
io.flutter.plugin.common.MethodCall: java.lang.String method
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackName
io.flutter.embedding.engine.loader.FlutterLoader$Settings: java.lang.String logTag
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String INITIAL_ROUTE_META_DATA_KEY
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action COPY
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String SHARED_PREFERENCE_ERROR_MESSAGE_KEY
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_WORD
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$2: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate this$0
io.flutter.app.FlutterActivityDelegate$1: io.flutter.app.FlutterActivityDelegate this$0
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder: android.view.KeyEvent keyEvent
io.flutter.embedding.engine.dart.DartExecutor$1: io.flutter.embedding.engine.dart.DartExecutor this$0
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$WebauthnSupport: int BROWSER
io.flutter.embedding.engine.loader.ResourceExtractor: android.content.pm.PackageManager mPackageManager
io.flutter.plugin.text.ProcessTextPlugin: android.content.pm.PackageManager packageManager
io.flutter.plugins.webviewflutter.AndroidWebKitError: java.lang.String message
androidx.fragment.app.Fragment: android.util.SparseArray mSavedViewState
io.flutter.plugins.imagepicker.ImagePickerDelegate: io.flutter.plugins.imagepicker.ImageResizer imageResizer
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: java.lang.Integer inputAction
io.flutter.plugin.localization.LocalizationPlugin$1: io.flutter.plugin.localization.LocalizationPlugin this$0
io.flutter.view.AccessibilityBridge$SemanticsNode: float scrollPosition
androidx.fragment.app.Fragment: java.lang.Runnable mPostponedDurationRunnable
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object result
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget$1: io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget this$0
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi: kotlin.Lazy codec$delegate
io.flutter.plugins.imagepicker.Messages$SourceCamera: io.flutter.plugins.imagepicker.Messages$SourceCamera FRONT
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: android.util.SparseArray loadingUnitIdToComponentNames
kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object _cur
androidx.lifecycle.ProcessLifecycleOwner$attach$1: androidx.lifecycle.ProcessLifecycleOwner this$0
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: boolean shouldDelayFirstAndroidViewDraw
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: io.flutter.embedding.android.RenderMode renderMode
androidx.fragment.app.FragmentActivity: boolean mStopped
kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] $VALUES
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: java.lang.String TAG
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String AOT_VMSERVICE_SHARED_LIBRARY_NAME
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_CACHE_SKSL
androidx.datastore.preferences.PreferencesProto$Value: int FLOAT_FIELD_NUMBER
io.flutter.Build$API_LEVELS: int API_32
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$ForceDarkBehavior: int PREFER_MEDIA_QUERY_OVER_FORCE_DARK
androidx.core.content.FileProvider: java.lang.String DISPLAYNAME_FIELD
io.flutter.plugins.imagepicker.Messages$SourceType: io.flutter.plugins.imagepicker.Messages$SourceType CAMERA
io.flutter.plugins.urllauncher.Messages$BrowserOptions$Builder: java.lang.Boolean showTitle
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_ENABLE_SOFTWARE_RENDERING
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0
androidx.activity.ComponentActivity: boolean dispatchingOnMultiWindowModeChanged
io.flutter.view.FlutterView$ViewportMetrics: int physicalViewInsetRight
io.flutter.embedding.android.FlutterSurfaceView: boolean isPaused
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.plugin.common.BinaryMessenger binaryMessenger
io.flutter.BuildConfig: boolean DEBUG
androidx.fragment.app.Fragment: android.os.Bundle mArguments
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode[] $VALUES
io.flutter.plugin.platform.PlatformViewsController: java.util.HashSet currentFrameUsedPlatformViewIds
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides LEFT
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String SHARED_PREFERENCE_PENDING_IMAGE_URI_PATH_KEY
androidx.core.content.FileProvider: java.lang.String ATTR_NAME
io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: io.flutter.plugins.webviewflutter.ConsoleMessageLevel ERROR
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: boolean shouldAutomaticallyHandleOnBackPressed
io.flutter.embedding.android.KeyboardMap$PressingGoal: io.flutter.embedding.android.KeyboardMap$KeyPair[] keys
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: java.lang.String encodedName
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.SettingsChannel settingsChannel
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides LEFT
io.flutter.embedding.engine.dart.DartMessenger: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.util.HashMap perImageReaders
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String isolateSnapshotData
io.flutter.embedding.android.KeyboardMap$TogglingGoal: long physicalKey
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType[] $VALUES
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.util.Set newIntentListeners
io.flutter.Log: int ERROR
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: android.view.KeyEvent event
io.flutter.plugin.mouse.MouseCursorPlugin: java.util.HashMap systemCursorConstants
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: boolean shouldRecreateSurfaceForLowMemory
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewPaddingTop
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: java.lang.String TAG
io.flutter.plugin.editing.TextEditingDelta: int deltaStart
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.embedding.android.FlutterFragment$1: io.flutter.embedding.android.FlutterFragment this$0
kotlinx.coroutines.internal.ThreadSafeHeap: int _size
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription: int color
io.flutter.plugins.urllauncher.WebViewActivity$1: io.flutter.plugins.urllauncher.WebViewActivity this$0
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
io.flutter.plugins.imagepicker.ImagePickerPlugin: io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding pluginBinding
io.flutter.embedding.engine.loader.ResourceExtractor: java.lang.String mPackageName
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: java.lang.String encodedName
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_USE_TEST_FONTS
io.flutter.plugin.editing.ListenableEditingState: java.lang.String TAG
io.flutter.plugin.mouse.MouseCursorPlugin$1: io.flutter.plugin.mouse.MouseCursorPlugin this$0
io.flutter.plugins.webviewflutter.PigeonApiCookieManager: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
androidx.fragment.app.Fragment: boolean mCalled
io.flutter.embedding.engine.systemchannels.LocalizationChannel: java.lang.String TAG
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2 this$0
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setEncodedStringList$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: boolean isSigned
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: int id
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: android.content.ContentProvider contentProvider
io.flutter.plugin.common.StandardMessageCodec: byte FALSE
io.flutter.plugin.common.FlutterException: java.lang.String TAG
io.flutter.view.FlutterView: io.flutter.plugin.mouse.MouseCursorPlugin mMouseCursorPlugin
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NONE
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$SpeculativeLoadingStatus: int PRERENDER_ENABLED
io.flutter.embedding.engine.dart.DartExecutor: android.content.res.AssetManager assetManager
io.flutter.plugin.common.BasicMessageChannel: io.flutter.plugin.common.BinaryMessenger$TaskQueue taskQueue
io.flutter.plugin.editing.TextEditingDelta: int newSelectionStart
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type kRepeat
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_IMAGE
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_VERBOSE_LOGGING
io.flutter.plugin.platform.SingleViewPresentation: android.widget.FrameLayout container
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult$Builder: io.flutter.plugins.imagepicker.Messages$CacheRetrievalType type
io.flutter.app.FlutterActivity: io.flutter.app.FlutterActivityEvents eventDelegate
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object closeHandler
io.flutter.app.FlutterPluginRegistry: io.flutter.plugin.platform.PlatformViewsController mPlatformViewsController
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action CUSTOM_ACTION
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$dataStoreSetString$2: int label
io.flutter.view.AccessibilityBridge: int BOLD_TEXT_WEIGHT_ADJUSTMENT
io.flutter.plugins.sharedpreferences.StringListLookupResultType: io.flutter.plugins.sharedpreferences.StringListLookupResultType PLATFORM_ENCODED
io.flutter.view.VsyncWaiter$DisplayListener: android.hardware.display.DisplayManager displayManager
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState: android.app.Activity activity
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState: android.app.Application application
androidx.fragment.app.Fragment: int CREATED
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation completion
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewPaddingRight
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry: io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate shimRegistrarAggregate
io.flutter.embedding.engine.loader.ResourceExtractor: java.util.HashSet mResources
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType LOCALE
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: io.flutter.view.TextureRegistry$OnTrimMemoryListener trimMemoryListener
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder: java.lang.String initialRoute
io.flutter.plugins.sharedpreferences.StringListLookupResultType: io.flutter.plugins.sharedpreferences.StringListLookupResultType JSON_ENCODED
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.dart.DartExecutor dartExecutor
androidx.fragment.app.FragmentActivity: java.lang.String LIFECYCLE_TAG
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] $VALUES
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState: io.flutter.plugins.imagepicker.ImagePickerDelegate delegate
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1$1: androidx.datastore.preferences.core.Preferences$Key $boolKey
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1: java.lang.String $key
androidx.fragment.app.Fragment: int mContainerId
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _rootCause
io.flutter.embedding.engine.dart.DartExecutor$DartCallback: android.content.res.AssetManager androidAssetManager
kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object _prev
io.flutter.view.FlutterView$ViewportMetrics: int physicalViewInsetTop
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: java.lang.String pathToBundle
io.flutter.view.VsyncWaiter: io.flutter.view.VsyncWaiter$FrameCallback frameCallback
io.flutter.embedding.engine.renderer.FlutterRenderer: java.lang.String TAG
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1$1: int label
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean globalGeometryDirty
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type NO_TARGET
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState HIDDEN
io.flutter.plugin.editing.SpellCheckPlugin: io.flutter.plugin.common.MethodChannel$Result pendingResult
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean newFrameAvailable
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1: double $value
io.flutter.embedding.android.AndroidTouchProcessor: int IMPLICIT_VIEW_ID
io.flutter.plugins.imagepicker.ImagePickerDelegate: java.lang.Object pendingCallStateLock
io.flutter.plugin.platform.SingleViewPresentation: java.lang.String TAG
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String SHARED_PREFERENCE_MAX_HEIGHT_KEY
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness DARK
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long lastScheduleTime
io.flutter.embedding.engine.systemchannels.SpellCheckChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String IMPELLER_OPENGL_GPU_TRACING_DATA_KEY
io.flutter.embedding.android.FlutterSurfaceView: boolean renderTransparently
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature ON_OFF_SWITCH_LABELS
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String PUBLIC_AUTOMATICALLY_REGISTER_PLUGINS_METADATA_KEY
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: long minHostCreatedIdentifier
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int UP
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.plugin.common.BasicMessageChannel$MessageHandler parsingMessageHandler
io.flutter.app.FlutterPluginRegistry: java.util.List mWindowFocusChangedListeners
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$1: io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue this$0
io.flutter.embedding.android.KeyboardMap$PressingGoal: int mask
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugin.common.BinaryMessenger binaryMessenger
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$OnPreAttachedListener mSavedStateAttachListener
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodCallHandler
io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder: java.lang.String backgroundMode
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: double logicalLeft
androidx.core.app.ComponentActivity: androidx.collection.SimpleArrayMap extraDataMap
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2$1: java.lang.Object result
io.flutter.embedding.engine.dart.DartMessenger$BufferedMessageInfo: int replyId
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String DEFAULT_AOT_SHARED_LIBRARY_NAME
io.flutter.plugin.editing.TextInputPlugin: io.flutter.plugin.editing.TextInputPlugin$InputTarget inputTarget
io.flutter.view.AccessibilityBridge: java.util.Map flutterSemanticsTree
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry: io.flutter.embedding.engine.FlutterEngine flutterEngine
io.flutter.Build$API_LEVELS: int API_21
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi$Companion Companion
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: io.flutter.plugin.platform.WindowManagerHandler windowManagerHandler
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: boolean enableSuggestions
androidx.core.app.ComponentActivity: androidx.lifecycle.LifecycleRegistry lifecycleRegistry
io.flutter.embedding.engine.dart.DartMessenger: java.util.Map messageHandlers
io.flutter.view.AccessibilityBridge: boolean isReleased
androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistryController savedStateRegistryController
io.flutter.embedding.engine.systemchannels.TextInputChannel: java.lang.String TAG
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_APP_BUNDLE_PATH
kotlinx.coroutines.internal.Segment: int cleanedAndPointers
io.flutter.view.AccessibilityBridge$StringAttribute: io.flutter.view.AccessibilityBridge$StringAttributeType type
io.flutter.view.AccessibilityBridge: int ROOT_NODE_ID
io.flutter.plugins.imagepicker.ImagePickerDelegate$PendingCallState: io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions imageOptions
io.flutter.embedding.android.MotionEventTracker: io.flutter.embedding.android.MotionEventTracker INSTANCE
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1: int label
io.flutter.plugins.webviewflutter.PigeonApiWebResourceResponse: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getPrefs$1: java.lang.Object L$2
io.flutter.plugin.platform.SurfaceProducerPlatformViewRenderTarget: java.lang.String TAG
io.flutter.plugins.imagepicker.Messages$SourceType: io.flutter.plugins.imagepicker.Messages$SourceType[] $VALUES
io.flutter.plugins.sharedpreferences.StringListLookupResultType: io.flutter.plugins.sharedpreferences.StringListLookupResultType UNEXPECTED_STRING
io.flutter.embedding.engine.systemchannels.LifecycleChannel: java.lang.String CHANNEL_NAME
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_TRACE_SKIA
io.flutter.plugin.common.BasicMessageChannel: java.lang.String CHANNEL_BUFFERS_CHANNEL
io.flutter.embedding.engine.systemchannels.SettingsChannel: boolean $assertionsDisabled
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.LifecycleChannel lifecycleChannel
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView$1: android.view.View val$mutatorView
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode displayMode
io.flutter.embedding.android.FlutterTextureView: boolean isSurfaceAvailableForRendering
io.flutter.embedding.engine.FlutterJNI: float refreshRateFPS
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousTextSelectionBase
io.flutter.plugins.sharedpreferences.StringListResult: java.lang.String jsonEncodedValue
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String EXTRA_DESTROY_ENGINE_WITH_ACTIVITY
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager instanceManager
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: int bufferHeight
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewInsetLeft
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode TEXTURE_WITH_VIRTUAL_FALLBACK
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_OBSCURED
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewInsetTop
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_LEFT
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_ENABLED
io.flutter.plugin.common.JSONMethodCodec: io.flutter.plugin.common.JSONMethodCodec INSTANCE
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] $VALUES
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$AttributionBehavior: int WEB_SOURCE_AND_WEB_TRIGGER
io.flutter.embedding.android.FlutterView: android.view.textservice.TextServicesManager textServicesManager
io.flutter.embedding.engine.dart.DartMessenger$Reply: java.util.concurrent.atomic.AtomicBoolean done
androidx.fragment.app.Fragment: boolean mDeferStart
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String MAP_KEY_IMAGE_QUALITY
io.flutter.view.AccessibilityBridge: float SCROLL_POSITION_CAP_FOR_INFINITY
io.flutter.plugins.imagepicker.ImagePickerDelegate: int REQUEST_CAMERA_IMAGE_PERMISSION
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: java.util.WeakHashMap identifiers
io.flutter.plugins.imagepicker.ImagePickerCache$1: int[] $SwitchMap$io$flutter$plugins$imagepicker$ImagePickerCache$CacheType
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration[] fields
io.flutter.plugins.sharedpreferences.SharedPreferencesPluginKt: java.lang.String JSON_LIST_PREFIX
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1: int label
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: io.flutter.embedding.engine.renderer.SurfaceTextureWrapper textureWrapper
io.flutter.embedding.engine.systemchannels.SettingsChannel: java.lang.String TAG
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object receiveSegment
io.flutter.embedding.android.WindowInfoRepositoryCallbackAdapterWrapper: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter adapter
io.flutter.plugins.webviewflutter.FileChooserMode: int raw
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$DelegateFactory delegateFactory
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_DART_FLAGS
io.flutter.plugin.editing.TextInputPlugin: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback imeSyncCallback
io.flutter.embedding.android.KeyData: java.lang.String TAG
androidx.appcompat.widget.Toolbar$SavedState: android.os.Parcelable$Creator CREATOR
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1$1: java.util.List $allowList
io.flutter.plugin.platform.PlatformViewWrapper: int prevTop
io.flutter.view.FlutterView$ViewportMetrics: int physicalViewInsetBottom
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides[] $VALUES
io.flutter.view.AccessibilityBridge$SemanticsNode: float[] inverseTransform
io.flutter.plugin.platform.PlatformPlugin$3: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2: androidx.datastore.preferences.core.Preferences$Key $preferencesKey$inlined
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding pluginBinding
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$SentConfiguration: android.util.DisplayMetrics displayMetrics
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState: io.flutter.plugins.imagepicker.ImagePickerPlugin this$0
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix finalMatrix
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_UP
kotlinx.coroutines.internal.ResizableAtomicArray: java.util.concurrent.atomic.AtomicReferenceArray array
kotlinx.coroutines.EventLoopImplBase$DelayedTask: java.lang.Object _heap
io.flutter.embedding.android.KeyChannelResponder: io.flutter.embedding.android.KeyboardManager$CharacterCombiner characterCombiner
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String label
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding servicePluginBinding
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1: int label
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: float yPrecision
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness light
androidx.fragment.app.FragmentActivity: androidx.fragment.app.FragmentController mFragments
androidx.fragment.app.Fragment: java.lang.String mPreviousWho
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: io.flutter.plugins.sharedpreferences.SharedPreferencesListEncoder listEncoder
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: io.flutter.embedding.engine.systemchannels.DeferredComponentChannel channel
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions$Builder: java.lang.Long maxDurationSeconds
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SystemChannel systemChannel
androidx.fragment.app.Fragment: android.view.View mView
io.flutter.app.FlutterPluginRegistry: java.util.List mRequestPermissionsResultListeners
io.flutter.plugin.platform.PlatformPlugin$2: io.flutter.plugin.platform.PlatformPlugin this$0
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: boolean obscureText
io.flutter.embedding.engine.systemchannels.ProcessTextChannel$1: io.flutter.embedding.engine.systemchannels.ProcessTextChannel this$0
io.flutter.embedding.engine.loader.FlutterLoader$InitResult: java.lang.String appStoragePath
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackLibraryPath
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_CACHE_SKSL
io.flutter.plugin.platform.PlatformViewsController: java.lang.Class[] VIEW_TYPES_REQUIRE_VIRTUAL_DISPLAY
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1$1: double $value
io.flutter.embedding.android.FlutterTextureView: java.lang.String TAG
io.flutter.embedding.android.FlutterSurfaceView$2: io.flutter.embedding.android.FlutterSurfaceView this$0
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: java.lang.String initialRoute
io.flutter.embedding.engine.FlutterShellArgs: java.util.Set args
io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder: java.lang.String backgroundMode
io.flutter.plugins.webviewflutter.PigeonApiWebStorage: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long id
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.SystemChannel systemChannel
io.flutter.view.FlutterView$ViewportMetrics: int physicalHeight
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getKeys$prefs$1: int label
io.flutter.plugins.imagepicker.ImagePickerPlugin: io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState activityState
io.flutter.plugins.webviewflutter.WebViewPoint: long x
io.flutter.plugin.editing.InputConnectionAdaptor: android.text.Layout mLayout
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: float screenDensity
io.flutter.embedding.engine.loader.ResourceExtractor: java.lang.String[] SUPPORTED_ABIS
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_TRACE_SKIA_ALLOWLIST
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature HIGH_CONTRAST
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: java.lang.Integer systemNavigationBarDividerColor
io.flutter.plugins.imagepicker.Messages$FlutterError: java.lang.Object details
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Listener listeners
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] $VALUES
androidx.activity.ComponentActivity: java.util.concurrent.CopyOnWriteArrayList onPictureInPictureModeChangedListeners
io.flutter.plugin.platform.PlatformViewsController: int nextOverlayLayerId
io.flutter.plugin.localization.LocalizationPlugin: android.content.Context context
io.flutter.embedding.engine.renderer.FlutterRenderer$2: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
androidx.fragment.app.Fragment: int mState
io.flutter.plugins.sharedpreferences.SharedPreferencesPluginKt: java.lang.String SHARED_PREFERENCES_NAME
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean attached
io.flutter.plugins.imagepicker.Messages$GeneralOptions$Builder: java.lang.Long limit
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String vmSnapshotData
io.flutter.plugin.editing.TextEditingDelta: java.lang.CharSequence oldText
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: androidx.lifecycle.ProcessLifecycleOwner this$0
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_ENABLE_DART_PROFILING
io.flutter.plugin.platform.PlatformPlugin: android.app.Activity activity
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int ADD
io.flutter.view.AccessibilityBridge$SemanticsNode: int actions
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityPluginBinding
io.flutter.plugins.sharedpreferences.SharedPreferencesError: java.lang.String message
io.flutter.plugins.imagepicker.ImagePickerDelegate$PendingCallState: io.flutter.plugins.imagepicker.Messages$Result result
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel
io.flutter.view.FlutterView$3: io.flutter.view.FlutterView this$0
io.flutter.view.AccessibilityBridge: int previousRouteId
io.flutter.embedding.engine.systemchannels.MouseCursorChannel$1: io.flutter.embedding.engine.systemchannels.MouseCursorChannel this$0
androidx.activity.ComponentActivity: java.util.concurrent.CopyOnWriteArrayList onConfigurationChangedListeners
io.flutter.embedding.engine.renderer.FlutterRenderer: java.util.concurrent.atomic.AtomicLong nextTextureId
io.flutter.plugin.common.ErrorLogResult: int level
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager mChildFragmentManager
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag NAMES_ROUTE
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder$Callback: io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder this$1
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: boolean returnValueForShouldOverrideUrlLoading
io.flutter.plugins.imagepicker.ImagePickerDelegate: int REQUEST_CODE_CHOOSE_MULTI_IMAGE_FROM_GALLERY
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: java.util.Map plugins
io.flutter.plugin.editing.ListenableEditingState: java.lang.String mToStringCache
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: boolean shouldAutomaticallyHandleOnBackPressed
androidx.recyclerview.widget.LinearLayoutManager$SavedState: android.os.Parcelable$Creator CREATOR
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$0
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.plugins.imagepicker.ImagePickerDelegate: int REQUEST_CODE_TAKE_VIDEO_WITH_CAMERA
androidx.datastore.preferences.PreferencesProto$StringSet: int STRINGS_FIELD_NUMBER
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1: java.lang.String $key
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: int prevTop
io.flutter.embedding.android.FlutterFragment: androidx.activity.OnBackPressedCallback onBackPressedCallback
androidx.core.content.FileProvider: java.lang.String TAG_EXTERNAL_MEDIA
io.flutter.view.AccessibilityBridge$Action: int value
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: int bufferHeight
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization NONE
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_DESTROY_ENGINE_WITH_FRAGMENT
androidx.fragment.app.Fragment: int INITIALIZING
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError: java.lang.String message
androidx.core.content.FileProvider: java.io.File DEVICE_ROOT
org.chromium.support_lib_boundary.WebMessagePayloadBoundaryInterface$WebMessagePayloadType: int TYPE_ARRAY_BUFFER
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState UNKNOWN
io.flutter.embedding.engine.renderer.FlutterRenderer: boolean isDisplayingFlutterUi
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1: androidx.datastore.preferences.core.Preferences$Key $preferencesKey$inlined
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String ISOLATE_SNAPSHOT_DATA_KEY
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_WORD
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView$1: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView this$0
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: java.lang.String dartLibraryUri
io.flutter.plugins.sharedpreferences.Messages$PigeonCodec: io.flutter.plugins.sharedpreferences.Messages$PigeonCodec INSTANCE
io.flutter.embedding.engine.FlutterEngine$1: io.flutter.embedding.engine.FlutterEngine this$0
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState: io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityBinding
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_SKIA_DETERMINISTIC_RENDERING
io.flutter.embedding.engine.dart.PlatformTaskQueue: android.os.Handler handler
io.flutter.plugins.webviewflutter.FileChooserMode: io.flutter.plugins.webviewflutter.FileChooserMode SAVE
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: boolean enableIMEPersonalizedLearning
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: java.lang.Integer statusBarColor
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.editing.TextInputPlugin textInputPlugin
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SET_TEXT
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String identifier
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType type
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder: int unrepliedCount
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: java.util.List dartEntrypointArgs
io.flutter.plugin.common.BasicMessageChannel: io.flutter.plugin.common.MessageCodec codec
io.flutter.plugins.urllauncher.WebViewActivity$2: io.flutter.plugins.urllauncher.WebViewActivity this$0
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int height
androidx.fragment.app.Fragment: java.lang.Boolean mSavedUserVisibleHint
io.flutter.FlutterInjector$Builder$NamedThreadFactory: int threadId
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.DeferredComponentChannel deferredComponentChannel
androidx.datastore.preferences.PreferencesProto$Value: int bitField0_
io.flutter.plugin.editing.TextEditingDelta: int deltaEnd
androidx.fragment.app.FragmentActivity: boolean mCreated
io.flutter.embedding.engine.FlutterEngineCache: io.flutter.embedding.engine.FlutterEngineCache instance
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_SHOULD_AUTOMATICALLY_HANDLE_ON_BACK_PRESSED
io.flutter.embedding.engine.renderer.FlutterRenderer$TextureFinalizerRunnable: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2$1: java.lang.Object L$0
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: java.lang.String FRAMEWORK_RESTORATION_BUNDLE_KEY
io.flutter.plugin.editing.TextInputPlugin$2: boolean val$isAffine
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setString$1: java.lang.String $key
io.flutter.plugin.platform.PlatformViewsController: android.util.SparseArray viewWrappers
io.flutter.app.FlutterActivityDelegate: android.view.WindowManager$LayoutParams matchParent
io.flutter.Build$API_LEVELS: int API_26
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getPrefs$1: java.lang.Object L$4
io.flutter.plugin.common.BasicMessageChannel: java.lang.String name
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SET_SELECTION
io.flutter.embedding.android.MotionEventTracker: android.util.LongSparseArray eventById
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: boolean handleDeeplinking
io.flutter.embedding.engine.dart.DartMessenger$HandlerInfo: io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler handler
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int width
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_SHOULD_ATTACH_ENGINE_TO_ACTIVITY
io.flutter.embedding.android.KeyboardMap: java.util.HashMap keyCodeToLogical
io.flutter.plugin.editing.TextInputPlugin$InputTarget: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type type
io.flutter.plugins.imagepicker.Messages$SourceSpecification: io.flutter.plugins.imagepicker.Messages$SourceType type
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions$Companion Companion
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String LEAK_VM_META_DATA_KEY
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int action
io.flutter.view.AccessibilityBridge$SemanticsNode: float scrollExtentMin
io.flutter.plugins.webviewflutter.ResultCompat: boolean isFailure
androidx.fragment.app.Fragment: boolean mAdded
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] $VALUES
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: java.util.Set onSaveInstanceStateListeners
androidx.fragment.app.Fragment: androidx.lifecycle.LifecycleRegistry mLifecycleRegistry
io.flutter.plugin.platform.SingleViewPresentation: android.content.Context outerContext
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Waiter waiters
io.flutter.embedding.engine.systemchannels.BackGestureChannel$1: io.flutter.embedding.engine.systemchannels.BackGestureChannel this$0
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: java.lang.String appBundlePath
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$SentConfiguration: int nextConfigGeneration
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_FLUTTER_INITIALIZATION_ARGS
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_PURGE_PERSISTENT_CACHE
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_ENDLESS_TRACE_BUFFER
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue: java.util.concurrent.ConcurrentLinkedQueue sentQueue
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode lastInputFocusedSemanticsNode
io.flutter.embedding.engine.systemchannels.TextInputChannel$1: io.flutter.embedding.engine.systemchannels.TextInputChannel this$0
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature REDUCE_MOTION
io.flutter.plugin.platform.PlatformViewWrapper$1: io.flutter.plugin.platform.PlatformViewWrapper this$0
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List mutators
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType DATETIME
androidx.fragment.app.Fragment: int ATTACHED
io.flutter.plugin.editing.FlutterTextUtils: int CANCEL_TAG
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: java.nio.ByteBuffer params
io.flutter.embedding.engine.dart.DartMessenger$BufferedMessageInfo: java.nio.ByteBuffer message
androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelProvider$Factory mDefaultFactory
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2$1: java.lang.Object L$0
io.flutter.plugin.editing.TextInputPlugin: boolean mRestartInputPending
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: io.flutter.view.TextureRegistry$OnFrameConsumedListener frameConsumedListener
io.flutter.plugins.imagepicker.ImagePickerDelegate$MediaPath: java.lang.String mimeType
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: java.util.HashMap weakInstances
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_ENABLE_VULKAN_VALIDATION
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String VM_SNAPSHOT_DATA_KEY
io.flutter.plugins.imagepicker.ImagePickerDelegate: java.lang.String fileProviderName
io.flutter.embedding.engine.systemchannels.ProcessTextChannel: java.lang.String METHOD_QUERY_TEXT_ACTIONS
kotlinx.coroutines.sync.SemaphoreImpl: long deqIdx
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler: io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler$Companion Companion
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.CursorAnchorInfo$Builder mCursorAnchorInfoBuilder
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: boolean ignoringFence
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2$1: int label
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action FOCUS
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.MouseCursorChannel mouseCursorChannel
androidx.fragment.app.Fragment: boolean mMenuVisible
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage lastDequeuedImage
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder: java.lang.String cachedEngineGroupId
androidx.activity.ComponentActivity: java.util.concurrent.CopyOnWriteArrayList onUserLeaveHintListeners
io.flutter.embedding.android.AndroidTouchProcessor: java.lang.String TAG
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method getChildId
io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder: java.lang.Class activityClass
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewFakeWindowViewGroup fakeWindowViewGroup
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_EXPANDED
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeature: android.graphics.Rect bounds
io.flutter.plugins.sharedpreferences.SharedPreferencesPluginKt: java.lang.String TAG
io.flutter.embedding.engine.loader.FlutterLoader$1: android.content.Context val$appContext
io.flutter.app.FlutterActivity: io.flutter.view.FlutterView$Provider viewProvider
io.flutter.embedding.android.KeyData: int BYTES_PER_FIELD
io.flutter.plugins.imagepicker.Messages$SourceSpecification: io.flutter.plugins.imagepicker.Messages$SourceCamera camera
io.flutter.view.FlutterView$ViewportMetrics: int systemGestureInsetRight
io.flutter.plugins.urllauncher.UrlLauncherPlugin: io.flutter.plugins.urllauncher.UrlLauncher urlLauncher
io.flutter.view.AccessibilityBridge$StringAttribute: int end
io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder: java.lang.Class activityClass
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest: double newLogicalWidth
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient currentWebChromeClient
io.flutter.plugins.webviewflutter.FileChooserMode: io.flutter.plugins.webviewflutter.FileChooserMode[] $VALUES
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String hint
io.flutter.view.AccessibilityBridge: int systemAction
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.util.ArrayDeque imageReaderQueue
io.flutter.embedding.engine.FlutterJNI: java.util.Set engineLifecycleListeners
io.flutter.view.FlutterView: io.flutter.view.FlutterView$ViewportMetrics mMetrics
io.flutter.embedding.android.AndroidTouchProcessor: int BYTES_PER_FIELD
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1: java.lang.String $key
io.flutter.embedding.android.MotionEventTracker: java.util.PriorityQueue unusedEvents
io.flutter.embedding.engine.systemchannels.SettingsChannel: java.lang.String BRIEFLY_SHOW_PASSWORD
io.flutter.view.FlutterView: java.lang.String TAG
androidx.core.content.FileProvider: java.lang.String TAG_ROOT_PATH
io.flutter.view.AccessibilityBridge: android.view.View rootAccessibilityView
io.flutter.embedding.android.KeyEmbedderResponder: java.lang.String TAG
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler
io.flutter.FlutterInjector: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode[] $VALUES
io.flutter.embedding.engine.dart.DartExecutor$DartCallback: io.flutter.view.FlutterCallbackInformation callbackHandle
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: boolean released
io.flutter.plugin.common.MethodChannel: io.flutter.plugin.common.BinaryMessenger messenger
io.flutter.plugin.platform.AccessibilityEventsDelegate: io.flutter.view.AccessibilityBridge accessibilityBridge
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener touchExplorationStateChangeListener
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment mTarget
androidx.core.content.FileProvider: java.util.HashMap sCache
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: java.lang.String TAG
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1: kotlin.jvm.internal.Ref$ObjectRef $value
androidx.activity.ComponentActivity: kotlin.Lazy onBackPressedDispatcher$delegate
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$AttributionBehavior: int APP_SOURCE_AND_WEB_TRIGGER
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType kJoystick
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action DID_LOSE_ACCESSIBILITY_FOCUS
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: android.content.Context context
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: java.util.Set shimRegistrars
io.flutter.plugins.webviewflutter.WebViewFlutterPlugin: io.flutter.plugins.webviewflutter.ProxyApiRegistrar proxyApiRegistrar
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType SELECTION_CLICK
androidx.fragment.app.Fragment: boolean mIsCreated
io.flutter.app.FlutterActivityDelegate: android.view.View launchView
io.flutter.Build$API_LEVELS: int API_22
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.InputMethodManager mImm
io.flutter.plugin.common.StandardMessageCodec: byte NULL
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.KeyboardManager keyboardManager
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: int requestedBufferHeight
io.flutter.plugins.imagepicker.Messages$SourceType: io.flutter.plugins.imagepicker.Messages$SourceType GALLERY
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions$Builder: io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions imageSelectionOptions
io.flutter.embedding.android.FlutterImageView: android.graphics.Bitmap currentBitmap
io.flutter.embedding.android.KeyboardManager: java.util.HashSet redispatchedEvents
io.flutter.plugin.platform.PlatformViewWrapper: int left
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions$Builder: java.lang.Double maxHeight
kotlinx.coroutines.android.HandlerDispatcherKt: android.view.Choreographer choreographer
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_RIGHT
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.Object _preHandler
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1: java.lang.String $key
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1$1: long $value
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType HINGE
io.flutter.embedding.android.FlutterFragmentActivity: java.lang.String TAG_FLUTTER_FRAGMENT
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String TAG
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: java.lang.Boolean systemNavigationBarContrastEnforced
io.flutter.embedding.engine.dart.DartMessenger: java.lang.Object handlersLock
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String EXTRA_DART_ENTRYPOINT_ARGS
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: io.flutter.plugins.webviewflutter.ConsoleMessageLevel TIP
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String aotSharedLibraryName
io.flutter.plugin.editing.TextInputPlugin$1: io.flutter.plugin.editing.TextInputPlugin this$0
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: java.util.concurrent.atomic.AtomicBoolean hasEnded
io.flutter.Build$API_LEVELS: int API_27
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler platformMessageHandler
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState INACTIVE
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind: int TOUCH
kotlinx.coroutines.DefaultExecutor: int debugStatus
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError$Builder: java.lang.String code
io.flutter.plugin.platform.SingleViewWindowManager: io.flutter.plugin.platform.SingleViewFakeWindowViewGroup fakeWindowRootView
androidx.fragment.app.Fragment: android.os.Bundle mSavedViewRegistryState
io.flutter.plugins.imagepicker.ImageResizer: android.content.Context context
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets lastWindowInsets
io.flutter.view.VsyncWaiter: io.flutter.embedding.engine.FlutterJNI flutterJNI
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext _immediate
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.view.FlutterView$ViewportMetrics: int systemGestureInsetTop
kotlin.coroutines.jvm.internal.SuspendLambda: int arity
io.flutter.embedding.android.KeyboardMap: long kUnicodePlane
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setString$1: int label
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: android.os.Handler onImageAvailableHandler
io.flutter.plugin.platform.PlatformViewsController: android.util.SparseArray platformViewParent
io.flutter.embedding.engine.dart.DartExecutor: java.lang.String TAG
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type kDown
io.flutter.view.FlutterView: io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor
io.flutter.plugins.webviewflutter.ResultCompat: boolean isSuccess
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1$1: androidx.datastore.preferences.core.Preferences$Key $intKey
androidx.versionedparcelable.ParcelImpl: android.os.Parcelable$Creator CREATOR
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager$PigeonFinalizationListener finalizationListener
io.flutter.embedding.engine.renderer.FlutterRenderer: java.util.Set onTrimMemoryListeners
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding: java.util.Set onModeChangeListeners
androidx.datastore.preferences.protobuf.GeneratedMessageLite: int UNINITIALIZED_HASH_CODE
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewBufferSize: int height
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: io.flutter.plugin.common.BasicMessageChannel this$0
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List valueAttributes
io.flutter.embedding.engine.systemchannels.NavigationChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler defaultHandler
io.flutter.view.AccessibilityBridge$SemanticsNode: int flags
io.flutter.plugin.common.BinaryCodec: io.flutter.plugin.common.BinaryCodec INSTANCE
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$ForceDarkBehavior: int FORCE_DARK_ONLY
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type PHYSICAL_DISPLAY_PLATFORM_VIEW
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: java.lang.Thread thread
io.flutter.embedding.android.FlutterActivity: boolean hasRegisteredBackCallback
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType SPELLOUT
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: java.lang.String text
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: boolean shouldAttachEngineToActivity
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind background
androidx.fragment.app.FragmentActivity: androidx.lifecycle.LifecycleRegistry mFragmentLifecycleRegistry
io.flutter.plugin.common.BasicMessageChannel: java.lang.String TAG
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1: long $value
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.engine.FlutterShellArgs shellArgs
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel
io.flutter.plugin.common.MethodChannel: java.lang.String TAG
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String DEFAULT_FLUTTER_ASSETS_DIR
io.flutter.view.FlutterNativeView: java.lang.String TAG
androidx.fragment.app.Fragment: boolean mRetainInstance
androidx.datastore.preferences.PreferencesProto$PreferenceMap: androidx.datastore.preferences.protobuf.MapFieldLite preferences_
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setString$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.plugins.webviewflutter.ResultCompat: java.lang.Object result
io.flutter.embedding.engine.systemchannels.SpellCheckChannel$1: io.flutter.embedding.engine.systemchannels.SpellCheckChannel this$0
io.flutter.embedding.android.FlutterActivity: android.window.OnBackInvokedCallback onBackInvokedCallback
io.flutter.plugin.common.JSONMessageCodec: io.flutter.plugin.common.JSONMessageCodec INSTANCE
androidx.lifecycle.ReportFragment$LifecycleCallbacks: androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion Companion
kotlinx.coroutines.internal.AtomicOp: java.lang.Object _consensus
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: java.lang.String encodedName
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int physicalTouchSlop
io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder: java.lang.String backgroundMode
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_LINK
androidx.fragment.app.Fragment: int ACTIVITY_CREATED
io.flutter.plugins.imagepicker.Messages$SourceSpecification$Builder: io.flutter.plugins.imagepicker.Messages$SourceCamera camera
io.flutter.view.AccessibilityViewEmbedder: java.util.Map embeddedViewToDisplayBounds
io.flutter.embedding.android.KeyEmbedderResponder: io.flutter.embedding.android.KeyboardManager$CharacterCombiner characterCombiner
io.flutter.view.AccessibilityBridge: java.util.Map customAccessibilityActions
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int systemGestureInsetLeft
io.flutter.view.AccessibilityBridge$SemanticsNode: int scrollChildren
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1: androidx.datastore.preferences.core.Preferences$Key $key$inlined
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2$1: java.lang.Object result
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method getRecordSourceNodeId
io.flutter.plugin.text.ProcessTextPlugin: java.util.Map resolveInfosById
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _state
androidx.datastore.preferences.PreferencesProto$StringSet: androidx.datastore.preferences.PreferencesProto$StringSet DEFAULT_INSTANCE
io.flutter.embedding.engine.systemchannels.PlatformChannel$2: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay
io.flutter.embedding.engine.dart.DartExecutor$DartCallback: java.lang.String pathToBundle
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action TAP
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType[] $VALUES
io.flutter.Build$API_LEVELS: int API_31
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag HAS_TOGGLED_STATE
io.flutter.plugins.imagepicker.Messages$CacheRetrievalType: int index
io.flutter.app.FlutterPluginRegistry: java.lang.String TAG
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: java.lang.String TAG
io.flutter.embedding.android.MotionEventTracker$MotionEventId: long id
io.flutter.plugin.editing.ListenableEditingState: java.util.ArrayList mPendingListeners
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager mFragmentManager
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel$1: io.flutter.embedding.engine.systemchannels.DeferredComponentChannel this$0
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_PURGE_PERSISTENT_CACHE
io.flutter.Build$API_LEVELS: int API_28
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.BinaryMessenger$TaskQueue taskQueue
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getPrefs$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.view.FlutterView$ViewportMetrics: int physicalViewPaddingLeft
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler handler
io.flutter.plugin.editing.FlutterTextUtils: int LINE_FEED
androidx.core.content.FileProvider: java.lang.String[] COLUMNS
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewInsetBottom
io.flutter.embedding.engine.renderer.FlutterRenderer: java.util.List imageReaderProducers
io.flutter.view.FlutterView: boolean mIsSoftwareRenderingEnabled
io.flutter.view.AccessibilityBridge: int MIN_ENGINE_GENERATED_NODE_ID
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType TRANSFORM
io.flutter.embedding.engine.systemchannels.RestorationChannel: boolean waitForRestorationData
io.flutter.plugin.editing.ListenableEditingState: android.view.inputmethod.BaseInputConnection mDummyConnection
io.flutter.plugin.platform.PlatformViewsController: java.lang.String TAG
io.flutter.plugin.platform.SingleViewWindowManager: java.lang.String TAG
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$AttributionBehavior: int APP_SOURCE_AND_APP_TRIGGER
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription: java.lang.String label
androidx.fragment.app.Fragment: java.lang.String mTag
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String OLD_GEN_HEAP_SIZE_META_DATA_KEY
io.flutter.plugin.common.StandardMessageCodec: byte TRUE
io.flutter.embedding.engine.dart.DartMessenger$SerialTaskQueue: java.util.concurrent.ConcurrentLinkedQueue queue
io.flutter.plugin.common.StandardMessageCodec: byte MAP
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: boolean enableDeltaModel
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: java.lang.String tag
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder: io.flutter.embedding.android.KeyboardManager this$0
androidx.customview.view.AbsSavedState: android.os.Parcelable$Creator CREATOR
io.flutter.view.AccessibilityBridge: android.content.ContentResolver contentResolver
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_DISABLE_SERVICE_AUTH_CODES
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion Companion
io.flutter.plugins.imagepicker.Messages$GeneralOptions: java.lang.Boolean allowMultiple
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler channelHandler
androidx.fragment.app.Fragment: android.os.Bundle mSavedFragmentState
io.flutter.plugins.imagepicker.Messages$GeneralOptions: java.lang.Long limit
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: boolean autocorrect
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding: io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference hiddenLifecycleReference
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1: io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener this$0
io.flutter.plugin.platform.PlatformViewRegistryImpl: java.util.Map viewFactories
androidx.fragment.app.Fragment: android.view.ViewGroup mContainer
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack mutatorsStack
io.flutter.embedding.engine.FlutterEngineGroup$Options: io.flutter.plugin.platform.PlatformViewsController platformViewsController
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: boolean ignoreCallsToDart
io.flutter.embedding.engine.systemchannels.SpellCheckChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler
io.flutter.FlutterInjector: io.flutter.embedding.engine.FlutterJNI$Factory flutterJniFactory
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: android.graphics.Path path
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_LIVE_REGION
io.flutter.embedding.android.AndroidTouchProcessor: int DEFAULT_VERTICAL_SCROLL_FACTOR
io.flutter.plugin.common.BinaryCodec: boolean returnsDirectByteBufferFromDecoding
androidx.fragment.app.Fragment: android.os.Handler mPostponedHandler
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization SENTENCES
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$WebauthnSupport: int NONE
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType HEAVY_IMPACT
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError: java.lang.String code
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setEncodedStringList$1: java.lang.String $key
androidx.activity.ComponentActivity: androidx.activity.ComponentActivity$Companion Companion
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.renderer.RenderSurface renderSurface
io.flutter.view.FlutterView$2: io.flutter.view.FlutterView this$0
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] $VALUES
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean inverseTransformDirty
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.android.FlutterView flutterView
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: java.lang.String encodedName
io.flutter.plugin.editing.TextInputPlugin: boolean isInputConnectionLocked
androidx.fragment.app.FragmentManager$LaunchedFragmentInfo: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry: java.lang.String TAG
io.flutter.plugin.platform.VirtualDisplayController$2$1: io.flutter.plugin.platform.VirtualDisplayController$2 this$1
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: io.flutter.plugins.webviewflutter.ConsoleMessageLevel DEBUG
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: java.lang.String TAG
io.flutter.embedding.engine.dart.DartMessenger$SerialTaskQueue: java.util.concurrent.atomic.AtomicBoolean isRunning
io.flutter.embedding.android.KeyChannelResponder: io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$WebViewMediaIntegrityApiStatus: int ENABLED
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode transparent
io.flutter.embedding.android.AndroidTouchProcessor: java.util.Map ongoingPans
io.flutter.embedding.engine.loader.ResourceExtractor: java.lang.String TAG
io.flutter.view.FlutterView: io.flutter.view.FlutterNativeView mNativeView
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.LifecycleChannel lifecycleChannel
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$1: io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$SentConfiguration val$configurationToRemove
io.flutter.embedding.engine.systemchannels.LifecycleChannel: java.lang.String TAG
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness statusBarIconBrightness
io.flutter.embedding.engine.FlutterEngineGroup$Options: android.content.Context context
androidx.fragment.app.Fragment: boolean mRestored
io.flutter.embedding.android.FlutterView: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
io.flutter.embedding.android.KeyChannelResponder: java.lang.String TAG
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SpellCheckChannel spellCheckChannel
io.flutter.view.AccessibilityBridge$SemanticsNode: float[] globalTransform
io.flutter.plugin.editing.ListenableEditingState: java.util.ArrayList mBatchTextEditingDeltas
io.flutter.plugins.webviewflutter.FlutterAssetManager: android.content.res.AssetManager assetManager
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1: androidx.datastore.preferences.core.Preferences$Key $preferencesKey$inlined
io.flutter.plugin.editing.ListenableEditingState: int mComposingStartWhenBeginBatchEdit
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow
androidx.fragment.app.Fragment: boolean mFromLayout
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int pointerCount
io.flutter.plugins.sharedpreferences.SharedPreferencesError: java.lang.String code
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_CHECKED
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: java.lang.String TAG
io.flutter.plugin.editing.FlutterTextUtils: int ZERO_WIDTH_JOINER
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder: java.lang.String initialRoute
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle lifecycle
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.lang.Object lock
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] $VALUES
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] $VALUES
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_TRACE_TO_FILE
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: boolean released
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_DART_FLAGS
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference hiddenLifecycleReference
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_HANDLE_DEEPLINKING
io.flutter.view.AccessibilityBridge$LocaleStringAttribute: java.lang.String locale
io.flutter.plugins.webviewflutter.PigeonApiConsoleMessage: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge accessibilityBridge
io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice: io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice[] $VALUES
androidx.datastore.preferences.protobuf.AbstractMessageLite: int memoizedHashCode
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: java.lang.String hintText
io.flutter.plugins.imagepicker.R$xml: int flutter_image_picker_file_paths
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides RIGHT
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState[] $VALUES
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host host
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.android.FlutterImageView$SurfaceKind kind
io.flutter.plugins.imagepicker.ImagePickerDelegate$1: android.app.Activity val$activity
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType[] $VALUES
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: int encodedValue
io.flutter.view.AccessibilityBridge: java.lang.Integer lastLeftFrameInset
kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object bufferEndSegment
io.flutter.embedding.engine.FlutterJNI: java.lang.String vmServiceUri
io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder: java.lang.String cachedEngineId
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String PUBLIC_VM_SNAPSHOT_DATA_KEY
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object sendSegment
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: long id
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int PAN_ZOOM_START
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_FOCUSABLE
io.flutter.embedding.engine.FlutterEngine: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel this$0
io.flutter.plugin.editing.InputConnectionAdaptor: io.flutter.plugin.editing.ListenableEditingState mEditable
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int CANCEL
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: java.lang.String TAG
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hadPreviousConfig
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int requestedWidth
io.flutter.plugin.platform.PlatformPlugin$3: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$HapticFeedbackType
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setEncodedStringList$1: int label
androidx.appcompat.widget.SearchView$SavedState: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: int direction
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_VM_SERVICE_PORT
io.flutter.embedding.android.KeyboardMap: long kAndroidPlane
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder: java.lang.Class activityClass
io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder: boolean destroyEngineWithActivity
io.flutter.plugins.webviewflutter.FlutterAssetManager$PluginBindingFlutterAssetManager: io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets flutterAssets
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1: java.lang.String $key
io.flutter.plugin.platform.PlatformViewWrapper: android.view.ViewTreeObserver$OnGlobalFocusChangeListener activeFocusListener
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: int top
io.flutter.plugin.platform.VirtualDisplayController: java.lang.String TAG
androidx.datastore.preferences.PreferencesProto$Value: int LONG_FIELD_NUMBER
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType EMAIL_ADDRESS
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.WindowManagerHandler windowManagerHandler
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.String TAG
androidx.fragment.app.Fragment: boolean mTransitioning
io.flutter.plugin.platform.SingleViewPresentation$ImmContext: android.view.inputmethod.InputMethodManager inputMethodManager
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String decreasedValue
io.flutter.plugin.common.MethodChannel$IncomingResultHandler: io.flutter.plugin.common.MethodChannel$Result callback
io.flutter.embedding.android.FlutterFragment: int FLUTTER_VIEW_ID
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler: long NON_TEXTURE_FALLBACK
io.flutter.plugins.webviewflutter.PigeonApiWebViewPoint: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDeprecatedStringList$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.plugins.imagepicker.ImagePickerDelegate: int REQUEST_CODE_CHOOSE_VIDEO_FROM_GALLERY
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE
io.flutter.plugins.urllauncher.WebViewActivity: android.content.BroadcastReceiver broadcastReceiver
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: android.content.Context context
io.flutter.view.FlutterNativeView: io.flutter.view.FlutterView mFlutterView
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: android.graphics.SurfaceTexture surfaceTexture
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType OPACITY
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: int selectionEnd
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: io.flutter.plugin.common.BasicMessageChannel this$0
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterSurfaceView flutterSurfaceView
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1: int label
io.flutter.plugin.common.StandardMessageCodec: byte INT
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: java.lang.Double maxHeight
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient$Companion Companion
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1: io.flutter.embedding.engine.systemchannels.AccessibilityChannel this$0
androidx.fragment.app.Fragment: boolean mHasMenu
io.flutter.view.AccessibilityBridge$SemanticsNode: int id
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides[] $VALUES
io.flutter.plugin.platform.VirtualDisplayController: io.flutter.plugin.platform.PlatformViewRenderTarget renderTarget
io.flutter.embedding.engine.dart.DartExecutor: java.lang.String isolateServiceId
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousNodeId
io.flutter.embedding.engine.dart.DartMessenger$Reply: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: android.graphics.Rect rect
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean animating
io.flutter.embedding.engine.dart.DartMessenger: java.util.Map bufferedMessages
io.flutter.plugins.urllauncher.WebViewActivity: java.lang.String URL_EXTRA
io.flutter.plugin.platform.PlatformPlugin: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle currentTheme
io.flutter.plugins.urllauncher.BuildConfig: boolean DEBUG
io.flutter.plugins.imagepicker.Messages$SourceCamera: int index
io.flutter.plugin.platform.PlatformPlugin$2: android.view.View val$decorView
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: io.flutter.plugins.imagepicker.Messages$CacheRetrievalError error
io.flutter.plugin.editing.FlutterTextUtils: int CARRIAGE_RETURN
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2 this$0
io.flutter.plugin.platform.PlatformViewsController: boolean synchronizeToNativeViewHierarchy
io.flutter.plugins.urllauncher.WebViewActivity: java.lang.String ENABLE_DOM_EXTRA
io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind: int SCALE
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides RIGHT
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String value
io.flutter.plugin.editing.TextEditingDelta: int newComposingEnd
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler
io.flutter.embedding.engine.systemchannels.SystemChannel: java.lang.String TAG
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: io.flutter.plugins.imagepicker.Messages$CacheRetrievalType type
io.flutter.embedding.engine.FlutterEngine: io.flutter.plugin.platform.PlatformViewsController platformViewsController
io.flutter.embedding.engine.systemchannels.LocalizationChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: java.lang.String engineId
io.flutter.plugins.imagepicker.ImagePickerDelegate: io.flutter.plugins.imagepicker.ImagePickerDelegate$PermissionManager permissionManager
io.flutter.plugins.imagepicker.ImagePickerDelegate: io.flutter.plugins.imagepicker.ImagePickerCache cache
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: io.flutter.plugins.imagepicker.ImagePickerPlugin this$0
androidx.datastore.preferences.PreferencesProto$Value: int valueCase_
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: java.lang.String actionLabel
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType UNKNOWN
androidx.datastore.preferences.PreferencesProto$StringSet: androidx.datastore.preferences.protobuf.Parser PARSER
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection RTL
io.flutter.plugin.common.EventChannel: java.lang.String TAG
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: io.flutter.embedding.engine.dart.DartMessenger messenger
io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind: int NONE
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: boolean returnValueForOnJsAlert
io.flutter.plugin.mouse.MouseCursorPlugin$2: long serialVersionUID
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] $VALUES
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.renderer.RenderSurface previousRenderSurface
io.flutter.plugin.editing.TextInputPlugin: android.view.View mView
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: int prevLeft
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_USE_TEST_FONTS
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.view.AccessibilityBridge$SemanticsNode: float right
io.flutter.embedding.android.FlutterSurfaceView: android.view.SurfaceHolder$Callback surfaceCallback
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String domainNetworkPolicy
io.flutter.plugins.urllauncher.Messages$WebViewOptions: java.lang.Boolean enableDomStorage
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: java.util.List displayFeatures
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: io.flutter.plugins.webviewflutter.WebViewProxyApi api
io.flutter.plugins.sharedpreferences.StringListLookupResultType: io.flutter.plugins.sharedpreferences.StringListLookupResultType$Companion Companion
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.util.Map globalRegistrarMap
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.loader.FlutterApplicationInfo flutterApplicationInfo
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean released
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode inputFocusedSemanticsNode
androidx.activity.ComponentActivity: kotlin.Lazy defaultViewModelProviderFactory$delegate
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2 this$0
io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask: android.content.res.AssetManager mAssetManager
io.flutter.plugin.editing.SpellCheckPlugin: java.lang.String START_INDEX_KEY
io.flutter.plugin.common.MethodChannel: io.flutter.plugin.common.BinaryMessenger$TaskQueue taskQueue
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType kKeyboard
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeature: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState state
io.flutter.view.AccessibilityBridge$SemanticsNode: int maxValueLength
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1$1: androidx.datastore.preferences.core.Preferences$Key $doubleKey
io.flutter.plugins.imagepicker.Messages$SourceCamera: io.flutter.plugins.imagepicker.Messages$SourceCamera REAR
io.flutter.app.FlutterPluginRegistry: io.flutter.view.FlutterView mFlutterView
io.flutter.embedding.engine.systemchannels.RestorationChannel$2: io.flutter.embedding.engine.systemchannels.RestorationChannel this$0
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String previousLabel
io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice: io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice REAR
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: double logicalTop
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.View mFlutterView
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String EXTRA_DART_ENTRYPOINT
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long lastQueueTime
io.flutter.view.AccessibilityBridge: io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate platformViewsAccessibilityDelegate
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$2: java.util.ArrayList val$wrapped
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_DOWN
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1$1: int label
io.flutter.view.FlutterNativeView: boolean applicationIsRunning
io.flutter.embedding.android.FlutterActivity: androidx.lifecycle.LifecycleRegistry lifecycle
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String NETWORK_POLICY_METADATA_KEY
io.flutter.embedding.android.KeyData$DeviceType: long value
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel
io.flutter.plugin.editing.InputConnectionAdaptor: int batchEditNestDepth
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode IMMERSIVE
io.flutter.plugins.imagepicker.ImagePickerDelegate: int REQUEST_CAMERA_VIDEO_PERMISSION
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean isFlutterEngineFromHost
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: java.util.Set onActivityResultListeners
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.String BIG_INTEGER_PREFIX
io.flutter.plugin.platform.PlatformViewsController: boolean enableImageRenderTarget
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill autofill
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_BUTTON
io.flutter.plugins.urllauncher.Messages$FlutterError: java.lang.String code
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_TRACE_SKIA_ALLOWLIST
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_TOGGLED
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int metaState
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView flutterImageView
io.flutter.plugin.common.StandardMessageCodec: boolean LITTLE_ENDIAN
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_SKIA_DETERMINISTIC_RENDERING
io.flutter.plugin.mouse.MouseCursorPlugin: io.flutter.embedding.engine.systemchannels.MouseCursorChannel mouseCursorChannel
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action LONG_PRESS
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2$1: int label
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: java.lang.Object rawPointerPropertiesList
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: boolean handleDeeplinking
io.flutter.plugin.common.StandardMessageCodec: java.lang.String TAG
io.flutter.plugins.imagepicker.Messages$GeneralOptions$Builder: java.lang.Boolean allowMultiple
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: io.flutter.embedding.android.TransparencyMode transparencyMode
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SCROLL_DOWN
io.flutter.embedding.android.AndroidTouchProcessor: io.flutter.embedding.android.MotionEventTracker motionEventTracker
io.flutter.view.FlutterView: io.flutter.embedding.engine.dart.DartExecutor dartExecutor
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode surface
io.flutter.plugins.sharedpreferences.SharedPreferencesPluginKt: java.lang.String DOUBLE_PREFIX
io.flutter.plugins.sharedpreferences.SharedPreferencesError: java.lang.Object details
io.flutter.plugin.platform.SingleViewPresentation: int viewId
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: java.lang.Character complexCharacter
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next
io.flutter.view.AccessibilityBridge$SemanticsNode: float scrollExtentMax
io.flutter.Build$API_LEVELS: int API_23
io.flutter.plugin.platform.SingleViewPresentation: boolean startFocused
io.flutter.plugins.imagepicker.Messages$GeneralOptions: java.lang.Boolean usePhotoPicker
io.flutter.plugin.common.StandardMessageCodec: byte BIGINT
androidx.activity.OnBackPressedCallback: java.util.concurrent.CopyOnWriteArrayList cancellables
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient$1: io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient this$1
io.flutter.embedding.engine.FlutterJNI: android.os.Looper mainLooper
io.flutter.plugins.webviewflutter.DownloadListenerProxyApi$DownloadListenerImpl: io.flutter.plugins.webviewflutter.DownloadListenerProxyApi api
io.flutter.plugins.imagepicker.ImagePickerCache: android.content.Context context
io.flutter.Log: int INFO
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: io.flutter.view.TextureRegistry$OnTrimMemoryListener trimMemoryListener
io.flutter.view.AccessibilityBridge: java.lang.Integer embeddedInputFocusedNodeId
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue: io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$SentConfiguration previousEnqueuedConfiguration
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue: io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$SentConfiguration currentConfiguration
io.flutter.view.AccessibilityBridge: java.lang.String TAG
io.flutter.embedding.android.FlutterView$3: io.flutter.embedding.android.FlutterView this$0
io.flutter.embedding.android.FlutterView: java.util.Set flutterEngineAttachmentListeners
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentViewLifecycleOwner mViewLifecycleOwner
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewPaddingLeft
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1: androidx.datastore.preferences.core.Preferences$Key $preferencesKey$inlined
io.flutter.app.FlutterPluginRegistry: java.util.List mActivityResultListeners
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1: java.lang.Object L$0
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: java.lang.Long quality
io.flutter.plugins.GeneratedPluginRegistrant: java.lang.String TAG
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: android.content.Context context
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeature: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType type
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType TEXT
io.flutter.plugin.editing.TextInputPlugin: io.flutter.plugin.platform.PlatformViewsController platformViewsController
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: android.view.WindowManager windowManager
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2$1: int label
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode texture
io.flutter.embedding.engine.loader.ResourceExtractor: java.lang.String TIMESTAMP_PREFIX
io.flutter.plugin.editing.InputConnectionAdaptor: io.flutter.plugin.editing.FlutterTextUtils flutterTextUtils
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: java.lang.Double maxWidth
io.flutter.plugin.common.StandardMessageCodec: byte FLOAT_ARRAY
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler handler
androidx.datastore.preferences.PreferencesProto$Value: androidx.datastore.preferences.PreferencesProto$Value DEFAULT_INSTANCE
io.flutter.embedding.engine.FlutterJNI: java.lang.Long nativeShellHolderId
io.flutter.FlutterInjector: io.flutter.embedding.engine.loader.FlutterLoader flutterLoader
io.flutter.embedding.android.FlutterSurfaceView: java.lang.String TAG
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.RenderMode renderMode
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2$1: int label
io.flutter.embedding.engine.FlutterJNI: boolean prefetchDefaultFontManagerCalled
io.flutter.embedding.engine.systemchannels.TextInputChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.RestorationChannel restorationChannel
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay TOP_OVERLAYS
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: java.lang.Runnable mOnDrawRunnable
io.flutter.view.FlutterView: io.flutter.plugin.localization.LocalizationPlugin mLocalizationPlugin
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType kGamepad
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean createNewReader
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler this$1
io.flutter.plugin.platform.VirtualDisplayController$2: java.lang.Runnable val$onNewSizeFrameAvailable
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.embedding.android.FlutterView: android.database.ContentObserver systemSettingsObserver
io.flutter.app.FlutterActivityDelegate: android.app.Activity activity
io.flutter.view.FlutterView: android.view.inputmethod.InputMethodManager mImm
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: java.util.Set onRequestPermissionsResultListeners
io.flutter.view.AccessibilityBridge: int SCROLLABLE_ACTIONS
androidx.activity.ComponentActivity: java.lang.String ACTIVITY_RESULT_TAG
io.flutter.plugin.platform.PlatformViewWrapper: io.flutter.embedding.android.AndroidTouchProcessor touchProcessor
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType CUTOUT
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$3: java.util.ArrayList val$wrapped
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.WindowInfoRepositoryCallbackAdapterWrapper windowInfoRepo
io.flutter.plugin.localization.LocalizationPlugin: io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel
io.flutter.plugin.text.ProcessTextPlugin: io.flutter.embedding.engine.systemchannels.ProcessTextChannel processTextChannel
io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder: java.lang.String dartEntrypoint
io.flutter.app.FlutterActivityDelegate$1$1: io.flutter.app.FlutterActivityDelegate$1 this$1
io.flutter.embedding.engine.systemchannels.SettingsChannel: java.lang.String TEXT_SCALE_FACTOR
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion Companion
io.flutter.view.FlutterView$ViewportMetrics: int systemGestureInsetBottom
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.embedding.engine.loader.FlutterLoader$InitResult: java.lang.String engineCachesPath
io.flutter.embedding.engine.systemchannels.KeyEventChannel: java.lang.String TAG
io.flutter.embedding.engine.systemchannels.BackGestureChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler defaultHandler
io.flutter.embedding.android.FlutterSurfaceView: boolean isSurfaceAvailableForRendering
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getPrefs$1: java.lang.Object L$1
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_CHECK_STATE_MIXED
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.engine.FlutterEngineGroup engineGroup
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityPluginBinding
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: android.content.BroadcastReceiver broadcastReceiver
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SHOW_ON_SCREEN
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType CLICK
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] $VALUES
io.flutter.Log: int logLevel
io.flutter.plugins.imagepicker.ImagePickerDelegate: int REQUEST_CODE_CHOOSE_MEDIA_FROM_GALLERY
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.util.Set activityResultListeners
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_ENABLE_VULKAN_VALIDATION
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method getParentNodeId
io.flutter.embedding.engine.systemchannels.KeyEventChannel: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.FlutterInjector$Builder: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
io.flutter.plugin.common.FlutterException: java.lang.Object details
io.flutter.embedding.android.FlutterView$5: java.lang.Runnable val$onDone
io.flutter.plugins.webviewflutter.DisplayListenerProxy: java.util.ArrayList listenersBeforeWebView
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult$Builder: io.flutter.plugins.imagepicker.Messages$CacheRetrievalError error
io.flutter.plugins.sharedpreferences.StringListLookupResultType: kotlin.enums.EnumEntries $ENTRIES
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.NavigationChannel navigationChannel
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: int bufferWidth
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2$1: int label
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_ENABLE_IMPELLER
androidx.activity.ComponentActivity: java.util.concurrent.CopyOnWriteArrayList onTrimMemoryListeners
io.flutter.plugins.sharedpreferences.SharedPreferencesPluginKt: kotlin.properties.ReadOnlyProperty sharedPreferencesDataStore$delegate
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewPaddingBottom
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2 this$0
io.flutter.plugins.urllauncher.UrlLauncherPlugin: java.lang.String TAG
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2$1: int label
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: boolean useDataStore
io.flutter.plugin.editing.ListenableEditingState: int mSelectionStartWhenBeginBatchEdit
io.flutter.embedding.android.FlutterView$1: io.flutter.embedding.android.FlutterView this$0
kotlinx.coroutines.channels.BufferedChannel: long completedExpandBuffersAndPauseFlag
kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object tail
androidx.datastore.preferences.PreferencesProto$Value: int STRING_SET_FIELD_NUMBER
kotlinx.coroutines.CancelledContinuation: int _resumed
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_VM_SERVICE_PORT
androidx.activity.ComponentActivity: java.util.concurrent.CopyOnWriteArrayList onMultiWindowModeChangedListeners
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1$1: int label
io.flutter.embedding.engine.systemchannels.BackGestureChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.plugin.platform.VirtualDisplayController: int densityDpi
io.flutter.plugin.editing.InputConnectionAdaptor: int mClient
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1: io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler this$1
io.flutter.embedding.android.FlutterImageView: java.lang.String TAG
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader: boolean closed
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: boolean released
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] $VALUES
io.flutter.app.FlutterFragmentActivity: io.flutter.plugin.common.PluginRegistry pluginRegistry
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: io.flutter.plugin.common.EventChannel$StreamHandler handler
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_FLUTTERVIEW_TRANSPARENCY_MODE
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: io.flutter.embedding.engine.renderer.SurfaceTextureWrapper textureWrapper
io.flutter.plugin.platform.SingleViewWindowManager: android.view.WindowManager delegate
io.flutter.embedding.engine.systemchannels.TextInputChannel: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler textInputMethodHandler
io.flutter.plugins.imagepicker.ImagePickerDelegate: io.flutter.plugins.imagepicker.ImagePickerDelegate$PendingCallState pendingCallState
io.flutter.plugins.imagepicker.ImagePickerDelegate$2: android.app.Activity val$activity
androidx.activity.ComponentActivity: java.util.concurrent.CopyOnWriteArrayList onNewIntentListeners
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_ENABLE_IMPELLER
io.flutter.plugins.webviewflutter.DisplayListenerProxy$1: io.flutter.plugins.webviewflutter.DisplayListenerProxy this$0
io.flutter.embedding.engine.systemchannels.RestorationChannel: boolean engineHasProvidedData
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_SELECTED
io.flutter.embedding.engine.FlutterJNI: java.util.concurrent.locks.ReentrantReadWriteLock shellHolderLock
androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem: android.os.Parcelable$Creator CREATOR
androidx.datastore.preferences.PreferencesProto$Value: int BYTES_FIELD_NUMBER
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String DART_ENTRYPOINT_URI_META_DATA_KEY
org.chromium.support_lib_boundary.PrefetchStatusCodeBoundaryInterface: int SUCCESS
io.flutter.plugins.imagepicker.Messages$CacheRetrievalType: io.flutter.plugins.imagepicker.Messages$CacheRetrievalType[] $VALUES
io.flutter.plugins.imagepicker.ImageResizer: io.flutter.plugins.imagepicker.ExifDataCopier exifDataCopier
io.flutter.view.AccessibilityBridge$SemanticsNode: float top
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] $VALUES
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: int viewId
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.loader.FlutterLoader$Settings settings
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder: java.util.List dartEntrypointArgs
io.flutter.plugin.editing.TextInputPlugin$InputTarget: int id
io.flutter.embedding.android.FlutterFragmentActivity: java.lang.String TAG
io.flutter.embedding.android.FlutterActivity: int FLUTTER_VIEW_ID
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$dataStoreSetString$2: java.lang.Object L$0
io.flutter.embedding.engine.systemchannels.TextInputChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler
kotlinx.coroutines.internal.LimitedDispatcher: int runningWorkers
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState RESUMED
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.view.FlutterMain$Settings: java.lang.String logTag
androidx.activity.ComponentActivity: androidx.activity.result.ActivityResultRegistry activityResultRegistry
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: android.content.Context applicationContext
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.util.Set WindowFocusChangedListeners
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType STANDARD
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1: boolean $value
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState: io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver observer
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: io.flutter.plugin.common.BasicMessageChannel$Reply callback
io.flutter.plugins.urllauncher.UrlLauncher: android.app.Activity activity
io.flutter.embedding.engine.FlutterEngineGroup$Options: java.util.List dartEntrypointArgs
io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder: java.lang.String initialRoute
io.flutter.embedding.engine.systemchannels.PlatformChannel$1: io.flutter.embedding.engine.systemchannels.PlatformChannel this$0
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.app.FlutterPluginRegistry this$0
io.flutter.embedding.engine.systemchannels.BackGestureChannel: java.lang.String TAG
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi: io.flutter.plugin.common.BinaryMessenger binaryMessenger
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode EDGE_TO_EDGE
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: android.media.ImageReader$OnImageAvailableListener onImageAvailableListener
io.flutter.plugins.urllauncher.WebViewActivity: java.lang.String ENABLE_JS_EXTRA
io.flutter.plugin.platform.PlatformViewWrapper: int prevLeft
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] $VALUES
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$1: java.util.ArrayList val$wrapped
kotlinx.coroutines.sync.SemaphoreImpl: java.lang.Object head
io.flutter.plugin.common.StandardMessageCodec: byte BYTE_ARRAY
androidx.fragment.app.Fragment: int mTargetRequestCode
androidx.activity.result.IntentSenderRequest: android.os.Parcelable$Creator CREATOR
io.flutter.plugins.sharedpreferences.StringListResult: io.flutter.plugins.sharedpreferences.StringListLookupResultType type
androidx.datastore.preferences.protobuf.GeneratedMessageLite: java.util.Map defaultInstanceMap
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: io.flutter.plugins.webviewflutter.ConsoleMessageLevel UNKNOWN
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType CLIP_RECT
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2 this$0
io.flutter.embedding.android.FlutterView: io.flutter.plugin.editing.SpellCheckPlugin spellCheckPlugin
io.flutter.plugin.common.BinaryCodec: io.flutter.plugin.common.BinaryCodec INSTANCE_DIRECT
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List decreasedValueAttributes
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: int FLUTTER_SPLASH_VIEW_FALLBACK_ID
io.flutter.embedding.engine.FlutterEngineGroupCache: java.util.Map cachedEngineGroups
io.flutter.embedding.engine.dart.DartMessenger: io.flutter.embedding.engine.dart.DartMessenger$TaskQueueFactory taskQueueFactory
io.flutter.plugins.sharedpreferences.StringListResult: io.flutter.plugins.sharedpreferences.StringListResult$Companion Companion
io.flutter.embedding.engine.FlutterEngineGroup$1: io.flutter.embedding.engine.FlutterEngine val$engineToCleanUpOnDestroy
io.flutter.view.FlutterView: io.flutter.plugin.editing.TextInputPlugin mTextInputPlugin
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: io.flutter.embedding.android.RenderMode renderMode
io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind: int SCROLL
androidx.datastore.preferences.protobuf.GeneratedMessageLite: int UNINITIALIZED_SERIALIZED_SIZE
io.flutter.plugin.mouse.MouseCursorPlugin: io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate mView
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String hint
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: float devicePixelRatio
io.flutter.embedding.engine.systemchannels.NavigationChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getPrefs$1: int label
io.flutter.view.FlutterNativeView: io.flutter.embedding.engine.FlutterJNI mFlutterJNI
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: boolean returnValueForOnJsConfirm
kotlinx.coroutines.JobSupport: java.lang.Object _state
kotlinx.coroutines.CancellableContinuationImpl: int _decisionAndIndex
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType kHdmi
io.flutter.view.FlutterView$ViewportMetrics: int physicalViewPaddingRight
io.flutter.app.FlutterActivity: io.flutter.plugin.common.PluginRegistry pluginRegistry
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1: java.lang.String $key
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityManager accessibilityManager
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: long id
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler: io.flutter.plugin.common.MethodChannel this$0
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: boolean returnValueForOnConsoleMessage
io.flutter.plugin.localization.LocalizationPlugin: io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler localizationMessageHandler
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: java.lang.String pluginKey
io.flutter.app.FlutterActivityDelegate: io.flutter.view.FlutterView flutterView
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.String LIST_IDENTIFIER
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides NONE
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding flutterPluginBinding
androidx.core.content.FileProvider: java.lang.String mAuthority
io.flutter.plugin.editing.TextInputPlugin$2: double[] val$minMax
io.flutter.plugin.platform.PlatformViewWrapper: io.flutter.plugin.platform.PlatformViewRenderTarget renderTarget
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind overlay
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness systemNavigationBarIconBrightness
io.flutter.plugin.editing.TextEditingDelta: int newSelectionEnd
io.flutter.embedding.android.AndroidTouchProcessor: int DEFAULT_HORIZONTAL_SCROLL_FACTOR
io.flutter.view.FlutterNativeView: io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object result
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.plugins.imagepicker.Messages$SourceSpecification$Builder: io.flutter.plugins.imagepicker.Messages$SourceType type
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: java.util.Set onNewIntentListeners
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.lang.String TAG
androidx.fragment.app.Fragment: androidx.savedstate.SavedStateRegistryController mSavedStateRegistryController
io.flutter.plugin.platform.PlatformViewsController: boolean flutterViewConvertedToImageView
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo mAnimationInfo
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.String SHARED_PREFERENCES_NAME
io.flutter.embedding.android.FlutterFragment: android.view.ViewTreeObserver$OnWindowFocusChangeListener onWindowFocusChangeListener
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_CHARACTER
io.flutter.plugin.platform.PlatformViewWrapper$1: android.view.View$OnFocusChangeListener val$userFocusListener
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.plugins.imagepicker.Messages$SourceCamera: io.flutter.plugins.imagepicker.Messages$SourceCamera[] $VALUES
androidx.datastore.preferences.PreferencesProto$Value: java.lang.Object value_
io.flutter.plugin.editing.TextInputPlugin: io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration configuration
androidx.fragment.app.Fragment: int RESUMED
io.flutter.view.AccessibilityBridge: java.util.List flutterNavigationStack
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] $VALUES
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding: android.app.Service service
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.MethodCodec codec
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind: int UNKNOWN
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: android.app.Activity activity
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getPrefs$1: java.lang.Object result
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean VERBOSE_LOGS
io.flutter.embedding.android.AndroidTouchProcessor: int POINTER_DATA_FLAG_BATCHED
io.flutter.app.FlutterFragmentActivity: io.flutter.app.FlutterActivityEvents eventDelegate
io.flutter.app.FlutterActivityDelegate: java.lang.String SPLASH_SCREEN_META_DATA_KEY
io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder: java.lang.String backgroundMode
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getPrefs$1: java.lang.Object L$3
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String flutterAssetsDir
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.embedding.engine.dart.DartMessenger dartMessenger
androidx.datastore.preferences.PreferencesProto$Value: int STRING_FIELD_NUMBER
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder: java.lang.String backgroundMode
androidx.core.content.FileProvider: java.lang.String META_DATA_FILE_PROVIDER_PATHS
io.flutter.view.AccessibilityBridge$Flag: int value
io.flutter.plugins.imagepicker.ImagePickerDelegate$MediaPath: io.flutter.plugins.imagepicker.ImagePickerDelegate this$0
io.flutter.plugin.platform.PlatformPlugin$3: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$Brightness
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String PUBLIC_ISOLATE_SNAPSHOT_DATA_KEY
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean released
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int viewId
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: long motionEventId
io.flutter.plugin.platform.SingleViewFakeWindowViewGroup: android.graphics.Rect childRect
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer this$1
io.flutter.embedding.engine.loader.FlutterLoader: boolean initialized
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: java.lang.Number eventTime
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.ExtractedText mExtractedText
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: java.lang.String dartEntrypoint
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode accessibilityFocusedSemanticsNode
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.BackGestureChannel backGestureChannel
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$SpeculativeLoadingStatus: int DISABLED
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String ENABLE_IMPELLER_META_DATA_KEY
io.flutter.embedding.engine.systemchannels.RestorationChannel: boolean frameworkHasRequestedData
io.flutter.embedding.engine.systemchannels.SystemChannel: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.embedding.engine.systemchannels.PlatformChannel$2: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiMode
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action DID_GAIN_ACCESSIBILITY_FOCUS
io.flutter.plugin.editing.TextInputPlugin: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState mLastKnownFrameworkTextEditingState
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.engine.FlutterEngine flutterEngine
io.flutter.Log: int VERBOSE
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$dataStoreSetString$2: androidx.datastore.preferences.core.Preferences$Key $stringKey
io.flutter.embedding.engine.systemchannels.LocalizationChannel$1: io.flutter.embedding.engine.systemchannels.LocalizationChannel this$0
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1: androidx.datastore.preferences.core.Preferences$Key $preferencesKey$inlined
io.flutter.embedding.android.KeyboardMap: io.flutter.embedding.android.KeyboardMap$PressingGoal[] pressingGoals
androidx.core.content.FileProvider: int mResourceId
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization WORDS
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.lang.String TAG
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_TRACE_SKIA
io.flutter.plugin.common.ErrorLogResult: java.lang.String tag
androidx.activity.OnBackPressedCallback: boolean isEnabled
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: io.flutter.plugins.webviewflutter.WebViewClientProxyApi api
io.flutter.view.AccessibilityBridge$1: io.flutter.view.AccessibilityBridge this$0
io.flutter.embedding.android.FlutterTextureView: io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer
io.flutter.plugins.webviewflutter.PigeonApiWebStorage: io.flutter.plugins.webviewflutter.PigeonApiWebStorage$Companion Companion
io.flutter.app.FlutterPluginRegistry: java.util.List mNewIntentListeners
io.flutter.plugins.sharedpreferences.SharedPreferencesPluginKt: kotlin.reflect.KProperty[] $$delegatedProperties
io.flutter.embedding.engine.loader.ResourceExtractor: android.content.res.AssetManager mAssetManager
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: java.lang.String TAG
io.flutter.plugin.platform.PlatformOverlayView: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityDelegate
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind: int MOUSE
io.flutter.FlutterInjector: java.util.concurrent.ExecutorService executorService
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder: java.lang.String backgroundMode
androidx.activity.ComponentActivity: java.util.concurrent.atomic.AtomicInteger nextLocalRequestCode
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: java.lang.Number downTime
io.flutter.embedding.android.KeyData: java.lang.String character
io.flutter.embedding.android.FlutterTextureView: android.view.Surface renderSurface
io.flutter.plugin.common.StandardMethodCodec: io.flutter.plugin.common.StandardMessageCodec messageCodec
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action DECREASE
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode hoveredObject
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$TextDirection textDirection
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.ProcessTextChannel processTextChannel
io.flutter.embedding.engine.systemchannels.PlatformChannel$2: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$DeviceOrientation
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: kotlin.Lazy codec$delegate
androidx.core.content.FileProvider: java.lang.String TAG_EXTERNAL
io.flutter.FlutterInjector: boolean accessed
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1: int label
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind: int STYLUS
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START
io.flutter.embedding.android.FlutterActivity$1: io.flutter.embedding.android.FlutterActivity this$0
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $VALUES
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_TRACE_SYSTRACE
org.chromium.support_lib_boundary.ProcessGlobalConfigConstants: java.lang.String CONFIGURE_PARTITIONED_COOKIES
io.flutter.plugin.editing.InputConnectionAdaptor: io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel
io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder: boolean destroyEngineWithActivity
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_ENABLE_DART_PROFILING
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: int selectionStart
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.embedding.engine.dart.DartMessenger: io.flutter.embedding.engine.dart.DartMessenger$DartMessengerTaskQueue platformTaskQueue
io.flutter.embedding.android.FlutterView: io.flutter.plugin.editing.TextInputPlugin textInputPlugin
io.flutter.embedding.android.KeyboardMap$KeyPair: long physicalKey
io.flutter.embedding.engine.dart.DartMessenger$SerialTaskQueue: java.util.concurrent.ExecutorService executor
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String PUBLIC_FLUTTER_ASSETS_DIR_KEY
io.flutter.plugin.platform.PlatformPlugin: io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar$1: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi $api
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: android.graphics.SurfaceTexture$OnFrameAvailableListener onFrameListener
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1$1: boolean $value
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method getSourceNodeId
io.flutter.plugins.webviewflutter.DisplayListenerProxy$1: java.util.ArrayList val$webViewListeners
io.flutter.view.FlutterView: android.view.SurfaceHolder$Callback mSurfaceCallback
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_ENABLE_STATE_RESTORATION
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.FlutterAssetManager flutterAssetManager
androidx.recyclerview.widget.RecyclerView$SavedState: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate delegate
io.flutter.view.AccessibilityBridge$AccessibilityFeature: int value
io.flutter.plugin.editing.InputConnectionAdaptor: io.flutter.plugin.editing.InputConnectionAdaptor$KeyboardDelegate keyboardDelegate
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType VISIBLE_PASSWORD
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long lastDequeueTime
io.flutter.view.FlutterView$ViewportMetrics: int physicalTouchSlop
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: boolean released
io.flutter.embedding.engine.systemchannels.LocalizationChannel: io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler localizationMessageHandler
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
io.flutter.plugin.editing.TextEditingDelta: java.lang.String TAG
io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask: android.content.pm.PackageManager mPackageManager
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: java.lang.Class fragmentClass
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List childrenInHitTestOrder
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousTextSelectionExtent
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions$Builder: java.lang.Double maxWidth
io.flutter.embedding.engine.dart.DartMessenger$Reply: int replyId
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer
io.flutter.plugin.editing.TextEditingDelta: int newComposingStart
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$dataStoreSetString$2: java.lang.String $value
io.flutter.plugins.imagepicker.ImagePickerDelegate: io.flutter.plugins.imagepicker.FileUtils fileUtils
io.flutter.app.FlutterActivity: java.lang.String TAG
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event$Companion Companion
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError$Builder: java.lang.String message
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: java.lang.Class fragmentClass
androidx.fragment.app.Fragment: java.util.concurrent.atomic.AtomicInteger mNextLocalRequestCode
io.flutter.plugins.webviewflutter.FileChooserMode: io.flutter.plugins.webviewflutter.FileChooserMode UNKNOWN
io.flutter.embedding.android.MotionEventTracker: java.lang.String TAG
io.flutter.view.AccessibilityBridge: int FOCUSABLE_FLAGS
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String DEFAULT_ISOLATE_SNAPSHOT_DATA
io.flutter.embedding.android.KeyboardMap: java.util.HashMap scanCodeToPhysical
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: io.flutter.plugins.sharedpreferences.SharedPreferencesBackend backend
io.flutter.plugin.editing.InputConnectionAdaptor: boolean mMonitorCursorUpdate
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager$Companion Companion
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.util.Set viewDestroyListeners
io.flutter.app.FlutterPluginRegistry: android.app.Activity mActivity
io.flutter.embedding.engine.systemchannels.LifecycleChannel$1: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$LifecycleChannel$AppLifecycleState
io.flutter.embedding.android.KeyboardManager$CharacterCombiner: int combiningCharacter
io.flutter.plugins.urllauncher.Messages$WebViewOptions: java.util.Map headers
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String DART_ENTRYPOINT_META_DATA_KEY
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object L$0
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine flutterEngine
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineBroadcastReceiverPluginBinding: android.content.BroadcastReceiver broadcastReceiver
io.flutter.plugin.platform.SingleViewPresentation: android.view.View$OnFocusChangeListener focusChangeListener
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.embedding.engine.FlutterEngine flutterEngine
io.flutter.embedding.android.KeyData: int FIELD_COUNT
io.flutter.embedding.android.FlutterFragment: java.lang.String TAG
io.flutter.view.AccessibilityBridge: int accessibilityFeatureFlags
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: long nextIdentifier
io.flutter.plugin.editing.TextEditingDelta: java.lang.CharSequence deltaText
io.flutter.view.VsyncWaiter$1: io.flutter.view.VsyncWaiter this$0
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.embedding.engine.FlutterEngineGroup group
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.view.FlutterRunArguments: java.lang.String entrypoint
io.flutter.plugin.editing.ListenableEditingState: java.lang.String mTextWhenBeginBatchEdit
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineContentProviderPluginBinding: android.content.ContentProvider contentProvider
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: android.graphics.Matrix matrix
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: io.flutter.view.FlutterView this$0
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics viewportMetrics
io.flutter.embedding.engine.systemchannels.SettingsChannel: java.lang.String CHANNEL_NAME
io.flutter.plugins.imagepicker.Messages$SourceType: int index
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object result
io.flutter.embedding.engine.FlutterJNI: java.util.Set flutterUiDisplayListeners
org.chromium.support_lib_boundary.WebMessagePayloadBoundaryInterface$WebMessagePayloadType: int TYPE_STRING
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback animationCallback
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: io.flutter.embedding.engine.loader.FlutterApplicationInfo flutterApplicationInfo
io.flutter.plugin.platform.PlatformPlugin: int mEnabledOverlays
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState: androidx.lifecycle.Lifecycle lifecycle
io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice: io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice FRONT
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: boolean shouldDelayFirstAndroidViewDraw
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient$1: android.webkit.WebView val$view
io.flutter.embedding.android.KeyboardManager: java.lang.String TAG
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$2: io.flutter.plugin.common.BasicMessageChannel$Reply val$reply
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar registrar
androidx.fragment.app.Fragment: boolean mHiddenChanged
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_DART_ENTRYPOINT_ARGS
io.flutter.Build$API_LEVELS: int API_24
io.flutter.plugin.platform.PlatformViewsController$1: io.flutter.plugin.platform.PlatformViewsController this$0
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: int composingStart
io.flutter.view.AccessibilityViewEmbedder: android.view.View rootAccessibilityView
io.flutter.plugins.urllauncher.Messages$PigeonCodec: io.flutter.plugins.urllauncher.Messages$PigeonCodec INSTANCE
io.flutter.view.FlutterNativeView: android.content.Context mContext
io.flutter.view.AccessibilityBridge$SemanticsNode: float[] transform
io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind: int SCROLL_INERTIA_CANCEL
io.flutter.plugin.editing.ListenableEditingState$1: android.text.Editable val$self
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDeprecatedStringList$1: java.lang.String $key
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: int MAX_IMAGES
io.flutter.plugin.platform.PlatformViewsController: boolean enableSurfaceProducerRenderTarget
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2: androidx.datastore.preferences.core.Preferences$Key $preferencesKey$inlined
io.flutter.view.AccessibilityBridge$SemanticsNode: android.graphics.Rect globalRect
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.view.FlutterView$3: io.flutter.plugin.platform.PlatformPlugin val$platformPlugin
io.flutter.embedding.engine.renderer.FlutterRenderer$1: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getAll$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: java.lang.String dartEntrypointLibrary
io.flutter.plugins.imagepicker.ImagePickerDelegate: int REQUEST_CODE_TAKE_IMAGE_WITH_CAMERA
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List customAccessibilityActions
io.flutter.plugins.webviewflutter.FileChooserMode: io.flutter.plugins.webviewflutter.FileChooserMode$Companion Companion
io.flutter.view.AccessibilityBridge: float DEFAULT_TRANSITION_ANIMATION_SCALE
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1: int label
io.flutter.embedding.engine.FlutterJNI: float displayWidth
io.flutter.embedding.engine.loader.ResourceExtractor: java.lang.String mDataDirPath
kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean trimOnMemoryPressure
io.flutter.embedding.engine.systemchannels.LifecycleChannel: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_DART_ENTRYPOINT_URI
androidx.fragment.app.Fragment: java.lang.Object USE_DEFAULT_TRANSITION
io.flutter.plugins.imagepicker.ImagePickerDelegate: java.util.concurrent.ExecutorService executor
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler: io.flutter.plugin.common.MethodChannel$MethodCallHandler handler
kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state
io.flutter.view.AccessibilityBridge: java.lang.Integer embeddedAccessibilityFocusedNodeId
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int buttonState
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_DUMP_SHADER_SKP_ON_SHADER_COMPILATION
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_DISABLE_SERVICE_AUTH_CODES
io.flutter.embedding.engine.FlutterOverlaySurface: int id
io.flutter.plugins.urllauncher.Messages$FlutterError: java.lang.Object details
io.flutter.embedding.android.KeyboardMap$2: long serialVersionUID
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int overrideId
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag HAS_EXPANDED_STATE
io.flutter.embedding.engine.renderer.FlutterRenderer: android.view.Surface surface
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType PHONE
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker
io.flutter.Log: int ASSERT
io.flutter.FlutterInjector: io.flutter.FlutterInjector instance
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: java.lang.String uniqueIdentifier
io.flutter.embedding.engine.systemchannels.RestorationChannel$1: byte[] val$data
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget$1: io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget this$0
io.flutter.BuildConfig: boolean JIT_RELEASE
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization CHARACTERS
io.flutter.embedding.android.KeyData: long logicalKey
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String SHARED_PREFERENCE_MAX_WIDTH_KEY
io.flutter.plugin.platform.VirtualDisplayController: int viewId
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List hintAttributes
io.flutter.embedding.android.FlutterFragmentActivity: int FRAGMENT_CONTAINER_ID
org.chromium.support_lib_boundary.PrefetchStatusCodeBoundaryInterface: int FAILURE
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.android.FlutterView flutterView
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.android.ExclusiveAppComponent exclusiveActivity
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.platform.PlatformViewRegistryImpl registry
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String FLUTTER_IMAGE_PICKER_IMAGE_PATH_KEY
io.flutter.embedding.engine.dart.DartMessenger$DefaultTaskQueueFactory: java.util.concurrent.ExecutorService executorService
io.flutter.view.VsyncWaiter$DisplayListener: io.flutter.view.VsyncWaiter this$0
io.flutter.view.VsyncWaiter: io.flutter.view.VsyncWaiter instance
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List childrenInTraversalOrder
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: io.flutter.plugins.sharedpreferences.SharedPreferencesListEncoder listEncoder
androidx.fragment.app.Fragment: boolean mHidden
io.flutter.view.FlutterView: java.util.List mFirstFrameListeners
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: java.lang.String viewType
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.plugins.urllauncher.Messages$WebViewOptions$Builder: java.util.Map headers
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_HIDDEN
io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback: io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback$Companion Companion
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1: java.lang.Object L$0
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String DEFAULT_KERNEL_BLOB
io.flutter.embedding.engine.systemchannels.ProcessTextChannel: java.lang.String TAG
io.flutter.plugin.editing.TextInputPlugin: android.graphics.Rect lastClientRect
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getAll$1: int label
androidx.datastore.preferences.PreferencesProto$Value: int DOUBLE_FIELD_NUMBER
io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask: java.lang.String mPackageName
io.flutter.embedding.android.KeyData$Type: long value
io.flutter.plugin.platform.PlatformViewsController: boolean usesSoftwareRendering
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_SLIDER
io.flutter.embedding.android.KeyData: boolean synthesized
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputMethodManager mImm
io.flutter.view.FlutterView$ViewportMetrics: int systemGestureInsetLeft
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: java.lang.String encodedName
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: java.lang.String TAG
io.flutter.embedding.android.KeyEmbedderResponder: io.flutter.plugin.common.BinaryMessenger messenger
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String MAP_KEY_MAX_HEIGHT
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: java.util.HashMap strongInstances
io.flutter.plugins.imagepicker.Messages$GeneralOptions$Builder: java.lang.Boolean usePhotoPicker
io.flutter.app.FlutterPluginRegistry: java.util.List mViewDestroyListeners
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1: int label
org.chromium.support_lib_boundary.ProcessGlobalConfigConstants: java.lang.String DATA_DIRECTORY_BASE_PATH
io.flutter.view.AccessibilityBridge$SemanticsNode: int textSelectionExtent
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState PAUSED
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodCallHandler
kotlinx.coroutines.channels.BufferedChannel: long bufferEnd
io.flutter.view.FlutterView$1: io.flutter.view.FlutterView this$0
io.flutter.plugins.imagepicker.Messages$FlutterError: java.lang.String code
io.flutter.plugin.editing.FlutterTextUtils: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.view.FlutterView: io.flutter.view.AccessibilityBridge mAccessibilityNodeProvider
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List finalClippingPaths
io.flutter.embedding.engine.systemchannels.PlatformChannel: java.lang.String TAG
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType MULTILINE
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: boolean returnValueForOnShowFileChooser
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineBroadcastReceiverPluginBinding broadcastReceiverPluginBinding
io.flutter.plugin.editing.TextInputPlugin: io.flutter.plugin.editing.ListenableEditingState mEditable
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String EXTRA_INITIAL_ROUTE
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient$1: io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient this$0
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Field childNodeIdsField
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onTapOverride
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: float[] radiis
io.flutter.plugins.webviewflutter.PigeonApiWebView: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.plugins.urllauncher.WebViewActivity: android.webkit.WebViewClient webViewClient
androidx.core.content.FileProvider: java.lang.String TAG_EXTERNAL_FILES
io.flutter.plugins.imagepicker.ImagePickerDelegate: io.flutter.plugins.imagepicker.ImagePickerDelegate$FileUriResolver fileUriResolver
io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder: java.lang.String initialRoute
io.flutter.embedding.engine.FlutterEngineGroup$Options: boolean automaticallyRegisterPlugins
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.util.Set userLeaveHintListeners
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.PlatformView platformView
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage: android.media.Image image
io.flutter.embedding.engine.FlutterJNI: float displayHeight
io.flutter.plugins.webviewflutter.JavaScriptChannel: java.lang.String javaScriptChannelName
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2: androidx.datastore.preferences.core.Preferences$Key $preferencesKey$inlined
io.flutter.plugin.editing.ListenableEditingState: int mComposingEndWhenBeginBatchEdit
io.flutter.embedding.engine.systemchannels.SettingsChannel: java.lang.String PLATFORM_BRIGHTNESS
io.flutter.plugin.platform.VirtualDisplayController: io.flutter.plugin.platform.SingleViewPresentation presentation
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.util.Set requestPermissionsResultListeners
androidx.fragment.app.FragmentManagerState: android.os.Parcelable$Creator CREATOR
io.flutter.view.AccessibilityViewEmbedder: io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean isAttached
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: io.flutter.embedding.android.TransparencyMode transparencyMode
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: java.util.Map serviceAwarePlugins
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousFlags
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: long clearFinalizedWeakReferencesInterval
io.flutter.plugins.imagepicker.ImagePickerDelegate: io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice cameraDevice
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1: java.lang.Object L$0
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides BOTH
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener
io.flutter.plugin.platform.VirtualDisplayController: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
io.flutter.embedding.android.KeyData: io.flutter.embedding.android.KeyData$Type type
org.chromium.support_lib_boundary.ProcessGlobalConfigConstants: java.lang.String DATA_DIRECTORY_SUFFIX
kotlinx.coroutines.DispatchedCoroutine: int _decision
io.flutter.embedding.engine.systemchannels.KeyboardChannel$1: java.util.Map pressedState
io.flutter.plugin.common.StandardMessageCodec: byte STRING
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int systemGestureInsetBottom
io.flutter.FlutterInjector$Builder: io.flutter.embedding.engine.loader.FlutterLoader flutterLoader
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackClassName
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action PASTE
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
io.flutter.embedding.engine.FlutterJNI: boolean initCalled
androidx.fragment.app.FragmentActivity: boolean mResumed
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_CACHED_ENGINE_ID
kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_TRACE_STARTUP
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.platform.PlatformViewsController platformViewsController
io.flutter.view.FlutterRunArguments: java.lang.String bundlePath
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection LTR
io.flutter.plugin.common.StandardMessageCodec: byte LONG
kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated
io.flutter.plugin.platform.VirtualDisplayController$2: android.view.View val$embeddedView
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: boolean shouldAutomaticallyHandleOnBackPressed
io.flutter.plugin.editing.TextInputPlugin$2: double[] val$matrix
io.flutter.view.AccessibilityBridge: io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface surface
io.flutter.plugin.common.MethodChannel: java.lang.String name
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: io.flutter.plugins.webviewflutter.ConsoleMessageLevel$Companion Companion
io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder: java.lang.String cachedEngineGroupId
io.flutter.view.AccessibilityBridge: boolean accessibleNavigation
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean needsSave
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$3: io.flutter.plugin.common.BasicMessageChannel$Reply val$reply
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState state
io.flutter.embedding.engine.systemchannels.RestorationChannel: java.lang.String TAG
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext _context
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode LEAN_BACK
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: int requestBufferWidth
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String MAP_KEY_PATH_LIST
io.flutter.plugin.platform.VirtualDisplayController: android.hardware.display.VirtualDisplay virtualDisplay
io.flutter.plugin.common.FlutterException: java.lang.String code
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$SentConfiguration: int generationNumber
io.flutter.embedding.android.FlutterImageView: boolean isAttachedToFlutterRenderer
io.flutter.embedding.android.KeyboardMap$TogglingGoal: boolean enabled
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: boolean handleDeeplinking
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action CUT
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: android.view.ViewTreeObserver$OnPreDrawListener activePreDrawListener
io.flutter.embedding.engine.systemchannels.SettingsChannel: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.embedding.android.FlutterView: boolean isFlutterUiDisplayed
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int MOVE
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest: int viewId
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: io.flutter.plugins.webviewflutter.ConsoleMessageLevel LOG
io.flutter.view.AccessibilityBridge$SemanticsNode: float previousScrollExtentMin
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_ENABLE_SOFTWARE_RENDERING
io.flutter.plugins.urllauncher.UrlLauncher: boolean $assertionsDisabled
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener isolateServiceIdListener
io.flutter.plugins.imagepicker.ImagePickerCache$CacheType: io.flutter.plugins.imagepicker.ImagePickerCache$CacheType IMAGE
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: android.view.Surface surface
io.flutter.plugins.imagepicker.Messages$PigeonCodec: io.flutter.plugins.imagepicker.Messages$PigeonCodec INSTANCE
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String SNAPSHOT_ASSET_PATH_KEY
io.flutter.embedding.engine.dart.DartMessenger$BufferedMessageInfo: long messageData
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1: kotlin.jvm.internal.Ref$ObjectRef $value
androidx.core.content.FileProvider: java.lang.Object mLock
io.flutter.plugins.webviewflutter.JavaScriptChannel: io.flutter.plugins.webviewflutter.JavaScriptChannelProxyApi api
io.flutter.plugin.platform.PlatformViewWrapper: int top
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] $VALUES
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1: io.flutter.plugin.common.BinaryMessenger$BinaryReply val$callback
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.app.FlutterPluginRegistry: java.util.List mUserLeaveHintListeners
io.flutter.plugin.text.ProcessTextPlugin: java.util.Map requestsByCode
io.flutter.plugin.common.StandardMethodCodec: io.flutter.plugin.common.StandardMethodCodec INSTANCE
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType kDirectionalPad
androidx.fragment.app.Fragment$SavedState: android.os.Parcelable$Creator CREATOR
io.flutter.app.FlutterActivityDelegate: java.lang.String TAG
io.flutter.view.VsyncWaiter: long refreshPeriodNanos
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int source
io.flutter.plugins.webviewflutter.FlutterViewFactory$1: io.flutter.plugins.webviewflutter.FlutterViewFactory this$0
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: java.lang.String[] hints
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: float xPrecision
io.flutter.plugin.editing.ListenableEditingState: int mBatchEditNestDepth
io.flutter.embedding.engine.systemchannels.SpellCheckChannel: java.lang.String TAG
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.renderer.FlutterRenderer renderer
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int deferredInsetTypes
io.flutter.embedding.engine.systemchannels.NavigationChannel: java.lang.String TAG
io.flutter.plugins.urllauncher.WebViewActivity: android.content.IntentFilter closeIntentFilter
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature BOLD_TEXT
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: java.lang.String initialRoute
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean CLEANUP_ON_MEMORY_PRESSURE
io.flutter.embedding.engine.systemchannels.ProcessTextChannel: java.lang.String CHANNEL_NAME
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: android.app.Activity thisActivity
io.flutter.plugins.sharedpreferences.SharedPreferencesPluginKt: java.lang.String LIST_PREFIX
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.EditorInfo mEditorInfo
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1: kotlinx.coroutines.flow.Flow $this_unsafeTransform$inlined
androidx.fragment.app.Fragment: androidx.lifecycle.MutableLiveData mViewLifecycleOwnerLiveData
io.flutter.view.VsyncWaiter$FrameCallback: io.flutter.view.VsyncWaiter this$0
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate delegate
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: boolean destroyEngineWithFragment
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NAME
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String DEFAULT_LIBRARY
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: java.util.Set onUserLeaveHintListeners
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_VERBOSE_LOGGING
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: android.media.ImageReader reader
io.flutter.view.AccessibilityBridge$StringAttribute: int start
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: java.lang.Class fragmentClass
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides BOTH
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean isWaitingForActivityReattachment
io.flutter.app.FlutterApplication: android.app.Activity mCurrentActivity
io.flutter.view.AccessibilityBridge$4: android.view.accessibility.AccessibilityManager val$accessibilityManager
io.flutter.plugins.webviewflutter.DisplayListenerProxy$1: android.hardware.display.DisplayManager val$displayManager
io.flutter.plugin.common.MethodChannel$IncomingResultHandler: io.flutter.plugin.common.MethodChannel this$0
io.flutter.embedding.engine.systemchannels.RestorationChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler handler
io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: boolean returnValueForOnJsPrompt
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String VMSERVICE_SNAPSHOT_LIBRARY
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1: io.flutter.view.FlutterView$SurfaceTextureRegistryEntry this$1
io.flutter.plugins.sharedpreferences.Messages$FlutterError: java.lang.String code
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType MEDIUM_IMPACT
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets flutterAssets
io.flutter.embedding.engine.FlutterJNI: boolean loadLibraryCalled
io.flutter.view.FlutterView: io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener
io.flutter.embedding.android.FlutterView: io.flutter.view.AccessibilityBridge accessibilityBridge
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: java.lang.String TAG
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry: java.util.Map pluginMap
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode transparent
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_FOCUSED
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int flags
androidx.fragment.app.Fragment: int AWAITING_EXIT_EFFECTS
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type VIRTUAL_DISPLAY_PLATFORM_VIEW
io.flutter.embedding.android.FlutterView$4: io.flutter.embedding.android.FlutterView this$0
androidx.fragment.app.Fragment: int mFragmentId
io.flutter.view.FlutterView: boolean didRenderFirstFrame
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: boolean shouldDelayFirstAndroidViewDraw
io.flutter.embedding.engine.dart.DartMessenger: int nextReplyId
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String DEFAULT_VM_SNAPSHOT_DATA
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_HEADER
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] $VALUES
io.flutter.embedding.engine.loader.ResourceExtractor: io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask mExtractTask
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener accessibilityStateChangeListener
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int id
io.flutter.plugin.common.MethodChannel: io.flutter.plugin.common.MethodCodec codec
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _exceptionsHolder
io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient: io.flutter.plugins.urllauncher.WebViewActivity this$0
io.flutter.plugin.common.StandardMessageCodec: java.nio.charset.Charset UTF8
io.flutter.plugins.webviewflutter.FileChooserMode: io.flutter.plugins.webviewflutter.FileChooserMode OPEN
io.flutter.plugins.webviewflutter.PigeonApiWebView: io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion Companion
kotlinx.coroutines.EventLoopImplBase: int _isCompleted
androidx.fragment.app.Fragment: java.lang.Boolean mIsPrimaryNavigationFragment
io.flutter.embedding.android.FlutterView: io.flutter.plugin.mouse.MouseCursorPlugin mouseCursorPlugin
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String nativeLibraryDir
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: androidx.concurrent.futures.AbstractResolvableFuture$Waiter next
io.flutter.embedding.android.MotionEventTracker$MotionEventId: java.util.concurrent.atomic.AtomicLong ID_COUNTER
io.flutter.plugins.webviewflutter.ResultCompat: java.lang.Throwable exception
androidx.fragment.app.Fragment: int mContentLayoutId
io.flutter.embedding.engine.systemchannels.ProcessTextChannel: io.flutter.plugin.common.MethodChannel channel
io.flutter.plugin.text.ProcessTextPlugin: io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityBinding
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode[] $VALUES
kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object _next
io.flutter.embedding.engine.plugins.util.GeneratedPluginRegister: java.lang.String TAG
io.flutter.plugin.editing.SpellCheckPlugin: android.view.textservice.TextServicesManager mTextServicesManager
io.flutter.embedding.android.FlutterFragmentActivity: io.flutter.embedding.android.FlutterFragment flutterFragment
io.flutter.embedding.engine.FlutterEngineGroup$Options: io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint dartEntrypoint
io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder: java.util.List dartEntrypointArgs
io.flutter.embedding.engine.dart.DartMessenger: java.util.concurrent.atomic.AtomicBoolean enableBufferingIncomingMessages
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.TransparencyMode transparencyMode
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1: java.lang.Object L$0
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: java.util.HashMap weakReferencesToIdentifiers
org.chromium.support_lib_boundary.ProcessGlobalConfigConstants: java.lang.String CACHE_DIRECTORY_BASE_PATH
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: android.util.SparseArray sessionIdToName
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode opaque
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: java.lang.String encodedName
io.flutter.plugins.imagepicker.ImagePickerCache$CacheType: io.flutter.plugins.imagepicker.ImagePickerCache$CacheType VIDEO
io.flutter.plugin.platform.PlatformViewsController: io.flutter.view.TextureRegistry textureRegistry
androidx.fragment.app.FragmentState: android.os.Parcelable$Creator CREATOR
io.flutter.view.AccessibilityBridge: io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler accessibilityMessageHandler
io.flutter.plugin.editing.TextInputPlugin: io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: java.lang.Object rawPointerCoords
androidx.fragment.app.Fragment: int mBackStackNesting
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_START_PAUSED
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: kotlin.enums.EnumEntries $ENTRIES
io.flutter.embedding.android.KeyEmbedderResponder: java.util.HashMap togglingGoals
io.flutter.embedding.engine.dart.DartMessenger: java.lang.String TAG
io.flutter.plugins.webviewflutter.PigeonApiCookieManager: io.flutter.plugins.webviewflutter.PigeonApiCookieManager$Companion Companion
io.flutter.embedding.engine.systemchannels.NavigationChannel$1: io.flutter.embedding.engine.systemchannels.NavigationChannel this$0
io.flutter.embedding.engine.FlutterEngineGroup$Options: java.lang.String initialRoute
io.flutter.embedding.android.KeyboardMap$KeyPair: long logicalKey
io.flutter.embedding.android.KeyEmbedderResponder: java.util.HashMap pressingRecords
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState[] $VALUES
io.flutter.embedding.android.KeyEmbedderResponder$1: int[] $SwitchMap$io$flutter$embedding$android$KeyData$Type
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String SHARED_PREFERENCES_NAME
io.flutter.embedding.engine.loader.FlutterLoader: long initStartTimestampMillis
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: java.util.Set onWindowFocusChangedListeners
io.flutter.embedding.engine.dart.DartMessenger: java.util.WeakHashMap createdTaskQueues
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDeprecatedStringList$1: java.lang.String $valueString
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int systemGestureInsetTop
io.flutter.embedding.android.AndroidTouchProcessor: int cachedVerticalScrollFactor
androidx.fragment.app.Fragment: boolean mBeingSaved
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1$1: java.lang.Object L$0
androidx.core.content.FileProvider: java.lang.String TAG_EXTERNAL_CACHE
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String NORMAL_THEME_META_DATA_KEY
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState editState
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String SHARED_PREFERENCE_TYPE_KEY
androidx.fragment.app.Fragment: android.view.LayoutInflater mLayoutInflater
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState: io.flutter.plugin.common.BinaryMessenger messenger
io.flutter.view.FlutterView: io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1$1: java.lang.Object L$0
androidx.datastore.preferences.PreferencesProto$Value: androidx.datastore.preferences.protobuf.Parser PARSER
androidx.fragment.app.Fragment: java.lang.String mWho
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NUMBER
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions$Builder: java.lang.Long quality
io.flutter.plugin.platform.VirtualDisplayController: android.view.View$OnFocusChangeListener focusChangeListener
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SettingsChannel settingsChannel
androidx.webkit.WebViewClientCompat: java.lang.String[] sSupportedFeatures
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getAll$1: java.util.List $allowList
io.flutter.embedding.engine.FlutterEngineGroupCache: io.flutter.embedding.engine.FlutterEngineGroupCache instance
io.flutter.view.AccessibilityBridge: int ACTION_SHOW_ON_SCREEN
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: int composingEnd
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel: io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel$Companion Companion
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2 this$0
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState POSTURE_FLAT
androidx.activity.ComponentActivity: androidx.activity.ComponentActivity$ReportFullyDrawnExecutor reportFullyDrawnExecutor
androidx.fragment.app.Fragment: boolean mUserVisibleHint
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String AOT_SHARED_LIBRARY_NAME
io.flutter.view.FlutterNativeView$1: io.flutter.view.FlutterNativeView this$0
io.flutter.FlutterInjector$Builder: java.util.concurrent.ExecutorService executorService
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousActions
io.flutter.embedding.engine.systemchannels.RestorationChannel$1: io.flutter.embedding.engine.systemchannels.RestorationChannel this$0
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_DART_ENTRYPOINT
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager: io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager$Companion Companion
io.flutter.plugins.urllauncher.Messages$BrowserOptions: java.lang.Boolean showTitle
io.flutter.view.FlutterView$ViewportMetrics: int physicalViewPaddingTop
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String SHARED_PREFERENCE_ERROR_CODE_KEY
io.flutter.Build$API_LEVELS: int API_34
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_IN_MUTUALLY_EXCLUSIVE_GROUP
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int HOVER
io.flutter.plugin.editing.FlutterTextUtils: int COMBINING_ENCLOSING_KEYCAP
io.flutter.embedding.android.FlutterView: io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener
kotlinx.coroutines.sync.MutexImpl: java.lang.Object owner
kotlinx.coroutines.sync.SemaphoreImpl: long enqIdx
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler this$1
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action DISMISS
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int edgeFlags
io.flutter.plugin.editing.SpellCheckPlugin: io.flutter.embedding.engine.systemchannels.SpellCheckChannel mSpellCheckChannel
io.flutter.plugin.platform.PlatformViewsController: java.util.HashSet currentFrameUsedOverlayLayerIds
androidx.fragment.app.Fragment: int AWAITING_ENTER_EFFECTS
io.flutter.plugin.platform.PlatformPlugin$1: io.flutter.plugin.platform.PlatformPlugin this$0
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: java.lang.String dartEntrypointFunctionName
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: io.flutter.plugins.webviewflutter.PigeonApiWebViewClient$Companion Companion
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String PUBLIC_AOT_SHARED_LIBRARY_NAME
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: io.flutter.plugins.webviewflutter.WebViewClientProxyApi api
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: long id
io.flutter.plugin.editing.ListenableEditingState$1: io.flutter.plugin.editing.ListenableEditingState this$0
io.flutter.plugin.text.ProcessTextPlugin: java.lang.String TAG
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind[] $VALUES
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: java.util.List paths
io.flutter.app.FlutterPluginRegistry: io.flutter.view.FlutterNativeView mNativeView
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: java.util.Map broadcastReceiverAwarePlugins
io.flutter.Build$API_LEVELS: int API_29
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag HAS_CHECKED_STATE
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View view
androidx.activity.result.ActivityResult: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader: java.util.ArrayDeque imageQueue
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onLongPressOverride
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature DISABLE_ANIMATIONS
io.flutter.plugin.platform.VirtualDisplayController: android.hardware.display.VirtualDisplay$Callback callback
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides NONE
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String AUTOMATICALLY_REGISTER_PLUGINS_KEY
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int PAN_ZOOM_END
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$WebViewMediaIntegrityApiStatus: int ENABLED_WITHOUT_APP_IDENTITY
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: android.content.Context context
io.flutter.plugin.editing.SpellCheckPlugin: java.lang.String END_INDEX_KEY
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: java.lang.String encodedName
io.flutter.plugins.sharedpreferences.Messages$FlutterError: java.lang.Object details
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_MULTILINE
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$FeatureInstallStateUpdatedListener: io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager this$0
androidx.core.content.FileProvider: androidx.core.content.FileProvider$PathStrategy mLocalPathStrategy
io.flutter.FlutterInjector$Builder: io.flutter.embedding.engine.FlutterJNI$Factory flutterJniFactory
io.flutter.embedding.android.FlutterSurfaceView$1: io.flutter.embedding.android.FlutterSurfaceView this$0
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: com.google.android.play.core.splitinstall.SplitInstallManager splitInstallManager
androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState: android.os.Parcelable$Creator CREATOR
io.flutter.view.FlutterView$ViewportMetrics: int physicalViewInsetLeft
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _removedRef
androidx.datastore.preferences.protobuf.GeneratedMessageLite: int MEMOIZED_SERIALIZED_SIZE_MASK
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: boolean shouldAttachEngineToActivity
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: long id
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor
io.flutter.app.FlutterActivity: io.flutter.app.FlutterActivityDelegate delegate
androidx.fragment.app.Fragment: boolean mPerformedCreateView
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: io.flutter.view.TextureRegistry$ImageTextureEntry textureEntry
io.flutter.embedding.engine.systemchannels.KeyboardChannel$1: io.flutter.embedding.engine.systemchannels.KeyboardChannel this$0
io.flutter.plugin.editing.SpellCheckPlugin: android.view.textservice.SpellCheckerSession mSpellCheckerSession
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener: io.flutter.plugins.webviewflutter.PigeonApiDownloadListener$Companion Companion
io.flutter.plugins.urllauncher.BuildConfig: java.lang.String LIBRARY_PACKAGE_NAME
io.flutter.plugin.editing.TextInputPlugin$2: io.flutter.plugin.editing.TextInputPlugin this$0
io.flutter.embedding.android.AndroidTouchProcessor: boolean trackMotionEvents
io.flutter.plugins.imagepicker.ImagePickerDelegate: int REQUEST_CODE_CHOOSE_IMAGE_FROM_GALLERY
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: java.util.concurrent.atomic.AtomicReference activeSink
io.flutter.plugin.editing.InputConnectionAdaptor: java.lang.String TAG
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: android.util.SparseIntArray sessionIdToLoadingUnitId
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_CACHED_ENGINE_GROUP_ID
io.flutter.view.FlutterView$ViewportMetrics: int physicalWidth
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind: int TRACKPAD
io.flutter.plugin.editing.TextInputPlugin: android.view.autofill.AutofillManager afm
io.flutter.plugin.platform.VirtualDisplayController$2: io.flutter.plugin.platform.VirtualDisplayController this$0
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1$1: java.lang.Object L$0
androidx.fragment.app.Fragment: java.util.ArrayList mOnPreAttachedListeners
io.flutter.app.FlutterPluginRegistry: java.util.Map mPluginMap
io.flutter.plugins.webviewflutter.AndroidWebKitError: java.lang.String code
io.flutter.plugins.imagepicker.Messages$CacheRetrievalType: io.flutter.plugins.imagepicker.Messages$CacheRetrievalType IMAGE
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1$1: java.lang.Object L$0
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature ACCESSIBLE_NAVIGATION
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_KEYBOARD_KEY
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: android.util.SparseArray loadingUnitIdToSharedLibraryNames
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag HAS_IMPLICIT_SCROLLING
io.flutter.plugins.imagepicker.ImagePickerDelegate$MediaPath: java.lang.String path
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: io.flutter.view.TextureRegistry$SurfaceTextureEntry texture
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay BOTTOM_OVERLAYS
io.flutter.embedding.engine.systemchannels.RestorationChannel: byte[] restorationData
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String HANDLE_DEEPLINKING_META_DATA_KEY
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String EXTRA_CACHED_ENGINE_ID
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: double logicalHeight
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: android.view.View mView
io.flutter.view.FlutterRunArguments: java.lang.String libraryPath
io.flutter.plugins.urllauncher.Messages$WebViewOptions$Builder: java.lang.Boolean enableDomStorage
io.flutter.plugins.urllauncher.WebViewActivity: android.webkit.WebView webview
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType FOLD
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.String DOUBLE_PREFIX
io.flutter.embedding.engine.systemchannels.SettingsChannel: java.lang.String ALWAYS_USE_24_HOUR_FORMAT
io.flutter.plugin.editing.ListenableEditingState: int mSelectionEndWhenBeginBatchEdit
kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type[] $VALUES
io.flutter.view.AccessibilityBridge: int FIRST_RESOURCE_ID
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.BinaryMessenger messenger
io.flutter.plugins.imagepicker.ImagePickerCache$CacheType: io.flutter.plugins.imagepicker.ImagePickerCache$CacheType[] $VALUES
androidx.transition.ChangeBounds$7: androidx.transition.ChangeBounds$ViewBounds mViewBounds
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow
io.flutter.embedding.android.AndroidTouchProcessor$PointerChange: int PAN_ZOOM_UPDATE
io.flutter.embedding.android.KeyboardMap$1: long serialVersionUID
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: int left
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.plugin.platform.PlatformPlugin platformPlugin
io.flutter.embedding.android.AndroidTouchProcessor: int POINTER_DATA_FIELD_COUNT
io.flutter.Build$API_LEVELS: int API_35
kotlinx.coroutines.sync.SemaphoreImpl: int _availablePermits
io.flutter.embedding.engine.renderer.FlutterRenderer: boolean debugDisableSurfaceClear
io.flutter.embedding.android.FlutterFragment: java.lang.String ARG_FLUTTERVIEW_RENDER_MODE
io.flutter.plugin.editing.ListenableEditingState: java.util.ArrayList mListeners
io.flutter.plugins.webviewflutter.ResultCompat: java.lang.Object value
io.flutter.plugins.webviewflutter.AndroidWebKitError: java.lang.Object details
androidx.fragment.app.Fragment: boolean mDetached
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag HAS_ENABLED_STATE
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String DEFAULT_INITIAL_ROUTE
io.flutter.embedding.engine.systemchannels.LocalizationChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler handler
io.flutter.embedding.engine.systemchannels.RestorationChannel: io.flutter.plugin.common.MethodChannel$Result pendingFrameworkRestorationChannelRequest
io.flutter.embedding.android.KeyData: java.lang.String CHANNEL
io.flutter.plugins.urllauncher.Messages$WebViewOptions: java.lang.Boolean enableJavaScript
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState POSTURE_HALF_OPENED
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.String JSON_LIST_IDENTIFIER
io.flutter.embedding.android.AndroidTouchProcessor: android.graphics.Matrix IDENTITY_TRANSFORM
io.flutter.plugin.platform.PlatformViewsController: java.util.HashMap contextToEmbeddedView
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_TRACE_STARTUP
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: io.flutter.plugin.common.BinaryMessenger$BinaryReply val$reply
io.flutter.plugin.platform.PlatformPlugin: io.flutter.plugin.platform.PlatformPlugin$PlatformPluginDelegate platformPluginDelegate
androidx.datastore.preferences.PreferencesProto$PreferenceMap: androidx.datastore.preferences.PreferencesProto$PreferenceMap DEFAULT_INSTANCE
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment mParentFragment
io.flutter.embedding.engine.FlutterEngineCache: java.util.Map cachedEngines
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: java.lang.String encodedName
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder: boolean isEventHandled
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface$ForceDarkBehavior: int MEDIA_QUERY_ONLY
io.flutter.embedding.engine.systemchannels.ProcessTextChannel: android.content.pm.PackageManager packageManager
io.flutter.plugins.webviewflutter.PigeonApiWebResourceErrorCompat: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.embedding.android.KeyboardMap$TogglingGoal: long logicalKey
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getKeys$prefs$1: io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin this$0
io.flutter.plugins.sharedpreferences.StringListLookupResultType: int raw
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: java.util.Map message
io.flutter.view.FlutterNativeView: io.flutter.embedding.engine.dart.DartExecutor dartExecutor
kotlinx.coroutines.scheduling.WorkQueue: int producerIndex
io.flutter.embedding.android.AndroidTouchProcessor$PointerDeviceKind: int INVERTED_STYLUS
io.flutter.plugins.sharedpreferences.StringListLookupResultType: io.flutter.plugins.sharedpreferences.StringListLookupResultType[] $VALUES
io.flutter.embedding.engine.FlutterEngineGroup$1: io.flutter.embedding.engine.FlutterEngineGroup this$0
io.flutter.plugins.webviewflutter.PigeonApiWebResourceError: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: boolean hasFinalizationListenerStopped
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$1: io.flutter.plugin.common.BasicMessageChannel$Reply val$reply
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness dark
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder: java.lang.Class activityClass
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.engine.FlutterEngine flutterEngine
io.flutter.embedding.android.AndroidTouchProcessor$PointerSignalKind: int UNKNOWN
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag SCOPES_ROUTE
io.flutter.embedding.engine.systemchannels.LifecycleChannel: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState lastAndroidState
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDeprecatedStringList$1: int label
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: java.lang.String encodedName
kotlinx.coroutines.scheduling.WorkQueue: int blockingTasksInBuffer
io.flutter.plugin.common.EventChannel: java.lang.String name
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2: kotlinx.coroutines.flow.FlowCollector $this_unsafeFlow
io.flutter.embedding.engine.systemchannels.KeyboardChannel: io.flutter.embedding.engine.systemchannels.KeyboardChannel$KeyboardMethodHandler keyboardMethodHandler
androidx.fragment.app.Fragment: boolean mRemoving
androidx.activity.ComponentActivity: androidx.core.view.MenuHostHelper menuHostHelper
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest: double newLogicalHeight
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: java.lang.String TAG
io.flutter.embedding.engine.dart.DartMessenger$HandlerInfo: io.flutter.embedding.engine.dart.DartMessenger$DartMessengerTaskQueue taskQueue
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _parentHandle
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.plugins.webviewflutter.PigeonApiView: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar pigeonRegistrar
io.flutter.embedding.android.FlutterImageView: android.media.Image currentImage
io.flutter.view.AccessibilityViewEmbedder: int nextFlutterId
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugin.common.MessageCodec _codec
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: java.lang.String cachedEngineGroupId
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_ENDLESS_TRACE_BUFFER
io.flutter.plugin.editing.SpellCheckPlugin: int MAX_SPELL_CHECK_SUGGESTIONS
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type kUp
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String SHARED_PREFERENCE_IMAGE_QUALITY_KEY
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1: kotlin.jvm.internal.Ref$ObjectRef $value
io.flutter.embedding.engine.dart.DartMessenger$ConcurrentTaskQueue: java.util.concurrent.ExecutorService executor
androidx.core.content.FileProvider: java.lang.String ATTR_PATH
androidx.datastore.preferences.PreferencesProto$StringSet: androidx.datastore.preferences.protobuf.Internal$ProtobufList strings_
io.flutter.embedding.android.FlutterActivityLaunchConfigs: java.lang.String DEFAULT_DART_ENTRYPOINT
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SCROLL_LEFT
io.flutter.plugin.platform.PlatformViewsController: android.content.Context context
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType URL
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: java.util.Map contentProviderAwarePlugins
androidx.fragment.app.Fragment: int VIEW_CREATED
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int MAX_IMAGES
io.flutter.view.AccessibilityBridge$SemanticsNode: int platformViewId
io.flutter.plugin.platform.PlatformPlugin: java.lang.String TAG
io.flutter.view.FlutterView: io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType LIGHT_IMPACT
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String ARG_KEY_TRACE_TO_FILE
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: java.lang.String dartEntrypoint
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String MAP_TYPE_VALUE_VIDEO
io.flutter.view.AccessibilityBridge: float SCROLL_EXTENT_FOR_INFINITY
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String ENABLE_VULKAN_VALIDATION_META_DATA_KEY
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: int bufferWidth
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener engineLifecycleListener
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback getPigeonApiGeolocationPermissionsCallback()
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: java.util.Map getWebViewMediaIntegrityApiOverrideRules()
io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler: void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.plugin.common.BinaryMessenger$TaskQueue makeBackgroundTaskQueue(io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions)
io.flutter.plugins.imagepicker.ImagePickerCache: void saveType(io.flutter.plugins.imagepicker.ImagePickerCache$CacheType)
io.flutter.plugin.platform.PlatformViewRenderTarget: void resize(int,int)
io.flutter.plugins.webviewflutter.PigeonApiCookieManager$Companion: kotlin.Unit setUpMessageHandlers$lambda$6$lambda$5$lambda$4(io.flutter.plugin.common.BasicMessageChannel$Reply,kotlin.Result)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler: void clearFocus(int)
io.flutter.view.AccessibilityBridge: boolean getAccessibleNavigation()
androidx.fragment.app.DefaultSpecialEffectsController$Api26Impl: void setCurrentPlayTime(android.animation.AnimatorSet,long)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
io.flutter.embedding.android.FlutterActivity: void onActivityResult(int,int,android.content.Intent)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: java.util.List getKeys(java.util.List,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.embedding.engine.dart.DartMessenger: void lambda$dispatchMessageToQueue$0(java.lang.String,int,io.flutter.embedding.engine.dart.DartMessenger$HandlerInfo,java.nio.ByteBuffer,long)
io.flutter.view.TextureRegistry$SurfaceTextureEntry$-CC: void $default$setOnTrimMemoryListener(io.flutter.view.TextureRegistry$SurfaceTextureEntry,io.flutter.view.TextureRegistry$OnTrimMemoryListener)
io.flutter.plugins.imagepicker.ImagePickerDelegate$1: boolean isPermissionGranted(java.lang.String)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onStop()
io.flutter.embedding.engine.loader.FlutterLoader$Settings: java.lang.String getLogTag()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.embedding.android.FlutterSurfaceView: void access$400(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.plugins.webviewflutter.CookieManagerProxyApi: CookieManagerProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.embedding.android.FlutterFragment: void onDestroyView()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onShowCustomView(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,android.view.View,android.webkit.WebChromeClient$CustomViewCallback,kotlin.jvm.functions.Function1)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$4100(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugin.platform.SingleViewWindowManager: void addCrossWindowBlurEnabledListener(java.util.function.Consumer)
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type valueOf(java.lang.String)
io.flutter.view.FlutterView: boolean onTextInputKeyEvent(android.view.KeyEvent)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.renderer.FlutterRenderer getRenderer()
io.flutter.embedding.android.FlutterFragmentActivity: void cleanUpFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
io.flutter.plugins.imagepicker.ImagePickerUtils: ImagePickerUtils()
io.flutter.view.FlutterView: void removeFirstFrameListener(io.flutter.view.FlutterView$FirstFrameListener)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi: void setSynchronousReturnValueForOnJsPrompt(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,boolean)
androidx.fragment.app.Fragment: void performPictureInPictureModeChanged(boolean)
io.flutter.embedding.engine.systemchannels.RestorationChannel: boolean access$200(io.flutter.embedding.engine.systemchannels.RestorationChannel)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler$-CC: void $default$setFrameworkHandlesBack(io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler,boolean)
androidx.appcompat.widget.ActionBarContainer: ActionBarContainer(android.content.Context,android.util.AttributeSet)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient: WebChromeClientProxyApi$SecureWebChromeClient()
io.flutter.plugin.platform.PlatformPlugin$2: PlatformPlugin$2(io.flutter.plugin.platform.PlatformPlugin,android.view.View)
io.flutter.plugins.webviewflutter.PigeonApiWebView: io.flutter.plugins.webviewflutter.PigeonApiView pigeon_getPigeonApiView()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void cancelBackGesture()
io.flutter.FlutterInjector$Builder: FlutterInjector$Builder()
io.flutter.embedding.android.FlutterFragment: void onFlutterUiNoLongerDisplayed()
io.flutter.embedding.android.FlutterActivity: android.app.Activity getActivity()
io.flutter.plugin.editing.ListenableEditingState: void addEditingStateListener(io.flutter.plugin.editing.ListenableEditingState$EditingStateWatcher)
io.flutter.embedding.engine.renderer.RenderSurface: void detachFromRenderer()
androidx.lifecycle.LegacySavedStateHandleController$OnRecreation: LegacySavedStateHandleController$OnRecreation()
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler: void cancel(android.webkit.HttpAuthHandler)
io.flutter.plugins.webviewflutter.PigeonApiView$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2100(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.FlutterView: io.flutter.plugin.common.BinaryMessenger$TaskQueue makeBackgroundTaskQueue(io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions)
io.flutter.embedding.engine.systemchannels.PlatformChannel: void setPlatformMessageHandler(io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: AccessibilityViewEmbedder$ReflectionAccessors()
io.flutter.plugin.common.BasicMessageChannel$MessageHandler: void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int getHeight()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
androidx.appcompat.widget.ViewStubCompat: android.view.LayoutInflater getLayoutInflater()
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.Boolean setBool(java.lang.String,java.lang.Boolean)
io.flutter.embedding.engine.dart.DartExecutor: void notifyLowMemoryWarning()
io.flutter.FlutterInjector$Builder: void fillDefaults()
androidx.appcompat.widget.ButtonBarLayout: int getMinimumHeight()
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getChildFragmentManager()
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager$Companion: PigeonApiFlutterAssetManager$Companion()
io.flutter.embedding.engine.FlutterJNI: void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
io.flutter.embedding.engine.FlutterEngine$1: void onEngineWillDestroy()
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: boolean getWillSuppressErrorPage()
io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.view.FlutterView: void disableBufferingIncomingMessages()
androidx.fragment.app.Fragment: boolean isResumed()
io.flutter.plugins.webviewflutter.WebResourceErrorProxyApi: WebResourceErrorProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions: Messages$VideoSelectionOptions()
io.flutter.plugin.platform.PlatformViewRenderTarget: boolean isReleased()
androidx.window.layout.adapter.sidecar.SidecarCompat: void setExtensionCallback(androidx.window.layout.adapter.sidecar.ExtensionInterfaceCompat$ExtensionCallbackInterface)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$ItemAnimator getItemAnimator()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTint(android.graphics.drawable.Drawable,int)
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,io.flutter.embedding.android.RenderMode,io.flutter.embedding.android.TransparencyMode)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void setSynchronousReturnValueForOnShowFileChooser(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,boolean)
io.flutter.plugins.urllauncher.WebViewActivity: WebViewActivity()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addViewDestroyListener(io.flutter.plugin.common.PluginRegistry$ViewDestroyListener)
io.flutter.embedding.engine.systemchannels.LifecycleChannel: LifecycleChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.plugin.editing.TextInputPlugin: boolean composingChanged(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
androidx.core.app.RemoteActionCompat: RemoteActionCompat()
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: AccessibilityViewEmbedder$ViewAndId(android.view.View,int)
io.flutter.plugins.imagepicker.FileUtils: java.lang.String getBaseName(java.lang.String)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$5500(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugins.webviewflutter.WebResourceResponseProxyApi: WebResourceResponseProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.view.AccessibilityBridge: boolean lambda$shouldSetCollectionInfo$0(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$13(kotlin.Result)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: kotlin.Unit lambda$onPageFinished$2(kotlin.Result)
androidx.fragment.app.Fragment: void setPostOnViewCreatedAlpha(float)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: boolean shouldRestoreAndSaveState()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void lambda$doUpdateVisitedHistory$15(android.webkit.WebView,java.lang.String,boolean)
io.flutter.app.FlutterActivityDelegate: FlutterActivityDelegate(android.app.Activity,io.flutter.app.FlutterActivityDelegate$ViewFactory)
io.flutter.embedding.engine.dart.DartExecutor: void onAttachedToJNI()
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: void setReturnValueForOnShowFileChooser(boolean)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi$-CC: void setUp(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi)
io.flutter.view.AccessibilityBridge: boolean isImportant(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugin.editing.FlutterTextUtils: boolean isTagSpecChar(int)
io.flutter.plugins.webviewflutter.WebViewProxyApi: java.lang.String getTitle(android.webkit.WebView)
io.flutter.plugins.imagepicker.ImagePickerDelegate$PermissionManager: boolean needRequestCameraPermission()
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler: void onLongPress(int)
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream: StandardMessageCodec$ExposedByteArrayOutputStream()
io.flutter.plugins.GeneratedPluginRegistrant: GeneratedPluginRegistrant()
io.flutter.plugin.platform.VirtualDisplayController$1: void onPaused()
io.flutter.embedding.android.FlutterView: boolean isAttachedToFlutterEngine()
io.flutter.util.TraceSection: void endAsyncSection(java.lang.String,int)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: void setEncodedStringList(java.lang.String,java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.app.FlutterPluginRegistry: void onUserLeaveHint()
io.flutter.plugins.webviewflutter.PigeonApiWebView: void setWebContentsDebuggingEnabled(boolean)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewBufferSize: PlatformViewsChannel$PlatformViewBufferSize(int,int)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: boolean getBackForwardCacheEnabled()
io.flutter.app.FlutterFragmentActivity: void onPostResume()
androidx.core.view.WindowInsetsCompat$Impl20: void loadReflectionField()
io.flutter.view.FlutterView: void pushRoute(java.lang.String)
io.flutter.embedding.android.FlutterFragment: boolean isFlutterEngineInjected()
io.flutter.plugin.platform.PlatformPlugin: void updateSystemUiOverlays()
kotlinx.coroutines.android.AndroidDispatcherFactory: AndroidDispatcherFactory()
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: java.lang.String getUserAgentString(android.webkit.WebSettings)
androidx.activity.ComponentActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)
io.flutter.plugins.webviewflutter.WebViewProxyApi: boolean canGoBack(android.webkit.WebView)
io.flutter.plugin.editing.FlutterTextUtils: boolean isEmoji(int)
io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader getOrCreatePerImageReader(android.media.ImageReader)
io.flutter.plugin.platform.PlatformViewsController: boolean access$700(io.flutter.plugin.platform.PlatformViewsController)
io.flutter.plugin.common.PluginRegistry$Registrar: android.content.Context context()
androidx.appcompat.widget.ActionMenuView: void setExpandedActionViewsExclusive(boolean)
io.flutter.embedding.engine.plugins.activity.ActivityAware: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.view.FlutterView: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context)
org.chromium.support_lib_boundary.WebResourceErrorBoundaryInterface: java.lang.CharSequence getDescription()
androidx.appcompat.widget.LinearLayoutCompat: int getShowDividers()
androidx.core.view.ViewCompat$Api26Impl: boolean hasExplicitFocusable(android.view.View)
io.flutter.plugin.editing.ListenableEditingState: ListenableEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState,android.view.View)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: void setReturnValueForOnJsAlert(boolean)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: PlatformChannel$SystemUiOverlay(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.FlutterEngine: boolean isAttachedToJni()
io.flutter.embedding.engine.loader.ResourceExtractor: void waitForCompletion()
androidx.core.graphics.drawable.IconCompat$Api30Impl: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)
io.flutter.embedding.engine.FlutterJNI: void markTextureFrameAvailable(long)
io.flutter.embedding.android.FlutterView: android.view.View findViewByAccessibilityIdTraversal(int)
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: android.app.Activity getActivity()
io.flutter.plugins.webviewflutter.HttpAuthHandlerProxyApi: HttpAuthHandlerProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setForceDark(int)
io.flutter.plugins.sharedpreferences.StringListLookupResultType: StringListLookupResultType(java.lang.String,int,int)
io.flutter.plugin.common.StandardMessageCodec: java.lang.Object readValue(java.nio.ByteBuffer)
io.flutter.embedding.android.FlutterFragmentActivity: void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onGeolocationPermissionsShowPrompt$lambda$6(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: void lambda$installDeferredComponent$1(int,java.lang.String,java.lang.Exception)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebResourceErrorCompat getPigeonApiWebResourceErrorCompat()
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler: void announce(java.lang.String)
io.flutter.embedding.engine.dart.DartMessenger$SerialTaskQueue: void lambda$flush$1()
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2600(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugin.common.BinaryMessenger$-CC: void $default$disableBufferingIncomingMessages(io.flutter.plugin.common.BinaryMessenger)
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.Boolean setEncodedStringList(java.lang.String,java.lang.String)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: void stopFinalizationListener()
io.flutter.embedding.android.FlutterTextureView$1: void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)
androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: java.util.Set getRequestedWithHeaderOriginAllowList()
io.flutter.embedding.engine.FlutterEngineCache: FlutterEngineCache()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void lambda$resize$0(io.flutter.plugin.common.MethodChannel$Result,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewBufferSize)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: io.flutter.embedding.android.RenderMode getRenderMode()
io.flutter.embedding.android.FlutterView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
io.flutter.embedding.engine.FlutterJNI: void updateDisplayMetrics(int,float,float,float)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType[] values()
io.flutter.embedding.android.FlutterFragment: void onFlutterUiDisplayed()
io.flutter.plugins.webviewflutter.WebViewProxyApi: void postUrl(android.webkit.WebView,java.lang.String,byte[])
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.view.TextureRegistry textures()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: ImeSyncDeferringInsetsCallback$AnimationCallback(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.app.FlutterFragmentActivity: io.flutter.view.FlutterNativeView createFlutterNativeView()
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$1: Messages$ImagePickerApi$1(java.util.ArrayList,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler: java.lang.String getStringResource(java.lang.String,java.lang.String)
io.flutter.embedding.engine.dart.DartMessenger: void enableBufferingIncomingMessages()
org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setAllowFileAccess(boolean)
io.flutter.embedding.engine.systemchannels.KeyboardChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.appcompat.widget.AppCompatImageView: android.graphics.PorterDuff$Mode getSupportImageTintMode()
io.flutter.embedding.engine.FlutterShellArgs: io.flutter.embedding.engine.FlutterShellArgs fromIntent(android.content.Intent)
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.embedding.engine.FlutterEngine getFlutterEngine()
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: java.lang.Double getDouble(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.appcompat.widget.ActionBarContainer: void setTabContainer(androidx.appcompat.widget.ScrollingTabContainerView)
androidx.appcompat.widget.LinearLayoutCompat: void setGravity(int)
androidx.appcompat.widget.Toolbar: void setOverflowIcon(android.graphics.drawable.Drawable)
io.flutter.embedding.android.FlutterActivity: void onFlutterTextureViewCreated(io.flutter.embedding.android.FlutterTextureView)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api30Impl: java.lang.CharSequence getStateDescription(android.view.accessibility.AccessibilityNodeInfo)
io.flutter.plugin.platform.PlatformViewsController: void detachFromView()
io.flutter.plugins.webviewflutter.PigeonApiWebView: void goForward(android.webkit.WebView)
io.flutter.embedding.android.FlutterTextureView: void pause()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void pigeon_newInstance(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,kotlin.jvm.functions.Function1)
androidx.core.view.ViewCompat$Api21Impl$1: ViewCompat$Api21Impl$1(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: boolean hasFinalizationListenerStopped()
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager: java.util.List list(io.flutter.plugins.webviewflutter.FlutterAssetManager,java.lang.String)
androidx.appcompat.widget.Toolbar: int getContentInsetLeft()
androidx.recyclerview.widget.RecyclerView: void setScrollState(int)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.plugins.webviewflutter.PigeonApiWebView: void addJavaScriptChannel(android.webkit.WebView,io.flutter.plugins.webviewflutter.JavaScriptChannel)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: SettingsChannel$PlatformBrightness(java.lang.String,int,java.lang.String)
io.flutter.plugins.webviewflutter.ViewProxyApi: ViewProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.view.AccessibilityViewEmbedder: boolean onAccessibilityHoverEvent(int,android.view.MotionEvent)
org.chromium.support_lib_boundary.WebMessagePayloadBoundaryInterface: java.lang.String getAsString()
io.flutter.plugins.imagepicker.ImagePickerDelegate$2: void lambda$getFullImagePath$0(io.flutter.plugins.imagepicker.ImagePickerDelegate$OnPathReadyListener,java.lang.String,android.net.Uri)
io.flutter.embedding.engine.renderer.FlutterRenderer: void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)
androidx.core.view.ViewConfigurationCompat$Api28Impl: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration)
io.flutter.plugins.imagepicker.ImagePickerCache: void saveDimensionWithOutputOptions(io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions)
io.flutter.embedding.engine.systemchannels.PlatformChannel: java.util.List decodeSystemUiOverlays(org.json.JSONArray)
androidx.core.content.res.ResourcesCompat$Api21Impl: android.graphics.drawable.Drawable getDrawableForDensity(android.content.res.Resources,int,int,android.content.res.Resources$Theme)
io.flutter.plugins.imagepicker.Messages$SourceType: Messages$SourceType(java.lang.String,int,int)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: android.app.Activity getActivity()
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: void lambda$new$0()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
androidx.core.view.ViewCompat$Api26Impl: void addKeyboardNavigationClusters(android.view.View,java.util.Collection,int)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String getRouteName()
io.flutter.view.VsyncWaiter: io.flutter.view.VsyncWaiter$FrameCallback access$202(io.flutter.view.VsyncWaiter,io.flutter.view.VsyncWaiter$FrameCallback)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: boolean canApplyTheme(android.graphics.drawable.Drawable)
io.flutter.embedding.android.FlutterImageView: void updateCurrentBitmap()
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setSupportZoom(android.webkit.WebSettings,boolean)
androidx.appcompat.widget.Toolbar: void setTitleMarginStart(int)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void removeRearDisplayPresentationStatusListener(androidx.window.extensions.core.util.function.Consumer)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$11(kotlin.Result)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError$Builder: Messages$CacheRetrievalError$Builder()
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onReceivedRequestErrorCompat(android.webkit.WebViewClient,android.webkit.WebView,android.webkit.WebResourceRequest,androidx.webkit.WebResourceErrorCompat,kotlin.jvm.functions.Function1)
kotlin.time.DurationUnit: kotlin.time.DurationUnit[] values()
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long access$100(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceWindowChanged(android.view.Surface)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void attachToActivity(io.flutter.embedding.android.ExclusiveAppComponent,androidx.lifecycle.Lifecycle)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void doUpdateVisitedHistory$lambda$9(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
androidx.appcompat.widget.SearchView: void setSubmitButtonEnabled(boolean)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineBroadcastReceiverPluginBinding: android.content.BroadcastReceiver getBroadcastReceiver()
io.flutter.embedding.android.FlutterView: void revertImageView(java.lang.Runnable)
io.flutter.plugins.webviewflutter.DownloadListenerProxyApi: DownloadListenerProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
androidx.fragment.app.Fragment: boolean isStateSaved()
androidx.core.content.FileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])
androidx.core.view.ViewCompat$Api26Impl: boolean restoreDefaultFocus(android.view.View)
androidx.core.view.WindowInsetsCompat$Impl20: void copyWindowDataInto(androidx.core.view.WindowInsetsCompat)
io.flutter.plugins.sharedpreferences.StringListResult: StringListResult(java.lang.String,io.flutter.plugins.sharedpreferences.StringListLookupResultType,int,kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.plugin.mouse.MouseCursorPlugin: void destroy()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] $values()
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder withCachedEngine(java.lang.String)
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate: android.view.View getPlatformViewById(int)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$14(kotlin.Result)
io.flutter.embedding.android.FlutterActivity: void onPostResume()
io.flutter.plugin.common.JSONUtil: java.lang.Object wrap(java.lang.Object)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onNewIntent(android.content.Intent)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void detachFromGLContext()
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType[] values()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: void cleanUpFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: void removeActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener)
io.flutter.plugin.editing.ListenableEditingState: void clearBatchDeltas()
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: int getVirtualNodeId(long)
androidx.lifecycle.LifecycleDispatcher$DispatcherActivityCallback: void onActivityCreated(android.app.Activity,android.os.Bundle)
io.flutter.plugins.webviewflutter.WebViewProxyApi: void loadDataWithBaseUrl(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
io.flutter.embedding.engine.systemchannels.KeyEventChannel: void sendFlutterKeyEvent(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent,boolean,io.flutter.embedding.engine.systemchannels.KeyEventChannel$EventResponseHandler)
androidx.core.widget.NestedScrollView: NestedScrollView(android.content.Context,android.util.AttributeSet)
androidx.recyclerview.widget.RecyclerView: boolean getPreserveFocusAfterLayout()
io.flutter.Log: void e(java.lang.String,java.lang.String,java.lang.Throwable)
io.flutter.plugin.platform.SingleViewFakeWindowViewGroup: void onLayout(boolean,int,int,int,int)
androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
io.flutter.plugins.sharedpreferences.StringListObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI spawn(java.lang.String,java.lang.String,java.lang.String,java.util.List)
androidx.core.os.BundleCompat$Api33Impl: java.util.ArrayList getParcelableArrayList(android.os.Bundle,java.lang.String,java.lang.Class)
io.flutter.plugin.editing.TextInputPlugin$1: void setPlatformViewClient(int,boolean)
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel: void postMessage(io.flutter.plugins.webviewflutter.JavaScriptChannel,java.lang.String,kotlin.jvm.functions.Function1)
androidx.appcompat.widget.ViewStubCompat: void setVisibility(int)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void addRearDisplayPresentationStatusListener(androidx.window.extensions.core.util.function.Consumer)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] values()
io.flutter.plugins.sharedpreferences.StringListResult: StringListResult(java.lang.String,io.flutter.plugins.sharedpreferences.StringListLookupResultType)
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: int getWidth()
io.flutter.plugins.imagepicker.ImagePickerDelegate: io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult retrieveLostImage()
io.flutter.plugins.webviewflutter.PigeonApiWebResourceError: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
androidx.core.view.ViewConfigurationCompat$Api26Impl: float getScaledVerticalScrollFactor(android.view.ViewConfiguration)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromActivityForConfigChanges()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi: kotlin.Lazy access$getCodec$delegate$cp()
io.flutter.plugins.webviewflutter.WebViewPoint: long getX()
io.flutter.embedding.engine.FlutterJNI: void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1: SharedPreferencesPlugin$readAllKeys$$inlined$map$1(kotlinx.coroutines.flow.Flow)
androidx.activity.ComponentActivity: androidx.activity.FullyDrawnReporter getFullyDrawnReporter()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setTranslateY(float)
io.flutter.embedding.engine.renderer.FlutterRenderer$2: void onStart(androidx.lifecycle.LifecycleOwner)
androidx.recyclerview.widget.RecyclerView: boolean getClipToPadding()
io.flutter.plugins.webviewflutter.WebViewProxyApi: void addJavaScriptChannel(android.webkit.WebView,io.flutter.plugins.webviewflutter.JavaScriptChannel)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void previous(int)
androidx.recyclerview.widget.RecyclerView: void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader: void close()
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: kotlin.Unit lambda$onGeolocationPermissionsHidePrompt$4(kotlin.Result)
io.flutter.embedding.engine.FlutterJNI: void scheduleFrame()
io.flutter.embedding.engine.FlutterJNI: void init(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: boolean getSafeBrowsingEnabled()
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebViewClient,android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1)
io.flutter.plugin.editing.ListenableEditingState: void notifyListener(io.flutter.plugin.editing.ListenableEditingState$EditingStateWatcher,boolean,boolean,boolean)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: PlatformViewsChannel$PlatformViewCreationRequest(int,java.lang.String,double,double,double,double,int,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode,java.nio.ByteBuffer)
io.flutter.embedding.engine.loader.FlutterLoader$1: io.flutter.embedding.engine.loader.FlutterLoader$InitResult call()
androidx.appcompat.widget.Toolbar: int getTitleMarginTop()
androidx.appcompat.widget.AppCompatTextView: android.graphics.PorterDuff$Mode getSupportCompoundDrawablesTintMode()
io.flutter.app.FlutterActivity: io.flutter.view.FlutterView createFlutterView(android.content.Context)
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.PluginRegistry$Registrar addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: io.flutter.embedding.android.ExclusiveAppComponent getExclusiveAppComponent()
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$2500(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void lambda$onReceivedHttpError$5(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse)
io.flutter.view.FlutterView: io.flutter.app.FlutterPluginRegistry getPluginRegistry()
io.flutter.view.FlutterNativeView: io.flutter.embedding.engine.FlutterJNI getFlutterJNI()
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: boolean isTextSelectable(android.view.accessibility.AccessibilityNodeInfo)
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener: void onSaveInstanceState(android.os.Bundle)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi: java.lang.Boolean setDeprecatedStringList(java.lang.String,java.util.List)
androidx.activity.OnBackPressedCallback: void setEnabled(boolean)
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
io.flutter.embedding.android.FlutterTextureView$1: FlutterTextureView$1(io.flutter.embedding.android.FlutterTextureView)
androidx.window.area.reflectionguard.ExtensionWindowAreaPresentationRequirements: android.content.Context getPresentationContext()
io.flutter.embedding.engine.renderer.FlutterRenderer$2: void onStop(androidx.lifecycle.LifecycleOwner)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$6100(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.embedding.engine.FlutterJNI: void nativeUnregisterTexture(long,long)
io.flutter.embedding.engine.plugins.activity.ActivityControlSurface: void onSaveInstanceState(android.os.Bundle)
io.flutter.util.ViewUtils: boolean lambda$childHasFocus$0(android.view.View)
androidx.appcompat.widget.ActionBarOverlayLayout: ActionBarOverlayLayout(android.content.Context,android.util.AttributeSet)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void popSystemNavigator()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader33()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$8(kotlin.Result)
io.flutter.embedding.engine.systemchannels.KeyEventChannel: io.flutter.plugin.common.BasicMessageChannel$Reply createReplyHandler(io.flutter.embedding.engine.systemchannels.KeyEventChannel$EventResponseHandler)
io.flutter.plugins.imagepicker.ImagePickerDelegate: java.io.File createTemporaryWritableImageFile()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void setSynchronousReturnValueForOnJsConfirm(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,boolean)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: kotlin.Unit lambda$onPageStarted$0(kotlin.Result)
androidx.fragment.app.Fragment: void onHiddenChanged(boolean)
io.flutter.plugins.webviewflutter.AndroidWebkitLibrary_gKt: io.flutter.plugins.webviewflutter.AndroidWebKitError createConnectionError(java.lang.String)
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets: java.lang.String getAssetFilePathBySubpath(java.lang.String,java.lang.String)
kotlinx.coroutines.flow.SharingCommand: kotlinx.coroutines.flow.SharingCommand valueOf(java.lang.String)
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: void removeOnSaveStateListener(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.DisplayCutoutCompat getDisplayCutout()
androidx.appcompat.widget.AppCompatImageView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
androidx.fragment.app.FragmentActivity: void supportFinishAfterTransition()
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setGeolocationEnabled(android.webkit.WebSettings,boolean)
io.flutter.plugins.imagepicker.Messages$SourceCamera: Messages$SourceCamera(java.lang.String,int,int)
androidx.lifecycle.ProcessLifecycleOwner$Api29Impl: void registerActivityLifecycleCallbacks(android.app.Activity,android.app.Application$ActivityLifecycleCallbacks)
io.flutter.embedding.android.FlutterEngineConfigurator: void cleanUpFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
io.flutter.embedding.engine.dart.PlatformTaskQueue: void dispatch(java.lang.Runnable)
io.flutter.plugin.common.JSONMethodCodec: io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer)
io.flutter.plugin.common.BasicMessageChannel: BasicMessageChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MessageCodec,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateJavaAssetManager(long,android.content.res.AssetManager,java.lang.String)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] $values()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener: ImeSyncDeferringInsetsCallback$InsetsListener(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$1)
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverControlSurface: void detachFromBroadcastReceiver()
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onPageFinished(android.webkit.WebViewClient,android.webkit.WebView,java.lang.String,kotlin.jvm.functions.Function1)
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder: FlutterFragmentActivity$NewEngineIntentBuilder(java.lang.Class)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType valueOf(java.lang.String)
androidx.activity.ComponentActivity: void onMultiWindowModeChanged(boolean)
androidx.core.view.ViewCompat$Api26Impl: boolean isKeyboardNavigationCluster(android.view.View)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)
org.chromium.support_lib_boundary.DropDataContentProviderBoundaryInterface: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)
io.flutter.view.AccessibilityViewEmbedder: android.view.View platformViewOfNode(int)
io.flutter.embedding.android.FlutterFragmentActivity: java.util.List getDartEntrypointArgs()
io.flutter.plugin.platform.PlatformView: void onInputConnectionUnlocked()
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1: void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
kotlinx.coroutines.android.AndroidDispatcherFactory: java.lang.String hintOnError()
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$2: void error(java.lang.Throwable)
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.view.TextureRegistry$SurfaceTextureEntry registerSurfaceTexture(long,android.graphics.SurfaceTexture)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$default(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion,io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.String,int,java.lang.Object)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void attachToBroadcastReceiver(android.content.BroadcastReceiver,androidx.lifecycle.Lifecycle)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener)
androidx.core.os.BundleApi21ImplKt: void putSizeF(android.os.Bundle,java.lang.String,android.util.SizeF)
io.flutter.plugin.editing.ListenableEditingState: void notifyListenersIfNeeded(boolean,boolean,boolean)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalType: Messages$CacheRetrievalType(java.lang.String,int,int)
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromeApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformChannel)
androidx.webkit.WebViewClientCompat: WebViewClientCompat()
io.flutter.view.FlutterView$2: void surfaceChanged(android.view.SurfaceHolder,int,int,int)
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setMediaPlaybackRequiresUserGesture(android.webkit.WebSettings,boolean)
io.flutter.util.HandlerCompat: HandlerCompat()
io.flutter.embedding.engine.FlutterEngineGroupCache: boolean contains(java.lang.String)
io.flutter.plugin.platform.SingleViewWindowManager: android.view.WindowMetrics getCurrentWindowMetrics()
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: void finalize()
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long getParentNodeId(android.view.accessibility.AccessibilityNodeInfo)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: void onProgressChanged(android.webkit.WebView,int)
io.flutter.plugins.imagepicker.Messages: Messages()
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry: io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void applyTheme(android.graphics.drawable.Drawable,android.content.res.Resources$Theme)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void setString(java.lang.String,java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.activity.ComponentActivity: void onPanelClosed(int,android.view.Menu)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceErrorCompat: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugin.localization.LocalizationPlugin: void sendLocalesToFlutter(android.content.res.Configuration)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: android.util.SparseArray access$000(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager)
org.chromium.support_lib_boundary.TracingControllerBoundaryInterface: boolean stop(java.io.OutputStream,java.util.concurrent.Executor)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getTranslateX()
io.flutter.plugin.mouse.MouseCursorPlugin: android.view.PointerIcon access$000(io.flutter.plugin.mouse.MouseCursorPlugin,java.lang.String)
io.flutter.plugin.platform.PlatformViewsController: int access$1900(io.flutter.plugin.platform.PlatformViewsController,double,float)
io.flutter.view.FlutterView: void access$000(io.flutter.view.FlutterView,boolean,boolean)
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: void resize(int,int)
io.flutter.embedding.engine.systemchannels.RestorationChannel: boolean access$102(io.flutter.embedding.engine.systemchannels.RestorationChannel,boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: java.lang.Long getInt(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.plugin.editing.ListenableEditingState: void setComposingRange(int,int)
io.flutter.embedding.engine.FlutterEngineGroup$1: void onEngineWillDestroy()
io.flutter.plugin.platform.PlatformPlugin$1: java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat)
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1: FlutterView$SurfaceTextureRegistryEntry$1(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[])
io.flutter.view.FlutterMain: void startInitialization(android.content.Context)
androidx.fragment.app.FragmentContainerView: void setDrawDisappearingViewsLast(boolean)
io.flutter.plugins.urllauncher.UrlLauncher: void setActivity(android.app.Activity)
io.flutter.embedding.android.FlutterActivity: androidx.lifecycle.Lifecycle getLifecycle()
io.flutter.embedding.engine.renderer.FlutterRenderer$2: FlutterRenderer$2(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: java.lang.String getUserAgentString(android.webkit.WebSettings)
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: boolean isCalledFromAlertDialog()
io.flutter.plugins.sharedpreferences.StringListLookupResultType$Companion: StringListLookupResultType$Companion()
io.flutter.plugin.platform.PlatformViewsController: void onResume()
io.flutter.app.FlutterActivityDelegate: void onTrimMemory(int)
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: boolean equals(java.lang.Object)
io.flutter.view.FlutterNativeView: FlutterNativeView(android.content.Context)
io.flutter.view.FlutterMain: java.lang.String findAppBundlePath(android.content.Context)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler getPigeonApiHttpAuthHandler()
io.flutter.view.FlutterMain$Settings: FlutterMain$Settings()
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetTop(android.view.DisplayCutout)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: io.flutter.plugins.sharedpreferences.MessagesAsyncPigeonCodec codec_delegate$lambda$0()
io.flutter.embedding.android.FlutterView: void convertToImageView()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: kotlin.Unit lambda$onReceivedError$8(kotlin.Result)
androidx.fragment.app.Fragment: void performConfigurationChanged(android.content.res.Configuration)
io.flutter.view.AccessibilityBridge: boolean lambda$shouldSetCollectionInfo$1(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.appcompat.widget.ActionBarContextView: void setTitleOptional(boolean)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: PlatformViewsChannel$PlatformViewTouch(int,java.lang.Number,java.lang.Number,int,int,java.lang.Object,java.lang.Object,int,int,float,float,int,int,int,int,long)
androidx.core.widget.NestedScrollView: int getMaxScrollAmount()
io.flutter.view.AccessibilityViewEmbedder: void cacheVirtualIdMappings(android.view.View,int,int)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler: MethodChannel$IncomingMethodCallHandler(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$MethodCallHandler)
org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface: void setServiceWorkerClient(java.lang.reflect.InvocationHandler)
androidx.appcompat.widget.AppCompatTextView: void setTextMetricsParamsCompat(androidx.core.text.PrecomputedTextCompat$Params)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] $values()
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue: io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$SentConfiguration getConfiguration(int)
io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask: ResourceExtractor$ExtractTask(java.lang.String,java.util.HashSet,java.lang.String,android.content.pm.PackageManager,android.content.res.AssetManager)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment build()
io.flutter.embedding.android.FlutterFragmentActivity: void onNewIntent(android.content.Intent)
io.flutter.embedding.android.FlutterActivity: void onFlutterUiNoLongerDisplayed()
io.flutter.plugins.webviewflutter.WebResourceResponseProxyApi: long statusCode(android.webkit.WebResourceResponse)
io.flutter.embedding.android.FlutterActivity: boolean popSystemNavigator()
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1: VirtualDisplayController$OneTimeOnDrawListener$1(io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState valueOf(java.lang.String)
androidx.fragment.app.Fragment: boolean isPostponed()
io.flutter.embedding.engine.systemchannels.MouseCursorChannel$MouseCursorMethodHandler: void activateSystemCursor(java.lang.String)
androidx.profileinstaller.ProfileInstallerInitializer: ProfileInstallerInitializer()
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String getLookupKeyForAsset(java.lang.String,java.lang.String)
androidx.fragment.app.Fragment: androidx.lifecycle.LifecycleOwner getViewLifecycleOwner()
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager getPigeonApiFlutterAssetManager()
io.flutter.embedding.android.FlutterSurfaceView$1: void surfaceDestroyed(android.view.SurfaceHolder)
androidx.core.app.AppOpsManagerCompat$Api23Impl: int noteProxyOp(android.app.AppOpsManager,java.lang.String,java.lang.String)
io.flutter.plugin.platform.VirtualDisplayController: void resize(int,int,java.lang.Runnable)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: java.lang.CharSequence getContainerTitle(android.view.accessibility.AccessibilityNodeInfo)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: PigeonApiWebViewClient(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder: io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder initialRoute(java.lang.String)
io.flutter.plugin.platform.SingleViewWindowManager: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)
androidx.recyclerview.widget.RecyclerView: void setHasFixedSize(boolean)
io.flutter.embedding.android.FlutterFragmentActivity: boolean isDebuggable()
androidx.appcompat.widget.SwitchCompat: void setThumbDrawable(android.graphics.drawable.Drawable)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: void setStableInsets(androidx.core.graphics.Insets)
io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder: FlutterActivity$CachedEngineIntentBuilder(java.lang.Class,java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.app.FlutterActivityDelegate$ViewFactory: io.flutter.view.FlutterView createFlutterView(android.content.Context)
androidx.lifecycle.LifecycleDispatcher$DispatcherActivityCallback: LifecycleDispatcher$DispatcherActivityCallback()
androidx.fragment.app.Fragment: java.lang.Object getHost()
io.flutter.embedding.android.FlutterImageView: void resizeIfNeeded(int,int)
androidx.appcompat.view.menu.ActionMenuItemView: void setExpandedFormat(boolean)
io.flutter.app.FlutterActivityDelegate: void onWindowFocusChanged(boolean)
org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertWebResourceError(java.lang.Object)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: io.flutter.embedding.engine.systemchannels.DeferredComponentChannel access$300(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager)
io.flutter.plugin.platform.PlatformPlugin: void access$800(io.flutter.plugin.platform.PlatformPlugin,boolean)
io.flutter.view.VsyncWaiter$1: android.view.Choreographer$FrameCallback obtainFrameCallback(long)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.WindowManagerHandler access$202(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.WindowManagerHandler)
io.flutter.plugin.editing.FlutterTextUtils: FlutterTextUtils(io.flutter.embedding.engine.FlutterJNI)
androidx.appcompat.widget.SwitchCompat: void setThumbTintMode(android.graphics.PorterDuff$Mode)
io.flutter.app.FlutterActivityDelegate: void onDestroy()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.plugin.common.BinaryMessenger messenger()
androidx.fragment.app.Fragment: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi$-CC: void lambda$setUp$2(io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions: BinaryMessenger$TaskQueueOptions()
io.flutter.embedding.engine.renderer.FlutterRenderer: void scheduleEngineFrame()
androidx.appcompat.widget.AppCompatTextView: void setSupportCompoundDrawablesTintMode(android.graphics.PorterDuff$Mode)
io.flutter.embedding.android.FlutterSurfaceView: void resume()
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener access$800(io.flutter.view.AccessibilityBridge)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void addOnSaveStateListener(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$dataStoreSetString$2: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.plugins.imagepicker.Messages$GeneralOptions: boolean equals(java.lang.Object)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setString$1: java.lang.Object invokeSuspend(java.lang.Object)
androidx.appcompat.widget.ButtonBarLayout: ButtonBarLayout(android.content.Context,android.util.AttributeSet)
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: void onDestroy(androidx.lifecycle.LifecycleOwner)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$5102(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setUse24HourFormat(boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getPrefs$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.embedding.engine.plugins.FlutterPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError$Builder: io.flutter.plugins.imagepicker.Messages$CacheRetrievalError$Builder setMessage(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType[] $values()
io.flutter.embedding.engine.FlutterShellArgs: FlutterShellArgs(java.util.Set)
io.flutter.embedding.android.KeyboardManager$CharacterCombiner: java.lang.Character applyCombiningCharacterToBaseCharacter(int)
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromeChangeListener()
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: java.lang.Double getMaxWidth()
android.support.v4.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
androidx.core.view.ViewConfigurationCompat$Api34Impl: int getScaledMaximumFlingVelocity(android.view.ViewConfiguration,int,int,int)
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: void addOnWindowFocusChangedListener(io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener)
androidx.core.view.ViewCompat$Api28Impl: void setAutofillId(android.view.View,androidx.core.view.autofill.AutofillIdCompat)
androidx.appcompat.widget.SearchView: int getMaxWidth()
io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder: io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder dartEntrypoint(java.lang.String)
androidx.activity.ComponentActivity: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()
androidx.webkit.WebViewClientCompat: void onSafeBrowsingHit(android.webkit.WebView,android.webkit.WebResourceRequest,int,androidx.webkit.SafeBrowsingResponseCompat)
io.flutter.FlutterInjector: FlutterInjector(io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager,io.flutter.embedding.engine.FlutterJNI$Factory,java.util.concurrent.ExecutorService,io.flutter.FlutterInjector$1)
androidx.recyclerview.widget.RecyclerView: void setItemAnimator(androidx.recyclerview.widget.RecyclerView$ItemAnimator)
io.flutter.app.FlutterActivityDelegate: void onStart()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: void detachFromFlutterEngine()
io.flutter.plugins.webviewflutter.PigeonApiWebStorage$Companion: PigeonApiWebStorage$Companion()
io.flutter.plugin.platform.SurfaceProducerPlatformViewRenderTarget: boolean isReleased()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDeprecatedStringList$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
androidx.fragment.app.Fragment: void onViewStateRestored(android.os.Bundle)
io.flutter.embedding.android.KeyEmbedderResponder: java.lang.Long getLogicalKey(android.view.KeyEvent)
androidx.profileinstaller.ProfileInstallerInitializer$Handler28Impl: android.os.Handler createAsync(android.os.Looper)
io.flutter.embedding.engine.systemchannels.SettingsChannel: boolean hasNonlinearTextScalingSupport()
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.platform.PlatformViewRegistry getRegistry()
androidx.appcompat.widget.LinearLayoutCompat: int getDividerPadding()
io.flutter.plugin.platform.PlatformPlugin: void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void launchPickVideoFromGalleryIntent(java.lang.Boolean)
androidx.appcompat.view.menu.ActionMenuItemView: void setItemInvoker(androidx.appcompat.view.menu.MenuBuilder$ItemInvoker)
io.flutter.plugin.platform.PlatformPlugin: java.lang.CharSequence access$1000(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onStart()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: android.content.Context access$getContext$p(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager getInstanceManager()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onJsPrompt$lambda$11(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugin.platform.VirtualDisplayController$1: VirtualDisplayController$1()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: WebViewClientProxyApi$WebViewClientImpl(io.flutter.plugins.webviewflutter.WebViewClientProxyApi)
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate: void detachAccessibilityBridge()
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: androidx.window.extensions.area.ExtensionWindowAreaPresentation getRearDisplayPresentation()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointRegionalIndicator(int)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void onDetachedFromActivityForConfigChanges()
io.flutter.app.FlutterPluginRegistry: io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder withNewEngineInGroup(java.lang.String)
io.flutter.util.ViewUtils: boolean lambda$hasChildViewOfType$1(java.lang.Class[],android.view.View)
io.flutter.embedding.android.FlutterFragment: void onViewCreated(android.view.View,android.os.Bundle)
io.flutter.plugin.editing.ListenableEditingState: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: void onListen(java.lang.Object,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.embedding.engine.plugins.service.ServiceAware: void onDetachedFromService()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: FlutterActivityAndFragmentDelegate(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host,io.flutter.embedding.engine.FlutterEngineGroup)
io.flutter.plugins.imagepicker.Messages$GeneralOptions: void setLimit(java.lang.Long)
io.flutter.plugin.editing.TextEditingDelta: org.json.JSONObject toJSON()
io.flutter.plugins.webviewflutter.DisplayListenerProxy$1: void onDisplayRemoved(int)
io.flutter.view.AccessibilityBridge: void setAccessibleNavigation(boolean)
io.flutter.plugin.platform.VirtualDisplayController: void clearSurface()
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.Boolean setInt(java.lang.String,java.lang.Long)
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener: void onRestoreInstanceState(android.os.Bundle)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: android.content.Context getContext()
io.flutter.plugin.platform.PlatformViewWrapper: android.view.ViewTreeObserver$OnGlobalFocusChangeListener getActiveFocusListener()
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.platform.SurfaceProducerPlatformViewRenderTarget: int getWidth()
io.flutter.view.FlutterNativeView: void attachViewAndActivity(io.flutter.view.FlutterView,android.app.Activity)
io.flutter.plugins.webviewflutter.HttpAuthHandlerProxyApi: void proceed(android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: void invokeViewFocused(int)
androidx.window.area.reflectionguard.ExtensionWindowAreaStatusRequirements: android.util.DisplayMetrics getWindowAreaDisplayMetrics()
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: kotlin.Unit lambda$onPermissionRequest$6(kotlin.Result)
androidx.fragment.app.Fragment: void performSaveInstanceState(android.os.Bundle)
androidx.fragment.app.Fragment: void onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle)
androidx.appcompat.widget.Toolbar: int getContentInsetEndWithActions()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hadFlag(io.flutter.view.AccessibilityBridge$Flag)
androidx.core.view.ViewCompat$Api26Impl: void setFocusedByDefault(android.view.View,boolean)
io.flutter.util.ViewUtils: boolean childHasFocus(android.view.View)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: kotlin.Unit lambda$shouldOverrideUrlLoading$10(kotlin.Result)
androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelProvider$Factory getDefaultViewModelProviderFactory()
androidx.appcompat.widget.SwitchCompat: boolean getSplitTrack()
org.chromium.support_lib_boundary.WebViewClientBoundaryInterface: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,java.lang.reflect.InvocationHandler)
androidx.core.view.ViewCompat$Api23Impl: int getScrollIndicators(android.view.View)
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List)
io.flutter.embedding.android.FlutterPlayStoreSplitApplication: FlutterPlayStoreSplitApplication()
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: SettingsChannel$MessageBuilder(io.flutter.plugin.common.BasicMessageChannel)
io.flutter.plugin.platform.PlatformPlugin: void access$100(io.flutter.plugin.platform.PlatformPlugin,int)
io.flutter.embedding.engine.plugins.service.ServiceAware$OnModeChangeListener: void onMoveToBackground()
io.flutter.plugins.webviewflutter.PigeonApiCookieManager: void pigeon_newInstance(android.webkit.CookieManager,kotlin.jvm.functions.Function1)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void onUserLeaveHint()
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView getCurrentImageSurface()
io.flutter.plugin.common.MethodChannel: java.lang.String access$100(io.flutter.plugin.common.MethodChannel)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setFillColor(int)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding: FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding(android.app.Service,androidx.lifecycle.Lifecycle)
io.flutter.plugin.common.EventChannel$StreamHandler: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void onUserLeaveHint()
io.flutter.plugins.imagepicker.ImagePickerDelegate: void setCameraDevice(io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice)
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setJavaScriptCanOpenWindowsAutomatically(android.webkit.WebSettings,boolean)
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest: void pigeon_newInstance(android.webkit.PermissionRequest,kotlin.jvm.functions.Function1)
androidx.core.app.ComponentActivity: androidx.core.app.ComponentActivity$ExtraData getExtraData(java.lang.Class)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: android.content.Context context()
androidx.core.view.WindowInsetsCompat$Impl20: void copyRootViewBounds(android.view.View)
io.flutter.embedding.engine.FlutterJNI: void setPlatformViewsController(io.flutter.plugin.platform.PlatformViewsController)
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String[] toArray()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi: void removeStrongReference(long,kotlin.jvm.functions.Function1)
io.flutter.embedding.android.FlutterView$2: boolean deliverSelfNotifications()
io.flutter.view.FlutterView$1: void onAccessibilityChanged(boolean,boolean)
androidx.appcompat.widget.ActionBarOverlayLayout: void setShowingForActionMode(boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setString$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
org.chromium.support_lib_boundary.ProfileStoreBoundaryInterface: java.util.List getAllProfileNames()
org.chromium.support_lib_boundary.WebMessagePayloadBoundaryInterface: byte[] getAsArrayBuffer()
io.flutter.embedding.android.FlutterFragment: void updateSystemUiOverlays()
io.flutter.plugin.platform.PlatformViewsController$1: PlatformViewsController$1(io.flutter.plugin.platform.PlatformViewsController)
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiDownloadListener,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.platform.PlatformView$-CC: void $default$onFlutterViewDetached(io.flutter.plugin.platform.PlatformView)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: void onFlutterUiDisplayed()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: void onFlutterTextureViewCreated(io.flutter.embedding.android.FlutterTextureView)
androidx.window.core.VerificationMode: androidx.window.core.VerificationMode[] values()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1$1: java.lang.Object invoke(androidx.datastore.preferences.core.MutablePreferences,kotlin.coroutines.Continuation)
androidx.core.app.ActivityCompat$Api21Impl: void postponeEnterTransition(android.app.Activity)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$2: Messages$ImagePickerApi$2(java.util.ArrayList,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getKeys$prefs$1: SharedPreferencesPlugin$getKeys$prefs$1(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,java.util.List,kotlin.coroutines.Continuation)
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromeEnabledSystemUIOverlays(java.util.List)
androidx.activity.ComponentActivity: android.content.Context peekAvailableContext()
io.flutter.embedding.android.FlutterView: android.view.View findViewByAccessibilityIdRootedAtCurrentView(int,android.view.View)
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler)
io.flutter.plugins.webviewflutter.WebViewProxyApi: void setWebChromeClient(android.webkit.WebView,io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType[] $values()
io.flutter.app.FlutterActivity: java.lang.Object valuePublishedByPlugin(java.lang.String)
io.flutter.plugins.sharedpreferences.Messages$PigeonCodec: java.lang.Object readValueOfType(byte,java.nio.ByteBuffer)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values()
org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface: java.lang.reflect.InvocationHandler getServiceWorkerWebSettings()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void lambda$shouldOverrideUrlLoading$13(android.webkit.WebView,java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.plugin.editing.TextInputPlugin: void didChangeEditingState(boolean,boolean,boolean)
io.flutter.embedding.engine.dart.DartMessenger: void dispatchMessageToQueue(java.lang.String,io.flutter.embedding.engine.dart.DartMessenger$HandlerInfo,java.nio.ByteBuffer,int,long)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void lambda$onActivityResult$0(int,android.content.Intent)
io.flutter.embedding.engine.renderer.RenderSurface: void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.embedding.engine.FlutterEngine: FlutterEngine(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterJNI,io.flutter.plugin.platform.PlatformViewsController,java.lang.String[],boolean)
io.flutter.embedding.engine.systemchannels.PlatformChannel: int access$100(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$19(kotlin.Result)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getKeys$prefs$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceError: java.lang.String description(android.webkit.WebResourceError)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void setBool(java.lang.String,boolean,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.plugin.common.StandardMethodCodec: java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest: java.util.Map requestHeaders(android.webkit.WebResourceRequest)
androidx.appcompat.widget.Toolbar: void setTitleMarginEnd(int)
androidx.fragment.app.FragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()
io.flutter.embedding.engine.FlutterJNI: void registerImageTexture(long,io.flutter.view.TextureRegistry$ImageConsumer)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getPrefs$1: SharedPreferencesPlugin$getPrefs$1(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,kotlin.coroutines.Continuation)
io.flutter.app.FlutterFragmentActivity: io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String)
io.flutter.embedding.android.FlutterActivity: void onFlutterSurfaceViewCreated(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.plugin.platform.PlatformViewsController: boolean access$1600(int)
io.flutter.view.AccessibilityBridge: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
io.flutter.plugin.common.MethodCall: MethodCall(java.lang.String,java.lang.Object)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean requestCursorUpdates(int)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: android.content.pm.ApplicationInfo getApplicationInfo()
io.flutter.embedding.android.WindowInfoRepositoryCallbackAdapterWrapper: void removeWindowLayoutInfoListener(androidx.core.util.Consumer)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceErrorCompat: PigeonApiWebResourceErrorCompat(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.embedding.android.FlutterFragment: void onCreate(android.os.Bundle)
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: void onAttachedToWindow()
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: kotlin.Unit lambda$onConsoleMessage$7(kotlin.Result)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void remove(java.lang.Class)
io.flutter.plugin.platform.PlatformPlugin: java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void removeOnUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener)
io.flutter.plugin.platform.PlatformViewRenderTarget$-CC: void $default$scheduleFrame(io.flutter.plugin.platform.PlatformViewRenderTarget)
io.flutter.embedding.android.FlutterFragment: void onResume()
androidx.fragment.app.FragmentActivity: void startActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values()
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setLoadWithOverviewMode(android.webkit.WebSettings,boolean)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2202(io.flutter.view.AccessibilityBridge$SemanticsNode,int)
androidx.core.view.DisplayCutoutCompat$Api28Impl: android.view.DisplayCutout createDisplayCutout(android.graphics.Rect,java.util.List)
io.flutter.app.FlutterPluginRegistry: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.util.PathUtils: java.lang.String getDataDirectory(android.content.Context)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder handleDeeplinking(java.lang.Boolean)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi: java.lang.Boolean remove(java.lang.String)
io.flutter.embedding.android.FlutterSurfaceView: boolean gatherTransparentRegion(android.graphics.Region)
io.flutter.app.FlutterActivityEvents: void onDestroy()
androidx.appcompat.widget.AppCompatTextView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
androidx.fragment.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: void clear()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int getChangingConfigurations()
io.flutter.plugin.common.BinaryMessenger: void disableBufferingIncomingMessages()
io.flutter.app.FlutterActivityEvents: void onStop()
androidx.activity.ComponentActivity: androidx.activity.result.ActivityResultLauncher registerForActivityResult(androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)
io.flutter.embedding.android.FlutterView$ZeroSides: FlutterView$ZeroSides(java.lang.String,int)
io.flutter.plugins.webviewflutter.ResultCompat: java.lang.Throwable exceptionOrNull()
io.flutter.view.AccessibilityBridge$StringAttributeType: AccessibilityBridge$StringAttributeType(java.lang.String,int)
io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder: io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder initialRoute(java.lang.String)
io.flutter.embedding.android.FlutterTextureView: android.view.Surface access$500(io.flutter.embedding.android.FlutterTextureView)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setTranslateX(float)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
androidx.appcompat.widget.Toolbar: int getTitleMarginEnd()
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: io.flutter.embedding.engine.renderer.SurfaceTextureWrapper textureWrapper()
io.flutter.plugin.common.EventChannel$EventSink: void success(java.lang.Object)
io.flutter.view.FlutterView: void resetAccessibilityTree()
io.flutter.embedding.engine.systemchannels.BackGestureChannel: java.util.Map backEventToJsonMap(android.window.BackEvent)
androidx.appcompat.widget.ActionBarOverlayLayout: void setWindowTitle(java.lang.CharSequence)
io.flutter.plugins.webviewflutter.CookieManagerProxyApi: io.flutter.plugins.webviewflutter.ProxyApiRegistrar getPigeonRegistrar()
io.flutter.embedding.engine.systemchannels.BackGestureChannel: BackGestureChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.plugin.platform.VirtualDisplayController$2: void onViewDetachedFromWindow(android.view.View)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.LocalizationChannel getLocalizationChannel()
io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice: ImagePickerDelegate$CameraDevice(java.lang.String,int)
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.platform.PlatformView createPlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest,boolean)
io.flutter.view.FlutterNativeView$1: FlutterNativeView$1(io.flutter.view.FlutterNativeView)
io.flutter.plugin.common.MethodChannel: MethodChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
io.flutter.plugin.platform.PlatformViewsController: void detachTextInputPlugin()
io.flutter.plugins.webviewflutter.DisplayListenerProxy: DisplayListenerProxy()
io.flutter.embedding.engine.plugins.PluginRegistry: boolean has(java.lang.Class)
io.flutter.plugins.imagepicker.ImagePickerPlugin: ImagePickerPlugin(io.flutter.plugins.imagepicker.ImagePickerDelegate,android.app.Activity)
io.flutter.plugins.webviewflutter.FlutterAssetManager: java.lang.String[] list(java.lang.String)
androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void setEditableSizeAndTransform(double,double,double[])
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: java.lang.Long getIdentifierForStrongReference(java.lang.Object)
io.flutter.plugins.webviewflutter.WebResourceRequestProxyApi: java.util.Map requestHeaders(android.webkit.WebResourceRequest)
io.flutter.plugins.urllauncher.Messages$WebViewOptions: io.flutter.plugins.urllauncher.Messages$WebViewOptions fromList(java.util.ArrayList)
io.flutter.embedding.engine.FlutterEngineGroupCache: io.flutter.embedding.engine.FlutterEngineGroupCache getInstance()
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.engine.FlutterEngine provideFlutterEngine(android.content.Context)
io.flutter.app.FlutterFragmentActivity: FlutterFragmentActivity()
io.flutter.plugin.platform.PlatformViewsController: void onDisplayOverlaySurface(int,int,int,int,int)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.WindowInfoRepositoryCallbackAdapterWrapper createWindowInfoRepo()
io.flutter.plugin.common.JSONMessageCodec: java.lang.Object decodeMessage(java.nio.ByteBuffer)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
androidx.appcompat.widget.ActionBarOverlayLayout: void setHasNonEmbeddedTabs(boolean)
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry()
io.flutter.plugin.platform.PlatformViewWrapper: void release()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient$Companion: void setUpMessageHandlers$lambda$7$lambda$6(io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.embedding.engine.FlutterEngineGroup$Options: io.flutter.embedding.engine.FlutterEngineGroup$Options setInitialRoute(java.lang.String)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: io.flutter.embedding.engine.FlutterEngine provideFlutterEngine(android.content.Context)
org.chromium.support_lib_boundary.ProfileBoundaryInterface: android.webkit.CookieManager getCookieManager()
io.flutter.embedding.android.FlutterView: void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
io.flutter.embedding.engine.FlutterJNI$Factory: io.flutter.embedding.engine.FlutterJNI provideFlutterJNI()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onAttach(android.content.Context)
io.flutter.plugins.webviewflutter.PigeonApiWebView: void clearCache(android.webkit.WebView,boolean)
io.flutter.plugins.sharedpreferences.StringListResult: int hashCode()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener)
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets getFlutterAssets()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: android.graphics.Matrix getPlatformViewMatrix()
io.flutter.plugins.webviewflutter.WebViewPointProxyApi: long x(io.flutter.plugins.webviewflutter.WebViewPoint)
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.PluginRegistry$Registrar addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener)
io.flutter.plugins.imagepicker.ImagePickerDelegate: java.util.ArrayList getPathsFromIntent(android.content.Intent,boolean)
io.flutter.embedding.engine.systemchannels.LocalizationChannel: LocalizationChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.embedding.engine.renderer.RenderSurface: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String)
androidx.appcompat.widget.ActionBarContainer: void setStackedBackground(android.graphics.drawable.Drawable)
io.flutter.FlutterInjector: FlutterInjector(io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager,io.flutter.embedding.engine.FlutterJNI$Factory,java.util.concurrent.ExecutorService)
io.flutter.embedding.android.KeyboardManager: KeyboardManager(io.flutter.embedding.android.KeyboardManager$ViewDelegate)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] values()
org.chromium.support_lib_boundary.WebMessagePortBoundaryInterface: void postMessage(java.lang.reflect.InvocationHandler)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeatures(int)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setSupportMultipleWindows(android.webkit.WebSettings,boolean)
androidx.appcompat.widget.SearchView: int getPreferredWidth()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: java.lang.reflect.InvocationHandler addDocumentStartJavaScript(java.lang.String,java.lang.String[])
androidx.recyclerview.widget.RecyclerView: void setPreserveFocusAfterLayout(boolean)
androidx.appcompat.widget.ButtonBarLayout: void setStacked(boolean)
io.flutter.plugins.imagepicker.ImageResizer: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputConnection createInputConnection(android.view.View,io.flutter.embedding.android.KeyboardManager,android.view.inputmethod.EditorInfo)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: void onActivityStopped(android.app.Activity)
io.flutter.plugin.platform.PlatformPlugin$1: void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType)
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] values()
io.flutter.plugin.common.MethodChannel$Result: void error(java.lang.String,java.lang.String,java.lang.Object)
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: void insertVisualStateCallback(long,java.lang.reflect.InvocationHandler)
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.plugins.webviewflutter.PigeonApiFileChooserParams: java.util.List acceptTypes(android.webkit.WebChromeClient$FileChooserParams)
org.chromium.support_lib_boundary.ScriptHandlerBoundaryInterface: void remove()
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: boolean verifyJNI()
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.graphics.Insets getStableInsets()
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler: PigeonApiHttpAuthHandler(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$3700(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi$-CC: void lambda$setUp$0(io.flutter.plugins.urllauncher.Messages$UrlLauncherApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.systemchannels.NavigationChannel: void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onResume()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: kotlin.Unit lambda$shouldOverrideUrlLoading$10(kotlin.Result)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: kotlin.Unit lambda$onJsConfirm$9(android.webkit.JsResult,io.flutter.plugins.webviewflutter.ResultCompat)
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions$Builder: io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions$Builder setQuality(java.lang.Long)
androidx.appcompat.widget.SwitchCompat: java.lang.CharSequence getTextOff()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] values()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.view.AccessibilityViewEmbedder: void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo)
org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setRequestedWithHeaderOriginAllowList(java.util.Set)
io.flutter.embedding.android.AndroidTouchProcessor: float getHorizontalScrollFactor(android.content.Context)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: boolean onInterceptTouchEvent(android.view.MotionEvent)
io.flutter.plugins.webviewflutter.JavaScriptChannel: JavaScriptChannel(java.lang.String,io.flutter.plugins.webviewflutter.JavaScriptChannelProxyApi)
io.flutter.app.FlutterPluginRegistry: java.util.List access$800(io.flutter.app.FlutterPluginRegistry)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setShortcut(android.view.MenuItem,char,char,int,int)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityEvent obtainAccessibilityEvent(int,int)
io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate: void setPointerIcon(android.view.PointerIcon)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onDetach()
androidx.appcompat.widget.Toolbar: void setSubtitleTextColor(android.content.res.ColorStateList)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: java.util.List getPlatformEncodedStringList(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.window.extensions.core.util.function.Function: java.lang.Object apply(java.lang.Object)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$3: void success(java.util.List)
io.flutter.plugin.platform.PlatformPlugin: PlatformPlugin(android.app.Activity,io.flutter.embedding.engine.systemchannels.PlatformChannel)
androidx.fragment.app.FragmentActivity: void onResume()
org.chromium.support_lib_boundary.WebViewRendererClientBoundaryInterface: void onRendererResponsive(android.webkit.WebView,java.lang.reflect.InvocationHandler)
io.flutter.embedding.engine.FlutterEngine: void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest getPigeonApiPermissionRequest()
io.flutter.embedding.engine.systemchannels.TextInputChannel: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler access$000(io.flutter.embedding.engine.systemchannels.TextInputChannel)
io.flutter.plugins.imagepicker.ImagePickerDelegate: java.io.File createTemporaryWritableVideoFile()
io.flutter.embedding.android.FlutterView: void detachFromFlutterEngine()
io.flutter.view.FlutterNativeView: void disableBufferingIncomingMessages()
androidx.appcompat.widget.ActionBarOverlayLayout: void setLogo(int)
androidx.activity.OnBackPressedCallback: void removeCancellable(androidx.activity.Cancellable)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar publish(java.lang.Object)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SpellCheckChannel getSpellCheckChannel()
androidx.core.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
io.flutter.view.TextureRegistry$ImageConsumer: android.media.Image acquireLatestImage()
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityEvent obtainAccessibilityEvent(int)
android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
io.flutter.view.AccessibilityBridge$SemanticsNode: void updateRecursively(float[],java.util.Set,boolean)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType valueOf(java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
androidx.fragment.app.Fragment: boolean getRetainInstance()
io.flutter.embedding.android.FlutterView$5: void onFlutterUiDisplayed()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void add(io.flutter.embedding.engine.plugins.FlutterPlugin)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: boolean sdkIsAtLeast(int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: void updateSystemUiOverlays()
androidx.core.graphics.Insets$Api29Impl: android.graphics.Insets of(int,int,int,int)
androidx.appcompat.widget.SwitchCompat: void setSwitchTypeface(android.graphics.Typeface)
io.flutter.plugin.common.MethodChannel: void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.String)
io.flutter.embedding.android.FlutterActivity$1: void onBackInvoked()
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiWebSettings)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$5202(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean)
io.flutter.app.FlutterActivity: void onCreate(android.os.Bundle)
io.flutter.plugins.imagepicker.ImagePickerPlugin: void onDetachedFromActivity()
io.flutter.view.FlutterView: io.flutter.view.TextureRegistry$SurfaceTextureEntry registerSurfaceTexture(android.graphics.SurfaceTexture)
io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager: void loadAssets(int,java.lang.String)
io.flutter.embedding.android.FlutterFragment: boolean shouldDestroyEngineWithHost()
androidx.core.content.ContextCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: int getWebauthnSupport()
androidx.fragment.app.Fragment: void setRetainInstance(boolean)
io.flutter.plugin.platform.PlatformViewsController: boolean usesVirtualDisplay(int)
androidx.fragment.app.Fragment: void performViewCreated()
io.flutter.embedding.android.FlutterActivity: java.lang.String getInitialRoute()
io.flutter.plugin.editing.TextInputPlugin: io.flutter.plugin.editing.TextInputPlugin$InputTarget access$100(io.flutter.plugin.editing.TextInputPlugin)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean has(java.lang.Class)
androidx.core.widget.NestedScrollView: float getTopFadingEdgeStrength()
io.flutter.plugin.platform.PlatformViewsController: android.view.View getPlatformViewById(int)
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: TextInputChannel$Configuration$Autofill(java.lang.String,java.lang.String[],java.lang.String,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean didScroll()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$400(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.app.FlutterPluginRegistry: java.util.List access$700(io.flutter.app.FlutterPluginRegistry)
io.flutter.plugins.imagepicker.ImagePickerPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.embedding.engine.plugins.activity.ActivityControlSurface: void onRestoreInstanceState(android.os.Bundle)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: FlutterRenderer$ImageReaderSurfaceProducer(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
androidx.core.view.WindowInsetsCompat$Impl28: WindowInsetsCompat$Impl28(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: void disableBufferingIncomingMessages()
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void addRearDisplayStatusListener(androidx.window.extensions.core.util.function.Consumer)
androidx.appcompat.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)
io.flutter.embedding.engine.plugins.service.ServiceControlSurface: void onMoveToForeground()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.lang.Object getValueByKey(androidx.datastore.preferences.core.Preferences$Key,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setDisplayZoomControls(android.webkit.WebSettings,boolean)
androidx.activity.ComponentActivity: java.lang.Object getLastCustomNonConfigurationInstance()
androidx.fragment.app.Fragment: int getPopExitAnim()
androidx.fragment.app.Fragment: void requestPermissions(java.lang.String[],int)
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: int hashCode()
io.flutter.view.FlutterView: void runFromBundle(io.flutter.view.FlutterRunArguments)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: void stopFinalizationListener$lambda$3(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager)
androidx.fragment.app.FragmentActivity: void onResumeFragments()
androidx.startup.InitializationProvider: InitializationProvider()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.PlatformView access$002(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.PlatformView)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: kotlin.Unit lambda$doUpdateVisitedHistory$14(kotlin.Result)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.BinaryMessenger messenger()
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType valueOf(java.lang.String)
io.flutter.embedding.android.KeyEmbedderResponder: boolean handleEventImpl(android.view.KeyEvent,io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback)
io.flutter.embedding.android.FlutterActivity: void cleanUpFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
io.flutter.plugin.common.StringCodec: java.nio.ByteBuffer encodeMessage(java.lang.String)
io.flutter.embedding.engine.FlutterEngineGroup: FlutterEngineGroup(android.content.Context,java.lang.String[])
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.DeferredComponentChannel getDeferredComponentChannel()
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: PigeonApiWebView$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
org.chromium.support_lib_boundary.ProfileBoundaryInterface: void prefetchUrl(java.lang.String,java.lang.reflect.InvocationHandler,android.webkit.ValueCallback)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getMinWidthMinor()
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)
androidx.core.widget.PopupWindowCompat$Api23Impl: void setOverlapAnchor(android.widget.PopupWindow,boolean)
io.flutter.embedding.engine.dart.DartMessenger$SerialTaskQueue: void lambda$dispatch$0()
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi: java.lang.Boolean clear(java.lang.String,java.util.List)
io.flutter.embedding.android.FlutterImageView: void pause()
io.flutter.embedding.android.FlutterSurfaceView: void access$300(io.flutter.embedding.android.FlutterSurfaceView,int,int)
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: void completeInstallSuccess(java.lang.String)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: FlutterFragment$NewEngineFragmentBuilder(java.lang.Class)
io.flutter.app.FlutterActivityEvents: void onCreate(android.os.Bundle)
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: long id()
androidx.core.app.AppOpsManagerCompat$Api23Impl: java.lang.String permissionToOp(java.lang.String)
androidx.recyclerview.widget.RecyclerView: void setOnScrollListener(androidx.recyclerview.widget.RecyclerView$OnScrollListener)
io.flutter.embedding.engine.dart.DartMessenger: void invokeHandler(io.flutter.embedding.engine.dart.DartMessenger$HandlerInfo,java.nio.ByteBuffer,int)
io.flutter.plugins.webviewflutter.WebViewFlutterPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setDomStorageEnabled(android.webkit.WebSettings,boolean)
io.flutter.app.FlutterActivity: FlutterActivity()
io.flutter.embedding.android.KeyboardManager: boolean handleEvent(android.view.KeyEvent)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceCreated(long,android.view.Surface)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$000(io.flutter.view.AccessibilityBridge$SemanticsNode)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: boolean isAccessibilityDataSensitive(android.view.accessibility.AccessibilityNodeInfo)
androidx.fragment.app.Fragment: void performDetach()
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: void onDraw()
io.flutter.embedding.engine.FlutterJNI: void nativeSetSemanticsEnabled(long,boolean)
org.chromium.support_lib_boundary.DropDataContentProviderBoundaryInterface: void onDragEnd(boolean)
io.flutter.plugin.editing.ListenableEditingState: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)
io.flutter.Log: java.lang.String getStackTraceString(java.lang.Throwable)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$DefaultFlutterAssets: FlutterEngineConnectionRegistry$DefaultFlutterAssets(io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterEngineConnectionRegistry$1)
io.flutter.embedding.engine.systemchannels.ProcessTextChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$3600(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: void updateWith(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
androidx.appcompat.widget.LinearLayoutCompat: void setBaselineAligned(boolean)
io.flutter.view.AccessibilityBridge: AccessibilityBridge(android.view.View,io.flutter.embedding.engine.systemchannels.AccessibilityChannel,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.view.AccessibilityViewEmbedder,io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate)
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.Boolean setDeprecatedStringList(java.lang.String,java.util.List)
io.flutter.plugins.webviewflutter.PigeonApiWebView: void reload(android.webkit.WebView)
io.flutter.embedding.engine.FlutterEngine: FlutterEngine(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterJNI,java.lang.String[],boolean)
io.flutter.plugin.platform.PlatformViewsController: float access$1200(io.flutter.plugin.platform.PlatformViewsController)
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: java.lang.reflect.InvocationHandler getWebViewRenderer()
io.flutter.plugin.editing.TextInputPlugin: void access$400(io.flutter.plugin.editing.TextInputPlugin)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: FlutterMutatorsStack$FlutterMutator(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Path)
io.flutter.plugins.urllauncher.WebViewActivity$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromAppComponent()
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemWindowInsets(androidx.core.graphics.Insets)
io.flutter.view.FlutterView: android.graphics.Bitmap getBitmap()
io.flutter.app.FlutterPluginRegistry: void onPreEngineRestart()
io.flutter.plugins.urllauncher.UrlLauncherPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.embedding.android.FlutterView: void resetWillNotDraw(boolean,boolean)
io.flutter.plugin.localization.LocalizationPlugin: android.content.Context access$000(io.flutter.plugin.localization.LocalizationPlugin)
io.flutter.view.VsyncWaiter$DisplayListener: void onDisplayChanged(int)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onReceivedRequestError(android.webkit.WebViewClient,android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError,kotlin.jvm.functions.Function1)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: java.lang.Object getLifecycle()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: android.content.Context getContext()
androidx.appcompat.widget.AppCompatImageButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
io.flutter.plugin.platform.PlatformViewsController: java.util.List parsePointerPropertiesList(java.lang.Object)
androidx.fragment.app.Fragment: void noteStateNotSaved()
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides[] values()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: java.lang.String getDartEntrypointFunctionName()
org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getTracingController()
io.flutter.plugin.platform.PlatformViewsController: void access$200(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.PlatformView,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void finishWithListSuccess(java.util.ArrayList)
io.flutter.plugin.common.ErrorLogResult: ErrorLogResult(java.lang.String,int)
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)
io.flutter.plugin.platform.PlatformViewsController: android.util.SparseArray access$900(io.flutter.plugin.platform.PlatformViewsController)
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: void setMaxHeight(java.lang.Double)
io.flutter.plugin.common.StandardMessageCodec: void writeBytes(java.io.ByteArrayOutputStream,byte[])
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$6800(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewBufferResized: void run(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewBufferSize)
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget$1: SurfaceTexturePlatformViewRenderTarget$1(io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget)
io.flutter.Log: void println(int,java.lang.String,java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setLoadWithOverviewMode(android.webkit.WebSettings,boolean)
io.flutter.plugin.editing.TextInputPlugin: void saveEditableSizeAndTransform(double,double,double[])
io.flutter.plugins.webviewflutter.PigeonApiView$Companion: PigeonApiView$Companion()
io.flutter.app.FlutterFragmentActivity: void onTrimMemory(int)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: void loadAssets(int,java.lang.String)
org.chromium.support_lib_boundary.ProxyControllerBoundaryInterface: void setProxyOverride(java.lang.String[][],java.lang.String[],java.lang.Runnable,java.util.concurrent.Executor,boolean)
androidx.fragment.app.Fragment: java.lang.Object getExitTransition()
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl: void onPreEngineRestart()
io.flutter.view.FlutterView$2: void surfaceCreated(android.view.SurfaceHolder)
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void removeRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void ensureAlive()
io.flutter.plugins.webviewflutter.ViewProxyApi: void scrollTo(android.view.View,long,long)
androidx.fragment.app.Fragment: java.util.ArrayList getSharedElementTargetNames()
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: void setJNI(io.flutter.embedding.engine.FlutterJNI)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: void setInt(java.lang.String,long,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.plugin.editing.ListenableEditingState: java.lang.String toString()
androidx.core.widget.PopupWindowCompat$Api23Impl: void setWindowLayoutType(android.widget.PopupWindow,int)
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader getImageReader()
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions: void setMaxDurationSeconds(java.lang.Long)
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl: void onEngineWillDestroy()
io.flutter.embedding.engine.systemchannels.ProcessTextChannel: void setMethodHandler(io.flutter.embedding.engine.systemchannels.ProcessTextChannel$ProcessTextMethodHandler)
io.flutter.plugins.imagepicker.ImagePickerDelegate$MediaPath: java.lang.String getMimeType()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void lambda$shouldOverrideUrlLoading$11(android.webkit.WebView,android.webkit.WebResourceRequest)
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.Boolean setString(java.lang.String,java.lang.String)
io.flutter.embedding.android.FlutterActivity: void onFlutterUiDisplayed()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$102(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
io.flutter.embedding.android.FlutterFragmentActivity: io.flutter.embedding.android.FlutterFragment retrieveExistingFlutterFragmentIfPossible()
io.flutter.embedding.android.FlutterActivity: void onStart()
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest getPigeonApiWebResourceRequest()
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void setAccessibilityMessageHandler(io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler)
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: void schedule(android.view.View,java.lang.Runnable)
io.flutter.embedding.engine.systemchannels.NavigationChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformView,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,android.view.View$OnFocusChangeListener)
io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder: android.content.Intent build(android.content.Context)
io.flutter.embedding.engine.dart.PlatformTaskQueue: PlatformTaskQueue()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$15(kotlin.Result)
io.flutter.embedding.android.FlutterActivity: boolean attachToEngineAutomatically()
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String)
io.flutter.plugins.webviewflutter.FlutterAssetManager$PluginBindingFlutterAssetManager: java.lang.String getAssetFilePathByName(java.lang.String)
androidx.appcompat.widget.ViewStubCompat: int getInflatedId()
io.flutter.plugins.urllauncher.UrlLauncher: java.lang.Boolean canLaunchUrl(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat fromValue(java.lang.String)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$FeatureInstallStateUpdatedListener: PlayStoreDeferredComponentManager$FeatureInstallStateUpdatedListener(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager)
io.flutter.view.AccessibilityBridge$2: AccessibilityBridge$2(io.flutter.view.AccessibilityBridge)
io.flutter.plugin.platform.PlatformViewsController: void detachAccessibilityBridge()
io.flutter.embedding.android.FlutterActivity: android.view.View createFlutterView()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onJsAlert(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,android.webkit.WebView,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1)
io.flutter.embedding.engine.dart.DartMessenger$TaskQueueFactory: io.flutter.embedding.engine.dart.DartMessenger$DartMessengerTaskQueue makeBackgroundTaskQueue(io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onSaveInstanceState(android.os.Bundle)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$20(kotlin.Result)
androidx.appcompat.widget.SwitchCompat: void setTrackTintMode(android.graphics.PorterDuff$Mode)
io.flutter.plugin.platform.PlatformPlugin: void access$900(io.flutter.plugin.platform.PlatformPlugin)
io.flutter.embedding.android.AndroidTouchProcessor: int getPointerDeviceTypeForToolType(int)
io.flutter.plugins.webviewflutter.PigeonApiCookieManager: void setAcceptThirdPartyCookies(android.webkit.CookieManager,android.webkit.WebView,boolean)
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.loader.FlutterApplicationInfo access$200(io.flutter.embedding.engine.loader.FlutterLoader)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2200(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: io.flutter.plugins.webviewflutter.ConsoleMessageLevel[] values()
androidx.fragment.app.Fragment: androidx.core.app.SharedElementCallback getEnterTransitionCallback()
io.flutter.embedding.engine.FlutterEngineGroup$Options: io.flutter.embedding.engine.FlutterEngineGroup$Options setAutomaticallyRegisterPlugins(boolean)
io.flutter.view.TextureRegistry$SurfaceTextureEntry$-CC: void $default$setOnFrameConsumedListener(io.flutter.view.TextureRegistry$SurfaceTextureEntry,io.flutter.view.TextureRegistry$OnFrameConsumedListener)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType getType()
io.flutter.plugins.imagepicker.ImagePickerDelegate: void finishWithAlreadyActiveError(io.flutter.plugins.imagepicker.Messages$Result)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.RestorationChannel access$200(io.flutter.embedding.engine.FlutterEngine)
io.flutter.view.AccessibilityBridge: int access$7400()
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: void clear(java.util.List,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions$Builder: io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions$Builder setMaxHeight(java.lang.Double)
androidx.core.app.ActivityCompat$Api21Impl: void setExitSharedElementCallback(android.app.Activity,android.app.SharedElementCallback)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: WindowInsetsCompat$BuilderImpl20()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation getCompletion()
io.flutter.plugin.text.ProcessTextPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.Log: void d(java.lang.String,java.lang.String,java.lang.Throwable)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromActivityInternal()
androidx.fragment.app.Fragment: void setArguments(android.os.Bundle)
io.flutter.embedding.android.FlutterActivity: void onBackPressed()
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.engine.FlutterEngine getFlutterEngine()
io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder: io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder backgroundMode(io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setWebViewMediaIntegrityApiStatus(int,java.util.Map)
io.flutter.plugin.editing.InputConnectionAdaptor: int clampIndexToEditable(int,android.text.Editable)
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions$Builder: io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions build()
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager$Companion: void setUpMessageHandlers$lambda$3$lambda$2(io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.PigeonApiFileChooserParams: void pigeon_newInstance(android.webkit.WebChromeClient$FileChooserParams,kotlin.jvm.functions.Function1)
io.flutter.view.AccessibilityBridge: boolean isAccessibilityEnabled()
io.flutter.embedding.engine.plugins.service.ServicePluginBinding: java.lang.Object getLifecycle()
io.flutter.plugins.urllauncher.Messages$WebViewOptions$Builder: Messages$WebViewOptions$Builder()
io.flutter.plugin.platform.PlatformViewsController$1: void dispose(int)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult$Builder: io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult$Builder setError(io.flutter.plugins.imagepicker.Messages$CacheRetrievalError)
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: android.os.Bundle createArgs()
io.flutter.embedding.android.ExclusiveAppComponent: void detachFromFlutterEngine()
io.flutter.embedding.android.FlutterActivity: java.lang.String getCachedEngineGroupId()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
androidx.appcompat.widget.AppCompatTextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi$-CC: void lambda$setUp$3(io.flutter.plugins.urllauncher.Messages$UrlLauncherApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.FlutterEngineGroup$Options: FlutterEngineGroup$Options(android.content.Context)
io.flutter.view.AccessibilityBridge$SemanticsNode: float min(float,float,float,float)
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: android.view.Surface createSurface()
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$SentConfiguration: SettingsChannel$ConfigurationQueue$SentConfiguration(android.util.DisplayMetrics)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifier(int)
androidx.appcompat.widget.SearchView: void setInputType(int)
io.flutter.embedding.engine.systemchannels.SpellCheckChannel: io.flutter.embedding.engine.systemchannels.SpellCheckChannel$SpellCheckMethodHandler access$000(io.flutter.embedding.engine.systemchannels.SpellCheckChannel)
androidx.activity.Api34Impl: android.window.BackEvent createOnBackEvent(float,float,float,int)
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel: void pigeon_newInstance(io.flutter.plugins.webviewflutter.JavaScriptChannel,kotlin.jvm.functions.Function1)
androidx.fragment.app.Fragment: void postponeEnterTransition()
androidx.lifecycle.ProcessLifecycleOwner$attach$1: ProcessLifecycleOwner$attach$1(androidx.lifecycle.ProcessLifecycleOwner)
io.flutter.view.AccessibilityBridge: int getHoveredObjectId()
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: void setDouble(java.lang.String,double,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.appcompat.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted()
io.flutter.view.AccessibilityBridge: void handleTouchExploration(float,float,boolean)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setOffscreenPreRaster(boolean)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$19$lambda$18(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] $values()
io.flutter.view.FlutterNativeView: FlutterNativeView(android.content.Context,boolean)
io.flutter.app.FlutterActivity: void onActivityResult(int,int,android.content.Intent)
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: boolean isReleased()
androidx.fragment.app.Fragment: int getNextTransition()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest getPigeonApiWebResourceRequest()
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets dispatchApplyWindowInsets(android.view.View,android.view.WindowInsets)
io.flutter.view.AccessibilityBridge: void setAccessibilityPaneTitle(java.lang.String)
androidx.fragment.app.Fragment: void performStop()
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()
androidx.appcompat.widget.LinearLayoutCompat: int getGravity()
io.flutter.plugins.webviewflutter.PigeonApiWebStorage$Companion: void setUpMessageHandlers$lambda$3$lambda$2(io.flutter.plugins.webviewflutter.PigeonApiWebStorage,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.editing.SpellCheckPlugin: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])
io.flutter.plugin.common.StandardMessageCodec: byte[] readBytes(java.nio.ByteBuffer)
androidx.fragment.app.Fragment: void onOptionsMenuClosed(android.view.Menu)
io.flutter.plugins.imagepicker.Messages$NullableResult: void error(java.lang.Throwable)
io.flutter.plugin.platform.PlatformViewRenderTarget: void scheduleFrame()
io.flutter.plugins.webviewflutter.PigeonApiWebView: void removeJavaScriptChannel(android.webkit.WebView,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler getPigeonApiHttpAuthHandler()
io.flutter.plugin.editing.ListenableEditingState$1: ListenableEditingState$1(io.flutter.plugin.editing.ListenableEditingState,android.view.View,boolean,android.text.Editable)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Drawable loadDrawable(android.graphics.drawable.Icon,android.content.Context)
io.flutter.plugins.webviewflutter.WebViewProxyApi: void lambda$evaluateJavascript$0(kotlin.jvm.functions.Function1,java.lang.String)
io.flutter.embedding.engine.plugins.activity.ActivityControlSurface: void detachFromActivity()
io.flutter.app.FlutterPluginRegistry: io.flutter.view.FlutterView access$300(io.flutter.app.FlutterPluginRegistry)
androidx.datastore.preferences.protobuf.FieldType$Collection: androidx.datastore.preferences.protobuf.FieldType$Collection valueOf(java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$8$lambda$7(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.imagepicker.ImagePickerDelegate: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.embedding.android.RenderMode: RenderMode(java.lang.String,int)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: void addDartCreatedInstance(java.lang.Object,long)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: void setDeprecatedStringList(java.lang.String,java.util.List,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.app.FlutterPluginRegistry: FlutterPluginRegistry(io.flutter.view.FlutterNativeView,android.content.Context)
io.flutter.embedding.engine.FlutterEngineGroup$Options: io.flutter.embedding.engine.FlutterEngineGroup$Options setWaitForRestorationData(boolean)
io.flutter.embedding.android.FlutterTextureView$1: void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError: boolean equals(java.lang.Object)
io.flutter.plugin.platform.PlatformPlugin$1: void setClipboardData(java.lang.String)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverControlSurface getBroadcastReceiverControlSurface()
io.flutter.plugins.urllauncher.Messages$WebViewOptions: int hashCode()
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: void onShowCustomView(android.view.View,android.webkit.WebChromeClient$CustomViewCallback)
androidx.fragment.app.Fragment: void restoreViewState(android.os.Bundle)
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: DartExecutor$DartEntrypoint(java.lang.String,java.lang.String,java.lang.String)
androidx.appcompat.widget.SwitchCompat: int getCompoundPaddingLeft()
io.flutter.embedding.android.FlutterFragment: boolean shouldDispatchAppLifecycleState()
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: FlutterRenderer$SurfaceTextureRegistryEntry(io.flutter.embedding.engine.renderer.FlutterRenderer,long,android.graphics.SurfaceTexture)
io.flutter.embedding.engine.FlutterJNI: void ensureNotAttachedToNative()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void sendAppPrivateCommand(java.lang.String,android.os.Bundle)
androidx.core.view.ViewGroupCompat$Api21Impl: boolean isTransitionGroup(android.view.ViewGroup)
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener: void onDownloadStart(android.webkit.DownloadListener,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,kotlin.jvm.functions.Function1)
io.flutter.view.TextureRegistry$SurfaceTextureEntry: android.graphics.SurfaceTexture surfaceTexture()
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: void setEncodedStringList(java.lang.String,java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: boolean equals(java.lang.Object)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void setEncodedStringList(java.lang.String,java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.core.view.ViewCompat$Api21Impl: void setNestedScrollingEnabled(android.view.View,boolean)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void performPrivateCommand(int,java.lang.String,android.os.Bundle)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: TextInputChannel$TextCapitalization(java.lang.String,int,java.lang.String)
io.flutter.plugins.flutter_plugin_android_lifecycle.R: R()
io.flutter.embedding.android.KeyboardManager$Responder: void handleEvent(android.view.KeyEvent,io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback)
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getType(java.lang.Object)
io.flutter.plugins.urllauncher.WebViewActivity$2: WebViewActivity$2(io.flutter.plugins.urllauncher.WebViewActivity)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$3702(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: void clear(java.util.List,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.recyclerview.widget.RecyclerView: int getItemDecorationCount()
io.flutter.plugins.webviewflutter.WebViewProxyApi: io.flutter.plugins.webviewflutter.ProxyApiRegistrar getPigeonRegistrar()
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State valueOf(java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2$1: SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2$1(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2,kotlin.coroutines.Continuation)
io.flutter.plugin.editing.InputConnectionAdaptor: void closeConnection()
io.flutter.plugins.webviewflutter.CookieManagerProxyApi: void lambda$removeAllCookies$0(kotlin.jvm.functions.Function1,java.lang.Boolean)
io.flutter.plugins.webviewflutter.GeolocationPermissionsCallbackProxyApi: GeolocationPermissionsCallbackProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void finalize()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.plugin.common.JSONMessageCodec: JSONMessageCodec()
io.flutter.view.AccessibilityViewEmbedder: void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.embedding.android.MotionEventTracker$MotionEventId: long access$000(io.flutter.embedding.android.MotionEventTracker$MotionEventId)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: void setTextSelectable(android.view.accessibility.AccessibilityNodeInfo,boolean)
androidx.preference.ListPreference: ListPreference(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.SwitchCompat: void setThumbTextPadding(int)
io.flutter.embedding.android.FlutterActivity$1: void onBackProgressed(android.window.BackEvent)
io.flutter.plugins.webviewflutter.ConsoleMessageProxyApi: java.lang.String message(android.webkit.ConsoleMessage)
io.flutter.plugins.webviewflutter.PigeonApiCookieManager$Companion: void setUpMessageHandlers$lambda$3$lambda$2(io.flutter.plugins.webviewflutter.PigeonApiCookieManager,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.FlutterFragment: java.lang.String getAppBundlePath()
androidx.appcompat.widget.AppCompatImageView: void setSupportImageTintList(android.content.res.ColorStateList)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onJsPrompt(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1)
io.flutter.plugin.common.StandardMessageCodec: void writeInt(java.io.ByteArrayOutputStream,int)
io.flutter.plugins.imagepicker.ImagePickerDelegate$FileUriResolver: android.net.Uri resolveFileProviderUriForFile(java.lang.String,java.io.File)
io.flutter.view.AccessibilityBridge$1: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
io.flutter.plugins.imagepicker.FileUtils: void copy(java.io.InputStream,java.io.OutputStream)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setBrieflyShowPassword(boolean)
androidx.appcompat.widget.Toolbar: void setPopupTheme(int)
io.flutter.plugins.webviewflutter.PigeonApiWebView: void evaluateJavascript(android.webkit.WebView,java.lang.String,kotlin.jvm.functions.Function1)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void onMoveToForeground()
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: void setWebViewRendererClient(java.lang.reflect.InvocationHandler)
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder: KeyboardManager$PerEventCallbackBuilder(io.flutter.embedding.android.KeyboardManager,android.view.KeyEvent)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void requestExistingInputState()
io.flutter.plugins.imagepicker.Messages$SourceSpecification: Messages$SourceSpecification()
androidx.core.view.ViewCompat$Api29Impl: android.view.View$AccessibilityDelegate getAccessibilityDelegate(android.view.View)
androidx.datastore.preferences.protobuf.FieldType$Collection: androidx.datastore.preferences.protobuf.FieldType$Collection[] values()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getAll$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$2: void success(java.util.List)
androidx.core.view.ViewCompat$Api26Impl: android.view.autofill.AutofillId getAutofillId(android.view.View)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder renderMode(io.flutter.embedding.android.RenderMode)
io.flutter.plugins.imagepicker.ImagePickerPlugin: void pickMedia(io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions,io.flutter.plugins.imagepicker.Messages$GeneralOptions,io.flutter.plugins.imagepicker.Messages$Result)
androidx.core.app.ActivityCompat$Api23Impl: void requestPermissions(android.app.Activity,java.lang.String[],int)
io.flutter.plugins.sharedpreferences.StringListResult$Companion: StringListResult$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.Log: void wtf(java.lang.String,java.lang.String,java.lang.Throwable)
io.flutter.plugin.platform.PlatformViewsController: void setSoftwareRendering(boolean)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void detachFromFlutterEngine()
androidx.appcompat.widget.AppCompatTextView: void setPrecomputedText(androidx.core.text.PrecomputedTextCompat)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization fromValue(java.lang.String)
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions: boolean equals(java.lang.Object)
io.flutter.embedding.engine.FlutterEngine$1: void onPreEngineRestart()
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1: void onFrameAvailable(android.graphics.SurfaceTexture)
io.flutter.plugins.imagepicker.Messages$SourceCamera: io.flutter.plugins.imagepicker.Messages$SourceCamera[] values()
io.flutter.embedding.android.FlutterView$4: FlutterView$4(io.flutter.embedding.android.FlutterView)
io.flutter.embedding.android.FlutterImageView: android.view.Surface getSurface()
io.flutter.plugin.platform.PlatformViewWrapper: boolean onTouchEvent(android.view.MotionEvent)
androidx.fragment.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.plugins.sharedpreferences.MessagesAsyncPigeonCodec: MessagesAsyncPigeonCodec()
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.LocalizationChannel$1: LocalizationChannel$1(io.flutter.embedding.engine.systemchannels.LocalizationChannel)
androidx.fragment.app.Fragment: void callStartTransitionListener(boolean)
io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback: PigeonApiCustomViewCallback(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder destroyEngineWithFragment(boolean)
io.flutter.plugin.common.PluginRegistry$NewIntentListener: boolean onNewIntent(android.content.Intent)
io.flutter.plugin.common.MethodChannel: void setWarnsOnChannelOverflow(boolean)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.view.FlutterView view()
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetBottom(android.view.DisplayCutout)
androidx.fragment.app.Fragment: void performLowMemory()
io.flutter.embedding.android.FlutterImageView: void resume()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void updateSystemUiOverlays()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onRestoreInstanceState(android.os.Bundle)
androidx.exifinterface.media.ExifInterfaceUtils$Api21Impl: java.io.FileDescriptor dup(java.io.FileDescriptor)
io.flutter.embedding.engine.dart.DartExecutor$DartCallback: DartExecutor$DartCallback(android.content.res.AssetManager,java.lang.String,io.flutter.view.FlutterCallbackInformation)
androidx.profileinstaller.ProfileInstallerInitializer$Choreographer16Impl: void postFrameCallback(java.lang.Runnable)
io.flutter.embedding.engine.FlutterJNI: void cleanupMessageData(long)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$11$lambda$10(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$40$lambda$39(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint createDefault()
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: void onCancel(java.lang.Object,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.app.FlutterFragmentActivity: void onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.plugin.platform.PlatformViewsController$1: void lambda$resize$0(io.flutter.plugin.platform.VirtualDisplayController,float,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewBufferResized)
io.flutter.embedding.android.FlutterFragmentActivity: io.flutter.embedding.engine.FlutterEngine provideFlutterEngine(android.content.Context)
androidx.appcompat.widget.ViewStubCompat: void setLayoutInflater(android.view.LayoutInflater)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void lambda$doUpdateVisitedHistory$15(android.webkit.WebView,java.lang.String,boolean)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView$1: void onGlobalFocusChanged(android.view.View,android.view.View)
io.flutter.plugin.platform.PlatformViewsController: void initializeRootImageViewIfNeeded()
io.flutter.plugin.common.StandardMessageCodec: StandardMessageCodec()
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: java.util.concurrent.atomic.AtomicReference access$300(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler)
io.flutter.view.FlutterView: io.flutter.view.FlutterNativeView access$100(io.flutter.view.FlutterView)
androidx.webkit.WebViewClientCompat: java.lang.String[] getSupportedFeatures()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1$1: java.lang.Object invoke(androidx.datastore.preferences.core.MutablePreferences,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription decodeAppSwitcherDescription(org.json.JSONObject)
androidx.webkit.WebViewClientCompat: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder shouldAttachEngineToActivity(boolean)
androidx.preference.EditTextPreference: EditTextPreference(android.content.Context,android.util.AttributeSet)
io.flutter.plugin.platform.PlatformViewsController: int access$1400(io.flutter.plugin.platform.PlatformViewsController,double)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$OnFlingListener getOnFlingListener()
io.flutter.embedding.android.FlutterView: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)
io.flutter.plugin.platform.PlatformViewsController: android.util.SparseArray access$300(io.flutter.plugin.platform.PlatformViewsController)
io.flutter.plugin.platform.PlatformViewsController$1: void createForPlatformViewLayer(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: java.lang.Double getDouble(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.appcompat.widget.Toolbar: void setNavigationContentDescription(java.lang.CharSequence)
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode[] values()
androidx.core.view.WindowInsetsCompat$Impl: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder transparencyMode(io.flutter.embedding.android.TransparencyMode)
io.flutter.embedding.android.FlutterImageView: void closeImageReader()
androidx.core.widget.NestedScrollView: float getVerticalScrollFactorCompat()
androidx.fragment.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)
io.flutter.plugin.common.MethodCodec: io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer)
androidx.activity.OnBackPressedCallback: boolean isEnabled()
androidx.appcompat.widget.LinearLayoutCompat: void setDividerDrawable(android.graphics.drawable.Drawable)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient$Companion: void setUpMessageHandlers$lambda$3$lambda$2(io.flutter.plugins.webviewflutter.PigeonApiWebViewClient,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.FlutterActivity: void onTrimMemory(int)
io.flutter.app.FlutterActivityEvents: void onPause()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)
androidx.recyclerview.widget.RecyclerView: void setAdapter(androidx.recyclerview.widget.RecyclerView$Adapter)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void maybeWaitOnFence(android.media.Image)
androidx.appcompat.widget.DialogTitle: DialogTitle(android.content.Context,android.util.AttributeSet)
io.flutter.plugin.platform.PlatformViewsController: boolean validateDirection(int)
io.flutter.embedding.android.FlutterTextureView: boolean shouldNotify()
androidx.core.view.VelocityTrackerCompat$Api34Impl: float getAxisVelocity(android.view.VelocityTracker,int)
io.flutter.view.AccessibilityBridge: boolean onAccessibilityHoverEvent(android.view.MotionEvent)
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: android.media.ImageReader createImageReader29()
io.flutter.embedding.android.FlutterTextureView: void init()
io.flutter.embedding.engine.systemchannels.NavigationChannel: void pushRoute(java.lang.String)
io.flutter.view.FlutterNativeView: void send(java.lang.String,java.nio.ByteBuffer)
androidx.fragment.app.FragmentActivity: void onPause()
io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice: io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice valueOf(java.lang.String)
io.flutter.plugin.platform.VirtualDisplayController$2$1: VirtualDisplayController$2$1(io.flutter.plugin.platform.VirtualDisplayController$2)
io.flutter.plugins.webviewflutter.PigeonApiWebView: android.webkit.WebSettings settings(android.webkit.WebView)
io.flutter.plugins.webviewflutter.ResultCompat: ResultCompat(java.lang.Object)
androidx.core.app.NotificationManagerCompat$Api24Impl: int getImportance(android.app.NotificationManager)
io.flutter.embedding.engine.loader.ResourceExtractor: void access$100(java.lang.String,java.util.HashSet)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: java.lang.String access$100(java.lang.Exception)
io.flutter.view.FlutterView: boolean dispatchKeyEvent(android.view.KeyEvent)
androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeature: FlutterRenderer$DisplayFeature(android.graphics.Rect,io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType)
androidx.appcompat.widget.ActionMenuView: int getWindowAnimations()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void lambda$onReceivedHttpAuthRequest$17(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader()
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest$Companion: PigeonApiPermissionRequest$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.embedding.engine.FlutterJNI access$400(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onPermissionRequest(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,android.webkit.PermissionRequest,kotlin.jvm.functions.Function1)
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: void onActivityPaused(android.app.Activity)
io.flutter.plugins.webviewflutter.PermissionRequestProxyApi: PermissionRequestProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.embedding.engine.systemchannels.RestorationChannel$1: void error(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugins.webviewflutter.PigeonApiWebStorage$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiWebStorage)
org.chromium.support_lib_boundary.StaticsBoundaryInterface: java.lang.String getVariationsHeader()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel)
androidx.appcompat.widget.SwitchCompat: boolean getShowText()
androidx.core.view.ViewCompat$Api30Impl: int getImportantForContentCapture(android.view.View)
androidx.core.view.ViewCompat$Api29Impl: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader: FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer,android.media.ImageReader)
androidx.exifinterface.media.ExifInterfaceUtils$Api21Impl: void close(java.io.FileDescriptor)
io.flutter.app.FlutterPluginRegistry: android.content.Context access$100(io.flutter.app.FlutterPluginRegistry)
io.flutter.plugin.platform.SurfaceProducerPlatformViewRenderTarget: void release()
io.flutter.plugin.editing.SpellCheckPlugin: void onGetSentenceSuggestions(android.view.textservice.SentenceSuggestionsInfo[])
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hadAction(io.flutter.view.AccessibilityBridge$Action)
io.flutter.embedding.android.FlutterView: void setWindowInfoListenerDisplayFeatures(androidx.window.layout.WindowLayoutInfo)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$18$lambda$17(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.activity.ComponentActivity: void removeOnPictureInPictureModeChangedListener(androidx.core.util.Consumer)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void lambda$onActivityResult$3(int,android.content.Intent)
io.flutter.embedding.android.FlutterView: void addFlutterEngineAttachmentListener(io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onGeolocationPermissionsHidePrompt$lambda$7(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugin.common.EventChannel$StreamHandler: void onCancel(java.lang.Object)
io.flutter.plugins.sharedpreferences.SharedPreferencesPluginKt: boolean preferencesFilter(java.lang.String,java.lang.Object,java.util.Set)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: void setClearFinalizedWeakReferencesInterval(long)
androidx.activity.ComponentActivity: void addOnUserLeaveHintListener(java.lang.Runnable)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: android.graphics.SurfaceTexture surfaceTexture()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$6200(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelStore getViewModelStore()
io.flutter.embedding.engine.FlutterJNI: void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
io.flutter.embedding.engine.systemchannels.RestorationChannel$1: void notImplemented()
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: void addOnUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void onDetachedFromActivity()
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode hitTest(float[],boolean)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addWindowFocusChangedListener(io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener)
io.flutter.plugin.platform.PlatformViewsController: void access$000(io.flutter.plugin.platform.PlatformViewsController,int)
io.flutter.embedding.engine.systemchannels.LifecycleChannel: LifecycleChannel(io.flutter.plugin.common.BasicMessageChannel)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: void releaseAllFinalizedInstances$lambda$5(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void pigeon_newInstance(android.webkit.WebViewClient,kotlin.jvm.functions.Function1)
androidx.appcompat.widget.ActionMenuView: int getPopupTheme()
io.flutter.view.FlutterView$3: void onPostResume()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.appcompat.widget.Toolbar: androidx.appcompat.widget.ActionMenuPresenter getOuterActionMenuPresenter()
io.flutter.embedding.engine.renderer.FlutterUiDisplayListener: void onFlutterUiDisplayed()
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: DartExecutor$DefaultBinaryMessenger(io.flutter.embedding.engine.dart.DartMessenger)
androidx.core.content.ContextCompat$Api21Impl: java.io.File getNoBackupFilesDir(android.content.Context)
io.flutter.plugin.editing.TextInputPlugin$InputTarget: TextInputPlugin$InputTarget(io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type,int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: boolean shouldDispatchAppLifecycleState()
androidx.appcompat.widget.ButtonBarLayout: void setAllowStacking(boolean)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi: void pickImages(io.flutter.plugins.imagepicker.Messages$SourceSpecification,io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions,io.flutter.plugins.imagepicker.Messages$GeneralOptions,io.flutter.plugins.imagepicker.Messages$Result)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineBroadcastReceiverPluginBinding: FlutterEngineConnectionRegistry$FlutterEngineBroadcastReceiverPluginBinding(android.content.BroadcastReceiver)
io.flutter.embedding.android.FlutterTextureView: void disconnectSurfaceFromRenderer()
io.flutter.plugins.webviewflutter.WebViewProxyApi: void goForward(android.webkit.WebView)
org.chromium.support_lib_boundary.WebViewClientBoundaryInterface: void onSafeBrowsingHit(android.webkit.WebView,android.webkit.WebResourceRequest,int,java.lang.reflect.InvocationHandler)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: java.util.List getDartEntrypointArgs()
io.flutter.app.FlutterFragmentActivity: void onCreate(android.os.Bundle)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2: SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2(kotlinx.coroutines.flow.FlowCollector)
io.flutter.plugins.webviewflutter.PigeonApiWebView: void loadDataWithBaseUrl(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
androidx.appcompat.widget.AppCompatImageButton: void setImageResource(int)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreScroll(android.view.View,int,int,int[],int[])
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void setReturnValueForShouldOverrideUrlLoading(boolean)
io.flutter.plugins.webviewflutter.ResultCompat: java.lang.Object getResult-d1pmJ48()
io.flutter.app.FlutterFragmentActivity: io.flutter.view.FlutterView createFlutterView(android.content.Context)
io.flutter.embedding.android.KeyChannelResponder: KeyChannelResponder(io.flutter.embedding.engine.systemchannels.KeyEventChannel)
io.flutter.embedding.android.FlutterView: boolean lambda$sendUserSettingsToFlutter$0(android.view.textservice.SpellCheckerInfo)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: android.content.Context activeContext()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean commitText(java.lang.CharSequence,int)
androidx.core.widget.TextViewCompat$Api23Impl: void setBreakStrategy(android.widget.TextView,int)
io.flutter.embedding.android.KeyEmbedderResponder: void handleEvent(android.view.KeyEvent,io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback)
androidx.fragment.app.Fragment: android.view.View getFocusedView()
androidx.preference.internal.PreferenceImageView: void setMaxHeight(int)
androidx.fragment.app.Fragment: void setSharedElementEnterTransition(java.lang.Object)
io.flutter.embedding.engine.loader.ResourceExtractor: io.flutter.embedding.engine.loader.ResourceExtractor addResources(java.util.Collection)
io.flutter.plugin.platform.PlatformViewWrapper: void draw(android.graphics.Canvas)
io.flutter.view.FlutterView: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)
io.flutter.embedding.engine.FlutterEngineGroup$Options: io.flutter.embedding.engine.FlutterEngineGroup$Options setDartEntrypointArgs(java.util.List)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: EventChannel$IncomingStreamRequestHandler$EventSinkImplementation(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler,io.flutter.plugin.common.EventChannel$1)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode(java.lang.String,int)
io.flutter.Log: void w(java.lang.String,java.lang.String)
io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback: void onKeyEventHandled(boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: SharedPreferencesPlugin(io.flutter.plugins.sharedpreferences.SharedPreferencesListEncoder)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient$Companion: PigeonApiWebViewClient$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler$Companion: PigeonApiHttpAuthHandler$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: SingleViewPresentation$PresentationState()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int)
org.chromium.support_lib_boundary.WebResourceErrorBoundaryInterface: int getErrorCode()
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setSearchView(androidx.appcompat.widget.SearchView)
org.chromium.support_lib_boundary.DropDataContentProviderBoundaryInterface: boolean onCreate()
io.flutter.Log: void w(java.lang.String,java.lang.String,java.lang.Throwable)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void finishWithSuccess(java.lang.String)
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void noWindowsAreFocused()
androidx.appcompat.widget.Toolbar: void setCollapseIcon(android.graphics.drawable.Drawable)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: PlatformChannel$SystemChromeStyle(java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,java.lang.Boolean,java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,java.lang.Integer,java.lang.Boolean)
androidx.appcompat.widget.AppCompatTextView: int[] getAutoSizeTextAvailableSizes()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding: java.lang.Object getLifecycle()
io.flutter.view.FlutterNativeView: java.lang.String getVMServiceUri()
androidx.appcompat.widget.SwitchCompat: int getSwitchMinWidth()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setHotspot(android.graphics.drawable.Drawable,float,float)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$7$lambda$6(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener: void onAccessibilityChanged(boolean,boolean)
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler: boolean useHttpAuthUsernamePassword(android.webkit.HttpAuthHandler)
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel)
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentActivity requireActivity()
io.flutter.plugin.editing.TextInputPlugin$2: void inspect(double,double)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setNumericShortcut(android.view.MenuItem,char,int)
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: DeferredComponentChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.plugins.imagepicker.ImageResizer: java.io.File resizedImage(android.graphics.Bitmap,java.lang.Double,java.lang.Double,int,java.lang.String)
io.flutter.app.FlutterApplication: FlutterApplication()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1$1: SharedPreferencesPlugin$clear$1$1(java.util.List,kotlin.coroutines.Continuation)
io.flutter.embedding.android.FlutterFragment: java.lang.String getInitialRoute()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void offset(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.webviewflutter.FileChooserParamsProxyApi: java.lang.String filenameHint(android.webkit.WebChromeClient$FileChooserParams)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
io.flutter.embedding.engine.FlutterJNI: void setRefreshRateFPS(float)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding: void addOnModeChangeListener(io.flutter.embedding.engine.plugins.service.ServiceAware$OnModeChangeListener)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.view.FlutterView view()
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeTextType()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.lang.String lookupKeyForAsset(java.lang.String,java.lang.String)
io.flutter.embedding.android.FlutterFragmentActivity: void onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.plugin.platform.PlatformOverlayView: boolean onHoverEvent(android.view.MotionEvent)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] $values()
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi$-CC: io.flutter.plugin.common.MessageCodec getCodec()
io.flutter.embedding.engine.renderer.FlutterRenderer: void stopRenderingToSurface()
androidx.window.area.reflectionguard.ExtensionWindowAreaStatusRequirements: int getWindowAreaStatus()
io.flutter.plugin.platform.SingleViewWindowManager: void removeCrossWindowBlurEnabledListener(java.util.function.Consumer)
io.flutter.embedding.engine.FlutterJNI: void asyncWaitForVsync(long)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient: boolean onCreateWindow(android.webkit.WebView,android.os.Message,android.webkit.WebView)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: AndroidWebkitLibraryPigeonProxyApiRegistrar(io.flutter.plugin.common.BinaryMessenger)
io.flutter.plugins.imagepicker.Messages$NullableResult: void success(java.lang.Object)
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget$1: void onImageAvailable(android.media.ImageReader)
org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setAllowContentAccess(boolean)
io.flutter.embedding.engine.systemchannels.KeyboardChannel: io.flutter.embedding.engine.systemchannels.KeyboardChannel$KeyboardMethodHandler access$000(io.flutter.embedding.engine.systemchannels.KeyboardChannel)
androidx.profileinstaller.ProfileVerifier$Api33Impl: android.content.pm.PackageInfo getPackageInfo(android.content.pm.PackageManager,android.content.Context)
androidx.fragment.app.Fragment: int getExitAnim()
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi$-CC: void lambda$setUp$1(io.flutter.plugins.urllauncher.Messages$UrlLauncherApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: void removeRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener)
io.flutter.embedding.android.FlutterFragment: boolean stillAttachedForEvent(java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void updateEditingState(int,java.lang.String,int,int,int,int)
io.flutter.view.FlutterNativeView: boolean isApplicationRunning()
io.flutter.plugin.common.StringCodec: java.nio.ByteBuffer encodeMessage(java.lang.Object)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getStableInsets()
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult fromList(java.util.ArrayList)
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.Boolean setDouble(java.lang.String,java.lang.Double)
io.flutter.embedding.engine.loader.ApplicationInfoLoader: ApplicationInfoLoader()
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode[] values()
io.flutter.plugins.webviewflutter.WebViewProxyApi: void goBack(android.webkit.WebView)
io.flutter.embedding.engine.FlutterJNI: void nativeDestroy(long)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$1600(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.example.bnm_edu.MainActivity: MainActivity()
io.flutter.embedding.engine.FlutterEngine: FlutterEngine(android.content.Context,java.lang.String[],boolean)
io.flutter.plugin.platform.PlatformPlugin: void access$300(io.flutter.plugin.platform.PlatformPlugin,java.util.List)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: kotlin.Unit lambda$onGeolocationPermissionsShowPrompt$3(kotlin.Result)
io.flutter.embedding.engine.systemchannels.SpellCheckChannel$1: SpellCheckChannel$1(io.flutter.embedding.engine.systemchannels.SpellCheckChannel)
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderControlSurface: void detachFromContentProvider()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: boolean onActivityResult(int,int,android.content.Intent)
io.flutter.embedding.android.KeyEmbedderResponder: void lambda$synchronizePressingKey$1(io.flutter.embedding.android.KeyboardMap$KeyPair,android.view.KeyEvent)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setEnterpriseAuthenticationAppLinkPolicyEnabled(boolean)
io.flutter.plugins.webviewflutter.WebResourceRequestProxyApi: java.lang.String method(android.webkit.WebResourceRequest)
org.chromium.support_lib_boundary.ProfileStoreBoundaryInterface: java.lang.reflect.InvocationHandler getProfile(java.lang.String)
io.flutter.plugins.webviewflutter.JavaScriptChannel: void lambda$postMessage$1(java.lang.String)
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void removeRearDisplayStatusListener(androidx.window.extensions.core.util.function.Consumer)
io.flutter.view.VsyncWaiter$DisplayListener: void register()
io.flutter.plugin.platform.PlatformPlugin: void access$500(io.flutter.plugin.platform.PlatformPlugin)
io.flutter.embedding.engine.loader.FlutterLoader$1: java.lang.Object call()
org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.Object convertSafeBrowsingResponse(java.lang.reflect.InvocationHandler)
io.flutter.app.FlutterActivityDelegate: io.flutter.view.FlutterView access$100(io.flutter.app.FlutterActivityDelegate)
io.flutter.embedding.android.KeyEmbedderResponder: void synchronizePressingKey(io.flutter.embedding.android.KeyboardMap$PressingGoal,boolean,long,long,android.view.KeyEvent,java.util.ArrayList)
org.chromium.support_lib_boundary.WebMessagePortBoundaryInterface: void setWebMessageCallback(java.lang.reflect.InvocationHandler)
androidx.fragment.app.Fragment: void onDestroy()
io.flutter.embedding.engine.FlutterEngineGroup: io.flutter.embedding.engine.FlutterEngine createAndRunDefaultEngine(android.content.Context)
androidx.fragment.app.Fragment: boolean isHidden()
io.flutter.plugin.mouse.MouseCursorPlugin: MouseCursorPlugin(io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate,io.flutter.embedding.engine.systemchannels.MouseCursorChannel)
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment requireParentFragment()
io.flutter.view.AccessibilityBridge: int access$7500()
io.flutter.embedding.engine.FlutterEngineGroup$Options: java.util.List getDartEntrypointArgs()
androidx.appcompat.widget.FitWindowsLinearLayout: FitWindowsLinearLayout(android.content.Context,android.util.AttributeSet)
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: kotlin.enums.EnumEntries getEntries()
androidx.fragment.app.Fragment: void setUserVisibleHint(boolean)
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager)
androidx.fragment.app.DefaultSpecialEffectsController$Api24Impl: long totalDuration(android.animation.AnimatorSet)
androidx.preference.SwitchPreference: SwitchPreference(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: void removeOnWindowFocusChangedListener(io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener)
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi: java.lang.Boolean canLaunchUrl(java.lang.String)
io.flutter.embedding.android.FlutterTextureView: void access$400(io.flutter.embedding.android.FlutterTextureView)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setDropDownBackgroundResource(int)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi: io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult retrieveLostResults()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.imagepicker.Messages$SourceSpecification$Builder: io.flutter.plugins.imagepicker.Messages$SourceSpecification$Builder setCamera(io.flutter.plugins.imagepicker.Messages$SourceCamera)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean handleKeyEvent(android.view.KeyEvent)
io.flutter.plugin.common.MethodChannel$IncomingResultHandler: void reply(java.nio.ByteBuffer)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event valueOf(java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$23$lambda$22(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.FlutterFragmentActivity: void onTrimMemory(int)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalType: io.flutter.plugins.imagepicker.Messages$CacheRetrievalType[] $values()
io.flutter.embedding.engine.FlutterJNI: long performNativeAttach(io.flutter.embedding.engine.FlutterJNI)
androidx.appcompat.widget.AppCompatTextView: void setSupportCompoundDrawablesTintList(android.content.res.ColorStateList)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.engine.FlutterShellArgs getFlutterShellArgs()
io.flutter.embedding.android.FlutterTextureView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: boolean getOffscreenPreRaster()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void clear(java.util.List,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onPermissionRequest$lambda$3(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
androidx.core.view.ViewCompat$Api29Impl: android.view.contentcapture.ContentCaptureSession getContentCaptureSession(android.view.View)
androidx.core.view.ViewCompat$Api26Impl: void setNextClusterForwardId(android.view.View,int)
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: void setUp(io.flutter.plugin.common.BinaryMessenger,android.content.Context)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$30$lambda$29(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: void release()
io.flutter.embedding.engine.systemchannels.LocalizationChannel: void sendLocales(java.util.List)
androidx.appcompat.widget.SwitchCompat: void setTrackDrawable(android.graphics.drawable.Drawable)
io.flutter.view.FlutterView$ViewportMetrics: FlutterView$ViewportMetrics()
io.flutter.plugins.webviewflutter.PigeonApiWebView: void postUrl(android.webkit.WebView,java.lang.String,byte[])
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getFillAlpha()
androidx.appcompat.widget.AppCompatImageButton: void setImageBitmap(android.graphics.Bitmap)
io.flutter.plugin.editing.TextInputPlugin$1: void clearClient()
io.flutter.plugins.webviewflutter.DisplayListenerProxy: void onPreWebViewInitialization(android.hardware.display.DisplayManager)
io.flutter.util.TraceSection: io.flutter.util.TraceSection scoped(java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: android.content.res.ColorStateList getBackgroundTintList(android.view.View)
androidx.recyclerview.widget.RecyclerView: void setLayoutFrozen(boolean)
io.flutter.plugin.platform.PlatformPlugin$2: void onSystemUiVisibilityChange(int)
org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.String[] getSupportedFeatures()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$5000(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$24$lambda$23(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: void setString(java.lang.String,java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
org.chromium.support_lib_boundary.TracingControllerBoundaryInterface: boolean isTracing()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiDownloadListener getPigeonApiDownloadListener()
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder transparencyMode(io.flutter.embedding.android.TransparencyMode)
io.flutter.plugin.platform.PlatformViewsController: void ensureValidRequest(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.util.List getPlatformEncodedStringList(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.view.FlutterNativeView: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
io.flutter.embedding.engine.systemchannels.SpellCheckChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.view.TextureRegistry$-CC: void $default$onTrimMemory(io.flutter.view.TextureRegistry,int)
io.flutter.app.FlutterPluginRegistry: boolean onViewDestroy(io.flutter.view.FlutterNativeView)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void lambda$onActivityResult$2(int)
io.flutter.plugins.imagepicker.ImagePickerDelegate$PermissionManager: boolean isPermissionGranted(java.lang.String)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener)
androidx.core.view.ViewCompat$Api26Impl: android.view.View keyboardNavigationClusterSearch(android.view.View,android.view.View,int)
androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact[] values()
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi$-CC: void lambda$setUp$4(io.flutter.plugins.urllauncher.Messages$UrlLauncherApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.window.extensions.core.util.function.Predicate: boolean test(java.lang.Object)
io.flutter.plugins.sharedpreferences.SharedPreferencesError: java.lang.Object getDetails()
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: PlayStoreDeferredComponentManager(android.content.Context,io.flutter.embedding.engine.FlutterJNI)
androidx.appcompat.widget.LinearLayoutCompat: void setBaselineAlignedChildIndex(int)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.ProcessTextChannel getProcessTextChannel()
io.flutter.embedding.android.FlutterFragment: void onFlutterSurfaceViewCreated(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient$1: WebChromeClientProxyApi$SecureWebChromeClient$1(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient,android.webkit.WebView)
androidx.core.view.ViewCompat$Api26Impl: boolean isImportantForAutofill(android.view.View)
io.flutter.plugins.urllauncher.UrlLauncherPlugin: void onDetachedFromActivityForConfigChanges()
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: kotlin.Unit lambda$onShowFileChooser$5(boolean,android.webkit.ValueCallback,io.flutter.plugins.webviewflutter.ResultCompat)
io.flutter.embedding.android.FlutterFragmentActivity: void ensureFlutterFragmentCreated()
io.flutter.plugins.webviewflutter.PigeonApiWebView: android.webkit.WebView pigeon_defaultConstructor()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDeprecatedStringList$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDeprecatedStringList$1: SharedPreferencesPlugin$setDeprecatedStringList$1(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,java.lang.String,java.lang.String,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.FlutterJNI: void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)
io.flutter.embedding.engine.renderer.FlutterRenderer: FlutterRenderer(io.flutter.embedding.engine.FlutterJNI)
io.flutter.embedding.android.KeyData$Type: KeyData$Type(java.lang.String,int,long)
io.flutter.plugin.platform.PlatformViewsController: void detach()
androidx.core.app.ActivityCompat$Api21Impl: void setEnterSharedElementCallback(android.app.Activity,android.app.SharedElementCallback)
io.flutter.embedding.android.FlutterFragmentActivity: java.lang.String getInitialRoute()
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: java.util.List getKeys(java.util.List,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setTextScaleFactor(float)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: FlutterEngineConnectionRegistry(android.content.Context,io.flutter.embedding.engine.FlutterEngine,io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterEngineGroup)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.AccessibilityChannel getAccessibilityChannel()
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void restoreSystemUiOverlays()
androidx.core.view.WindowInsetsCompat$Impl20: boolean isRound()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] $values()
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment getTargetFragment()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$17(kotlin.Result)
io.flutter.embedding.engine.loader.FlutterLoader$InitResult: FlutterLoader$InitResult(java.lang.String,java.lang.String,java.lang.String)
io.flutter.embedding.android.FlutterView: void attachToFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
io.flutter.embedding.android.FlutterActivity: void configureWindowForTransparency()
io.flutter.embedding.android.FlutterActivity: android.window.OnBackInvokedCallback createOnBackInvokedCallback()
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setDomStorageEnabled(android.webkit.WebSettings,boolean)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: void setUniqueId(android.view.accessibility.AccessibilityNodeInfo,java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getAll$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$4802(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int)
io.flutter.plugins.imagepicker.Messages$GeneralOptions: io.flutter.plugins.imagepicker.Messages$GeneralOptions fromList(java.util.ArrayList)
androidx.core.content.FileProvider$Api21Impl: java.io.File[] getExternalMediaDirs(android.content.Context)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: FlutterMutatorsStack$FlutterMutator(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Rect)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: boolean isAlgorithmicDarkeningAllowed()
io.flutter.view.FlutterView: void postRun()
androidx.appcompat.widget.SearchView: int getInputType()
io.flutter.plugins.webviewflutter.WebViewProxyApi: android.webkit.WebView pigeon_defaultConstructor()
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setForceDarkBehavior(int)
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: ProcessLifecycleOwner$attach$1$onActivityPreCreated$1(androidx.lifecycle.ProcessLifecycleOwner)
io.flutter.plugin.editing.TextEditingDelta: int getNewComposingStart()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void delayFirstAndroidViewDraw(io.flutter.embedding.android.FlutterView)
io.flutter.plugin.platform.PlatformViewsController: void access$1300(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.VirtualDisplayController)
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.platform.VirtualDisplayController: void onInputConnectionUnlocked()
io.flutter.plugins.imagepicker.ImagePickerDelegate: void handleCaptureImageResult(int)
io.flutter.view.FlutterView: io.flutter.view.FlutterView$ZeroSides calculateShouldZeroSides()
io.flutter.embedding.engine.systemchannels.TextInputChannel: java.util.HashMap createEditingStateJSON(java.lang.String,int,int,int,int)
io.flutter.embedding.engine.dart.DartExecutor: void executeDartEntrypoint(io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint,java.util.List)
org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getStatics()
androidx.appcompat.widget.AppCompatImageButton: android.content.res.ColorStateList getSupportBackgroundTintList()
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$28$lambda$27(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.MotionEventTracker$MotionEventId: io.flutter.embedding.android.MotionEventTracker$MotionEventId from(long)
io.flutter.embedding.engine.FlutterJNI: void nativeMarkTextureFrameAvailable(long,long)
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture()
io.flutter.embedding.engine.plugins.PluginRegistry: void remove(java.lang.Class)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1: SharedPreferencesPlugin$getInt$1(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,kotlin.jvm.internal.Ref$ObjectRef,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager: java.lang.String getAssetFilePathByName(io.flutter.plugins.webviewflutter.FlutterAssetManager,java.lang.String)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: FlutterMutatorView(android.content.Context)
io.flutter.embedding.engine.loader.ResourceExtractor: void deleteFiles(java.lang.String,java.util.HashSet)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: int getSpeculativeLoadingStatus()
io.flutter.plugin.platform.PlatformViewsController$1: void resize(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewBufferResized)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,androidx.webkit.WebResourceErrorCompat)
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1: void run()
androidx.activity.ComponentActivity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)
io.flutter.embedding.engine.FlutterEngine: io.flutter.plugin.localization.LocalizationPlugin getLocalizationPlugin()
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: java.lang.Object getLifecycle()
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback getPigeonApiCustomViewCallback()
io.flutter.plugin.platform.PlatformViewsController: void onDetachedFromJNI()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: kotlin.Unit lambda$onReceivedError$6(kotlin.Result)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setAlgorithmicDarkeningAllowed(boolean)
io.flutter.embedding.engine.FlutterJNI: long nativeAttach(io.flutter.embedding.engine.FlutterJNI)
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: FlutterFragment$NewEngineInGroupFragmentBuilder(java.lang.Class,java.lang.String)
io.flutter.plugin.platform.SurfaceProducerPlatformViewRenderTarget: SurfaceProducerPlatformViewRenderTarget(io.flutter.view.TextureRegistry$SurfaceProducer)
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager requireFragmentManager()
io.flutter.view.AccessibilityBridge$SemanticsNode: float access$5800(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
org.chromium.support_lib_boundary.SafeBrowsingResponseBoundaryInterface: void backToSafety(boolean)
io.flutter.plugins.webviewflutter.CustomViewCallbackProxyApi: void onCustomViewHidden(android.webkit.WebChromeClient$CustomViewCallback)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.LifecycleChannel getLifecycleChannel()
io.flutter.embedding.engine.dart.DartMessenger: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
androidx.appcompat.view.menu.ListMenuItemView: void setCheckable(boolean)
io.flutter.embedding.android.FlutterActivity: void onResume()
io.flutter.view.AccessibilityViewEmbedder: boolean performAction(int,int,android.os.Bundle)
io.flutter.plugins.sharedpreferences.StringListResult: java.util.List toList()
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat)
org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getProxyController()
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: TextInputPlugin$InputTarget$Type(java.lang.String,int)
io.flutter.plugins.urllauncher.UrlLauncherPlugin: void onDetachedFromActivity()
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: BasicMessageChannel$IncomingMessageHandler(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler)
org.chromium.support_lib_boundary.ProfileStoreBoundaryInterface: boolean deleteProfile(java.lang.String)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder dartEntrypointArgs(java.util.List)
io.flutter.embedding.engine.FlutterJNI: void loadDartDeferredLibrary(int,java.lang.String[])
io.flutter.Log: void wtf(java.lang.String,java.lang.String)
androidx.appcompat.widget.LinearLayoutCompat: void setDividerPadding(int)
io.flutter.plugin.mouse.MouseCursorPlugin$1: MouseCursorPlugin$1(io.flutter.plugin.mouse.MouseCursorPlugin)
io.flutter.embedding.android.FlutterFragment: boolean shouldDelayFirstAndroidViewDraw()
io.flutter.FlutterInjector: void reset()
io.flutter.embedding.engine.FlutterJNI: void onBeginFrame()
io.flutter.plugins.sharedpreferences.Messages$FlutterError: Messages$FlutterError(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.FlutterShellArgs: void add(java.lang.String)
io.flutter.embedding.engine.loader.ApplicationInfoLoader: void skipTag(android.content.res.XmlResourceParser)
io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback$Companion: PigeonApiGeolocationPermissionsCallback$Companion()
io.flutter.embedding.android.FlutterView: android.view.PointerIcon getSystemPointerIcon(int)
androidx.core.view.ViewCompat$Api21Impl: void setTranslationZ(android.view.View,float)
androidx.fragment.app.Fragment: void setEnterTransition(java.lang.Object)
io.flutter.embedding.engine.loader.ApplicationInfoLoader: io.flutter.embedding.engine.loader.FlutterApplicationInfo load(android.content.Context)
io.flutter.plugin.platform.PlatformOverlayView: PlatformOverlayView(android.content.Context)
androidx.appcompat.widget.ActionBarContextView: int getContentHeight()
io.flutter.plugins.imagepicker.ImagePickerDelegate: void useFrontCamera(android.content.Intent)
io.flutter.plugins.webviewflutter.WebViewPoint: WebViewPoint(long,long)
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder$Callback: void onKeyEventHandled(boolean)
io.flutter.view.FlutterView: void preRun()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2: SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2(kotlinx.coroutines.flow.FlowCollector,androidx.datastore.preferences.core.Preferences$Key,io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin)
io.flutter.plugins.webviewflutter.DownloadListenerProxyApi: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.view.FlutterView: java.lang.String getLookupKeyForAsset(java.lang.String)
androidx.fragment.app.FragmentActivity: void markFragmentsCreated()
io.flutter.plugin.platform.SingleViewPresentation$ImmContext: java.lang.Object getSystemService(java.lang.String)
androidx.core.content.FileProvider: android.net.Uri getUriForFile(android.content.Context,java.lang.String,java.io.File,java.lang.String)
io.flutter.app.FlutterActivityDelegate: void onCreate(android.os.Bundle)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix getFinalMatrix()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType fromValue(java.lang.String)
androidx.appcompat.widget.SwitchCompat: android.graphics.PorterDuff$Mode getTrackTintMode()
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.BinaryMessenger access$400(io.flutter.plugin.common.EventChannel)
androidx.fragment.app.Fragment: void initState()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
io.flutter.plugin.text.ProcessTextPlugin: boolean onActivityResult(int,int,android.content.Intent)
io.flutter.embedding.android.FlutterImageView: boolean acquireLatestImage()
androidx.appcompat.view.menu.ExpandedMenuView: ExpandedMenuView(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode[] values()
io.flutter.app.FlutterActivityDelegate: boolean onBackPressed()
io.flutter.plugin.common.MethodChannel: MethodChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: java.util.List getPlatformEncodedStringList(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.plugin.editing.InputConnectionAdaptor$KeyboardDelegate: boolean handleEvent(android.view.KeyEvent)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$2$lambda$1(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.editing.ListenableEditingState: int getSelectionEnd()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: void completeInstallError(java.lang.String,java.lang.String)
androidx.core.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertServiceWorkerSettings(java.lang.Object)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void pigeon_newInstance(android.webkit.WebSettings,kotlin.jvm.functions.Function1)
io.flutter.FlutterInjector: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void add(java.util.Set)
io.flutter.plugin.platform.PlatformViewWrapper: boolean onInterceptTouchEvent(android.view.MotionEvent)
io.flutter.app.FlutterActivity: void onPostResume()
androidx.fragment.app.Fragment: void performStart()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding(android.app.Activity,androidx.lifecycle.Lifecycle)
androidx.core.content.res.ResourcesCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)
io.flutter.plugins.sharedpreferences.SharedPreferencesListEncoder: java.util.List decode(java.lang.String)
io.flutter.view.AccessibilityBridge$LocaleStringAttribute: AccessibilityBridge$LocaleStringAttribute()
androidx.core.widget.EdgeEffectCompat$Api31Impl: android.widget.EdgeEffect create(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.loader.FlutterLoader: FlutterLoader(io.flutter.embedding.engine.FlutterJNI)
androidx.appcompat.widget.AppCompatImageView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
kotlin.coroutines.jvm.internal.SuspendLambda: int getArity()
io.flutter.embedding.engine.FlutterJNI: void nativeImageHeaderCallback(long,int,int)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long getChildId(android.view.accessibility.AccessibilityNodeInfo,int)
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void setPathData(androidx.core.graphics.PathParser$PathDataNode[])
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long access$600(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityRecord)
androidx.activity.OnBackPressedCallback: void addCancellable(androidx.activity.Cancellable)
androidx.appcompat.widget.ActionBarOverlayLayout: void setOverlayMode(boolean)
androidx.appcompat.widget.SwitchCompat: void setThumbPosition(float)
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.PluginRegistry$Registrar addViewDestroyListener(io.flutter.plugin.common.PluginRegistry$ViewDestroyListener)
io.flutter.embedding.engine.FlutterJNI: void lambda$decodeImage$0(long,android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener)
androidx.appcompat.widget.ActionBarContainer: void setPrimaryBackground(android.graphics.drawable.Drawable)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle,int,boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeWidth(float)
androidx.appcompat.widget.Toolbar: void setTitleMarginTop(int)
androidx.core.widget.ImageViewCompat$Api21Impl: android.content.res.ColorStateList getImageTintList(android.widget.ImageView)
androidx.window.layout.adapter.sidecar.SidecarCompat$TranslatingCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions: Messages$MediaSelectionOptions()
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetRight(android.view.DisplayCutout)
io.flutter.plugins.webviewflutter.PigeonApiWebViewPoint: long y(io.flutter.plugins.webviewflutter.WebViewPoint)
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: android.os.Bundle createArgs()
io.flutter.embedding.engine.FlutterJNI: float getScaledFontSize(float,int)
androidx.appcompat.widget.SearchView: void setMaxWidth(int)
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: int hashCode()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture,java.lang.Runnable)
androidx.core.widget.TextViewCompat$Api23Impl: int getBreakStrategy(android.widget.TextView)
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.plugins.PluginRegistry getPlugins()
androidx.core.view.WindowInsetsCompat$Impl20: void setRootViewData(androidx.core.graphics.Insets)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: java.lang.Object getAppComponent()
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$31$lambda$30(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setAttributionBehavior(int)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceResponse: PigeonApiWebResourceResponse(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle decodeSystemChromeStyle(org.json.JSONObject)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$1: void onFlutterUiNoLongerDisplayed()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.view.TextureRegistry$SurfaceTextureEntry registerSurfaceTexture(android.graphics.SurfaceTexture)
io.flutter.plugin.platform.PlatformViewsController$1: long createForTextureLayer(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$3: Messages$ImagePickerApi$3(java.util.ArrayList,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.view.TextureRegistry$OnTrimMemoryListener: void onTrimMemory(int)
io.flutter.plugins.webviewflutter.AndroidWebkitLibrary_gKt: io.flutter.plugins.webviewflutter.AndroidWebKitError access$createConnectionError(java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiView$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiView)
io.flutter.plugin.platform.PlatformView$-CC: void $default$onInputConnectionLocked(io.flutter.plugin.platform.PlatformView)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: void onTrimMemory(int)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel getPigeonApiJavaScriptChannel()
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)
org.chromium.support_lib_boundary.PrefetchParamsBoundaryInterface: java.util.Map getAdditionalHeaders()
io.flutter.embedding.engine.renderer.FlutterRenderer: void removeOnTrimMemoryListener(io.flutter.view.TextureRegistry$OnTrimMemoryListener)
io.flutter.plugins.webviewflutter.FlutterViewFactory: FlutterViewFactory(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager)
androidx.fragment.app.Fragment: android.os.Bundle requireArguments()
io.flutter.view.AccessibilityBridge$SemanticsNode: void access$4900(io.flutter.view.AccessibilityBridge$SemanticsNode,java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: java.lang.String detailedExceptionString(java.lang.Exception)
io.flutter.view.FlutterMain: void ensureInitializationCompleteAsync(android.content.Context,java.lang.String[],android.os.Handler,java.lang.Runnable)
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setUserAgentString(android.webkit.WebSettings,java.lang.String)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: AndroidWebkitLibraryPigeonInstanceManager(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager$PigeonFinalizationListener)
io.flutter.embedding.engine.FlutterEngine: void attachToJni()
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: FlutterFragment$NewEngineFragmentBuilder()
io.flutter.embedding.engine.FlutterJNI: boolean getIsSoftwareRenderingEnabled()
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Drawable createAdaptiveIconDrawable(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
io.flutter.plugin.platform.PlatformPlugin: void access$000(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean performContextMenuAction(int)
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer access$500(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$FeatureInstallStateUpdatedListener: void onStateUpdate(com.google.android.play.core.splitinstall.SplitInstallSessionState)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean performEditorAction(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener: void onWindowFocusChanged(boolean)
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout: SingleViewPresentation$AccessibilityDelegatingFrameLayout(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.view.View)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiDownloadListener getPigeonApiDownloadListener()
kotlin.random.Random: Random()
io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback: PigeonApiGeolocationPermissionsCallback(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] $values()
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.util.Map getAll(java.lang.String,java.util.List)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void setAccessibilityDataSensitive(android.view.accessibility.AccessibilityNodeInfo,boolean)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiConsoleMessage getPigeonApiConsoleMessage()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: boolean containsInstance(java.lang.Object)
io.flutter.embedding.engine.systemchannels.KeyboardChannel$1: KeyboardChannel$1(io.flutter.embedding.engine.systemchannels.KeyboardChannel)
androidx.appcompat.widget.ActionBarContainer: void setTransitioning(boolean)
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: long getId()
androidx.fragment.app.Fragment: android.view.LayoutInflater getLayoutInflater()
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$2900(io.flutter.view.AccessibilityBridge$SemanticsNode)
androidx.core.view.WindowInsetsCompat$BuilderImpl: WindowInsetsCompat$BuilderImpl()
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: kotlin.Unit lambda$onJsAlert$8(android.webkit.JsResult,io.flutter.plugins.webviewflutter.ResultCompat)
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: MouseCursorChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.plugin.platform.PlatformViewsController: void access$1800(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.VirtualDisplayController)
androidx.fragment.app.Fragment: void onActivityCreated(android.os.Bundle)
io.flutter.view.FlutterView: void resetWillNotDraw(boolean,boolean)
io.flutter.plugins.urllauncher.Messages$BrowserOptions: io.flutter.plugins.urllauncher.Messages$BrowserOptions fromList(java.util.ArrayList)
io.flutter.plugin.common.BinaryMessenger$-CC: void $default$setMessageHandler(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
io.flutter.embedding.engine.FlutterJNI: void onPreEngineRestart()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void attachToContentProvider(android.content.ContentProvider,androidx.lifecycle.Lifecycle)
io.flutter.embedding.engine.renderer.FlutterRenderer: void startRenderingToSurface(android.view.Surface,boolean)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void onImage(android.media.ImageReader,android.media.Image)
androidx.recyclerview.widget.RecyclerView: int getMinFlingVelocity()
androidx.core.view.ViewCompat$Api21Impl: boolean startNestedScroll(android.view.View,int)
io.flutter.plugins.sharedpreferences.StringListResult: java.lang.String toString()
io.flutter.embedding.android.FlutterActivity: void startBackGesture(android.window.BackEvent)
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow[] values()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setString$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View)
io.flutter.embedding.engine.dart.DartExecutor: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
androidx.core.view.MenuItemCompat$Api26Impl: android.graphics.PorterDuff$Mode getIconTintMode(android.view.MenuItem)
io.flutter.embedding.engine.dart.DartMessenger: io.flutter.plugin.common.BinaryMessenger$TaskQueue makeBackgroundTaskQueue(io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions)
io.flutter.view.FlutterView: void disableTransparentBackground()
io.flutter.embedding.engine.renderer.FlutterRenderer$2: void onPause(androidx.lifecycle.LifecycleOwner)
io.flutter.embedding.android.MotionEventTracker: android.view.MotionEvent pop(io.flutter.embedding.android.MotionEventTracker$MotionEventId)
io.flutter.view.FlutterView$2: FlutterView$2(io.flutter.view.FlutterView)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$36$lambda$35(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.common.MethodChannel: MethodChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void release()
androidx.fragment.app.Fragment: java.lang.String getString(int)
io.flutter.plugins.webviewflutter.PigeonApiFileChooserParams: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getDropDataProvider()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.Image acquireLatestImage()
androidx.appcompat.widget.ActionBarOverlayLayout: void setActionBarVisibilityCallback(androidx.appcompat.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback)
io.flutter.embedding.android.FlutterView: void redispatch(android.view.KeyEvent)
androidx.appcompat.widget.Toolbar: void setContentInsetStartWithNavigation(int)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void getBoundsInWindow(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$2502(io.flutter.view.AccessibilityBridge$SemanticsNode,java.lang.String)
androidx.fragment.app.FragmentActivity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)
io.flutter.plugin.platform.PlatformView$-CC: void $default$onInputConnectionUnlocked(io.flutter.plugin.platform.PlatformView)
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: void addWebMessageListener(java.lang.String,java.lang.String[],java.lang.reflect.InvocationHandler)
io.flutter.view.AccessibilityBridge$3: void onChange(boolean,android.net.Uri)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] $values()
kotlin.coroutines.jvm.internal.ContinuationImpl: void releaseIntercepted()
androidx.appcompat.widget.SwitchCompat: int getThumbScrollRange()
io.flutter.view.FlutterView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] values()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
io.flutter.embedding.engine.systemchannels.BackGestureChannel: void commitBackGesture()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: int getFillColor()
androidx.window.layout.adapter.sidecar.DistinctElementSidecarCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
androidx.appcompat.view.menu.ActionMenuItemView: void setCheckable(boolean)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void chooseMediaFromGallery(io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions,io.flutter.plugins.imagepicker.Messages$GeneralOptions,io.flutter.plugins.imagepicker.Messages$Result)
io.flutter.view.FlutterView: FlutterView(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.SearchView: void setIconifiedByDefault(boolean)
io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback$Companion: PigeonApiCustomViewCallback$Companion()
io.flutter.embedding.engine.FlutterEngineGroup$Options: boolean getAutomaticallyRegisterPlugins()
io.flutter.embedding.android.FlutterActivity: void onPause()
io.flutter.plugin.platform.SingleViewWindowManager: android.view.WindowMetrics getMaximumWindowMetrics()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$2(kotlin.Result)
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int)
io.flutter.plugin.common.BasicMessageChannel$Reply: void reply(java.lang.Object)
androidx.fragment.app.FragmentActivity: androidx.loader.app.LoaderManager getSupportLoaderManager()
io.flutter.embedding.android.FlutterFragmentActivity: android.os.Bundle getMetaData()
io.flutter.embedding.android.FlutterEngineConfigurator: void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1: SharedPreferencesPlugin$getBool$1(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,kotlin.jvm.internal.Ref$ObjectRef,kotlin.coroutines.Continuation)
io.flutter.plugin.common.MethodChannel$Result: void success(java.lang.Object)
io.flutter.embedding.android.FlutterView$5: FlutterView$5(io.flutter.embedding.android.FlutterView,io.flutter.embedding.engine.renderer.FlutterRenderer,java.lang.Runnable)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setJavaScriptCanOpenWindowsAutomatically(android.webkit.WebSettings,boolean)
androidx.recyclerview.widget.LinearLayoutManager: LinearLayoutManager(android.content.Context,android.util.AttributeSet,int,int)
androidx.preference.DropDownPreference: DropDownPreference(android.content.Context,android.util.AttributeSet)
io.flutter.plugins.sharedpreferences.StringListResult: io.flutter.plugins.sharedpreferences.StringListLookupResultType getType()
io.flutter.embedding.engine.dart.DartExecutor: boolean isExecutingDart()
androidx.recyclerview.widget.RecyclerView: int getScrollState()
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: FlutterFragment$NewEngineInGroupFragmentBuilder(java.lang.String)
io.flutter.plugins.webviewflutter.WebViewFlutterPlugin: void onDetachedFromActivity()
io.flutter.plugins.webviewflutter.AndroidWebKitError: AndroidWebKitError(java.lang.String,java.lang.String,java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifierBase(int)
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: FlutterFragment$CachedEngineFragmentBuilder(java.lang.Class,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean access$800(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: void setQuality(java.lang.Long)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: void setIgnoreCallsToDart(boolean)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi$-CC: void lambda$setUp$5(io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.appcompat.widget.ActionBarContextView: void setCustomView(android.view.View)
io.flutter.plugin.platform.PlatformViewsController: long configureForVirtualDisplay(io.flutter.plugin.platform.PlatformView,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest)
androidx.appcompat.widget.SearchView: void setSuggestionsAdapter(androidx.cursoradapter.widget.CursorAdapter)
io.flutter.embedding.engine.systemchannels.BackGestureChannel: void cancelBackGesture()
io.flutter.embedding.android.FlutterActivity: void onStop()
io.flutter.view.FlutterView: void onConfigurationChanged(android.content.res.Configuration)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void setBoundsInWindow(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect)
io.flutter.plugin.common.MethodChannel$MethodCallHandler: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.imagepicker.ImagePickerDelegate$OnPathReadyListener: void onPathReady(java.lang.String)
io.flutter.view.AccessibilityBridge: boolean performSetText(io.flutter.view.AccessibilityBridge$SemanticsNode,int,android.os.Bundle)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setSafeBrowsingEnabled(boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions copy(java.lang.String,boolean)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host access$000(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate)
org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getWebkitToCompatConverter()
io.flutter.embedding.android.FlutterFragment: void cleanUpFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
io.flutter.embedding.engine.systemchannels.SpellCheckChannel: void setSpellCheckMethodHandler(io.flutter.embedding.engine.systemchannels.SpellCheckChannel$SpellCheckMethodHandler)
androidx.appcompat.widget.ActionMenuView: void setPresenter(androidx.appcompat.widget.ActionMenuPresenter)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedHeightMinor()
androidx.activity.ComponentActivity: void invalidateMenu()
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient$1: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback)
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget$1: ImageReaderPlatformViewRenderTarget$1(io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget)
androidx.appcompat.widget.Toolbar: androidx.appcompat.widget.DecorToolbar getWrapper()
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: boolean getUseDataStore()
androidx.appcompat.widget.Toolbar: void setSubtitle(java.lang.CharSequence)
androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag[] values()
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void setQueryFromAppProcessEnabled(android.view.accessibility.AccessibilityNodeInfo,android.view.View,boolean)
io.flutter.plugins.webviewflutter.AndroidWebkitLibrary_gKt: java.util.List wrapResult(java.lang.Object)
io.flutter.plugins.sharedpreferences.StringListLookupResultType: kotlin.enums.EnumEntries getEntries()
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: int hashCode()
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: void onCreate(androidx.lifecycle.LifecycleOwner)
io.flutter.plugins.webviewflutter.FlutterAssetManagerProxyApi: io.flutter.plugins.webviewflutter.ProxyApiRegistrar getPigeonRegistrar()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: boolean shouldDestroyEngineWithHost()
io.flutter.plugins.webviewflutter.PigeonApiWebView: void goBack(android.webkit.WebView)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onPause()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: kotlin.Unit lambda$onReceivedError$8(kotlin.Result)
io.flutter.view.FlutterView: void destroy()
io.flutter.embedding.android.FlutterActivity: void onDestroy()
androidx.core.view.WindowInsetsCompat$BuilderImpl20: android.view.WindowInsets createWindowInsetsInstance()
io.flutter.plugin.common.PluginRegistry$ViewDestroyListener: boolean onViewDestroy(io.flutter.view.FlutterNativeView)
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: java.lang.Integer inputActionFromTextInputAction(java.lang.String)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.engine.FlutterEngineGroup$Options addEntrypointOptions(io.flutter.embedding.engine.FlutterEngineGroup$Options)
androidx.core.view.ViewCompat$Api26Impl: void setTooltipText(android.view.View,java.lang.CharSequence)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebViewPoint getPigeonApiWebViewPoint()
androidx.fragment.app.Fragment: void setInitialSavedState(androidx.fragment.app.Fragment$SavedState)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: long getMinDurationBetweenContentChangeMillis(android.view.accessibility.AccessibilityNodeInfo)
io.flutter.embedding.android.AndroidTouchProcessor: int getPointerChangeForAction(int)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Icon toIcon(androidx.core.graphics.drawable.IconCompat,android.content.Context)
io.flutter.embedding.engine.systemchannels.PlatformChannel: PlatformChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest: PigeonApiWebResourceRequest(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
androidx.fragment.app.Fragment: java.util.ArrayList getSharedElementSourceNames()
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType fromJson(org.json.JSONObject)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.embedding.engine.loader.ResourceExtractor: ResourceExtractor(java.lang.String,java.lang.String,android.content.pm.PackageManager,android.content.res.AssetManager)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values()
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView: void setHoverListener(androidx.appcompat.widget.MenuItemHoverListener)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: java.lang.Object getInstance(long)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: TextInputChannel$TextEditState(java.lang.String,int,int,int,int)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$10(kotlin.Result)
io.flutter.plugins.webviewflutter.ResultCompat: boolean isFailure()
io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: void onPause(androidx.lifecycle.LifecycleOwner)
androidx.appcompat.widget.SwitchCompat: void setTrackTintList(android.content.res.ColorStateList)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: android.app.Activity attachedActivity()
io.flutter.embedding.android.KeyboardManager: void onUnhandled(android.view.KeyEvent)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: io.flutter.plugins.sharedpreferences.StringListResult getStringList(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener: void onDownloadStart$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.dart.DartMessenger: void disableBufferingIncomingMessages()
io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback: void onCustomViewHidden(android.webkit.WebChromeClient$CustomViewCallback)
androidx.appcompat.widget.AppCompatTextView: android.content.res.ColorStateList getSupportCompoundDrawablesTintList()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setRotation(float)
io.flutter.embedding.engine.renderer.FlutterRenderer: void onTrimMemory(int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: java.lang.String getAppBundlePath()
io.flutter.embedding.engine.FlutterJNI: void dispatchEmptyPlatformMessage(java.lang.String,int)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: io.flutter.plugins.imagepicker.Messages$CacheRetrievalError getError()
org.chromium.support_lib_boundary.WebViewClientBoundaryInterface: void onReceivedHttpError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void onAndroidAccessibilityDisabled()
io.flutter.embedding.android.FlutterView$3: void onFlutterUiNoLongerDisplayed()
io.flutter.plugin.platform.SingleViewFakeWindowViewGroup: SingleViewFakeWindowViewGroup(android.content.Context)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi: AndroidWebkitLibraryPigeonInstanceManagerApi(io.flutter.plugin.common.BinaryMessenger)
io.flutter.embedding.engine.plugins.service.ServicePluginBinding: void addOnModeChangeListener(io.flutter.embedding.engine.plugins.service.ServiceAware$OnModeChangeListener)
androidx.datastore.preferences.protobuf.WireFormat$JavaType: androidx.datastore.preferences.protobuf.WireFormat$JavaType valueOf(java.lang.String)
io.flutter.plugin.platform.PlatformViewsController: void lambda$configureForTextureLayerComposition$1(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest,android.view.View,boolean)
io.flutter.plugin.editing.ListenableEditingState: void setSpan(java.lang.Object,int,int,int)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: kotlin.Unit lambda$onReceivedHttpError$4(kotlin.Result)
io.flutter.Log: void v(java.lang.String,java.lang.String,java.lang.Throwable)
org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.Object convertServiceWorkerSettings(java.lang.reflect.InvocationHandler)
io.flutter.view.VsyncWaiter: VsyncWaiter(io.flutter.embedding.engine.FlutterJNI)
androidx.fragment.app.Fragment: void performPause()
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState()
io.flutter.plugins.imagepicker.Messages$GeneralOptions: java.lang.Boolean getAllowMultiple()
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest: void grant(android.webkit.PermissionRequest,java.util.List)
io.flutter.plugin.editing.TextEditingDelta: java.lang.CharSequence getOldText()
androidx.core.view.WindowInsetsCompat$Impl29: WindowInsetsCompat$Impl29(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
io.flutter.plugins.imagepicker.ImagePickerDelegate$FileUriResolver: void getFullImagePath(android.net.Uri,io.flutter.plugins.imagepicker.ImagePickerDelegate$OnPathReadyListener)
io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager: void destroy()
androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
io.flutter.embedding.android.FlutterView: void attachOverlaySurfaceToRender(io.flutter.embedding.android.FlutterImageView)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: boolean onTouchEvent(android.view.MotionEvent)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void clearFocus(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.webviewflutter.PigeonApiWebViewPoint: long x(io.flutter.plugins.webviewflutter.WebViewPoint)
io.flutter.plugins.imagepicker.ImagePickerDelegate: java.io.File createTemporaryWritableFile(java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getRotation()
androidx.fragment.app.FragmentActivity: void validateRequestPermissionsRequestCode(int)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode getBackgroundMode()
io.flutter.embedding.engine.systemchannels.RestorationChannel$1: void success(java.lang.Object)
androidx.fragment.app.Fragment: void setAllowEnterTransitionOverlap(boolean)
io.flutter.plugin.platform.WindowManagerHandler: WindowManagerHandler(android.view.WindowManager,io.flutter.plugin.platform.SingleViewFakeWindowViewGroup)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean isFocusable()
io.flutter.plugins.urllauncher.UrlLauncher: void ensureActivity()
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides valueOf(java.lang.String)
io.flutter.plugin.editing.TextInputPlugin$MinMax: void inspect(double,double)
io.flutter.plugin.common.StandardMessageCodec: void readAlignment(java.nio.ByteBuffer,int)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonCodec: void writeValue(java.io.ByteArrayOutputStream,java.lang.Object)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean handleHorizontalMovement(boolean,boolean)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: void setReturnValueForOnConsoleMessage(boolean)
io.flutter.view.FlutterView$FirstFrameListener: void onFirstFrame()
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: boolean component2()
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderPluginBinding: android.content.ContentProvider getContentProvider()
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode getRootSemanticsNode()
io.flutter.view.AccessibilityBridge$StringAttribute: AccessibilityBridge$StringAttribute()
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: long id()
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind valueOf(java.lang.String)
io.flutter.plugin.text.ProcessTextPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: android.view.WindowManager getWindowManager()
io.flutter.plugins.imagepicker.ImagePickerPlugin: io.flutter.plugins.imagepicker.ImagePickerDelegate constructDelegate(android.app.Activity)
io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback: void pigeon_newInstance(android.webkit.GeolocationPermissions$Callback,kotlin.jvm.functions.Function1)
io.flutter.view.AccessibilityBridge: android.view.View access$100(io.flutter.view.AccessibilityBridge)
androidx.webkit.WebViewClientCompat: boolean onWebAuthnIntent(android.webkit.WebView,android.app.PendingIntent,java.lang.reflect.InvocationHandler)
io.flutter.embedding.android.FlutterSurfaceView$2: FlutterSurfaceView$2(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void addExistingListenersToActivityPluginBinding()
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: io.flutter.plugins.sharedpreferences.StringListResult getStringList(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.embedding.engine.dart.DartExecutor: void disableBufferingIncomingMessages()
io.flutter.embedding.android.KeyboardMap: KeyboardMap()
androidx.activity.ComponentActivity: void removeOnConfigurationChangedListener(androidx.core.util.Consumer)
io.flutter.embedding.engine.loader.FlutterLoader: void startInitialization(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader$Settings)
androidx.appcompat.widget.SwitchCompat: boolean getTargetCheckedState()
androidx.core.widget.TextViewCompat$Api23Impl: void setCompoundDrawableTintList(android.widget.TextView,android.content.res.ColorStateList)
io.flutter.plugins.imagepicker.ImagePickerCache$CacheType: io.flutter.plugins.imagepicker.ImagePickerCache$CacheType[] $values()
androidx.appcompat.widget.AppCompatTextView: void setFirstBaselineToTopHeight(int)
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder handleDeeplinking(java.lang.Boolean)
androidx.recyclerview.widget.RecyclerView: void setItemViewCacheSize(int)
io.flutter.plugin.editing.TextInputPlugin: void access$700(io.flutter.plugin.editing.TextInputPlugin,double,double,double[])
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState fromJson(org.json.JSONObject)
io.flutter.plugin.editing.TextInputPlugin$1: void sendAppPrivateCommand(java.lang.String,android.os.Bundle)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeature: FlutterRenderer$DisplayFeature(android.graphics.Rect,io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType,io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState)
androidx.fragment.app.FragmentActivity: void onStart()
io.flutter.plugin.platform.PlatformViewsController: java.util.List parsePointerCoordsList(java.lang.Object,float)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void waitOnFence(android.media.Image)
androidx.fragment.app.FragmentActivity: void setEnterSharedElementCallback(androidx.core.app.SharedElementCallback)
io.flutter.plugin.mouse.MouseCursorPlugin: android.view.PointerIcon resolveSystemCursor(java.lang.String)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: java.util.Map getUserAgentMetadataMap()
io.flutter.embedding.engine.renderer.FlutterRenderer: void swapSurface(android.view.Surface)
io.flutter.embedding.android.FlutterActivity: java.lang.String getAppBundlePath()
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: void releaseAllFinalizedInstances()
io.flutter.plugin.editing.FlutterTextUtils: boolean isRegionalIndicatorSymbol(int)
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: java.lang.Long getQuality()
androidx.core.view.WindowInsetsCompat$Impl20: WindowInsetsCompat$Impl20(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: java.lang.reflect.InvocationHandler getProfile()
io.flutter.FlutterInjector: java.util.concurrent.ExecutorService executorService()
androidx.appcompat.widget.Toolbar: void setNavigationIcon(int)
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions: java.lang.Long getMaxDurationSeconds()
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getMinWidthMajor()
io.flutter.plugin.platform.PlatformPlugin$1: void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription)
io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask: boolean extractAPK(java.io.File)
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: java.util.ArrayList toList()
io.flutter.plugins.webviewflutter.WebResourceErrorProxyApi: long errorCode(android.webkit.WebResourceError)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
io.flutter.plugins.imagepicker.ImageResizer: void copyExif(java.lang.String,java.lang.String)
androidx.fragment.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,io.flutter.embedding.android.RenderMode)
io.flutter.embedding.engine.dart.DartExecutor: int getPendingChannelResponseCount()
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$-CC: void lambda$setUp$0(io.flutter.plugins.imagepicker.Messages$ImagePickerApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface getSurface()
io.flutter.embedding.engine.FlutterJNI: void deferredComponentInstallFailure(int,java.lang.String,boolean)
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState valueOf(java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesPluginKt: androidx.datastore.core.DataStore getSharedPreferencesDataStore(android.content.Context)
androidx.appcompat.widget.AppCompatImageView: void setImageDrawable(android.graphics.drawable.Drawable)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void setFrameworkHandlesBack(boolean)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$3(kotlin.Result)
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.engine.FlutterShellArgs getFlutterShellArgs()
androidx.core.view.ViewCompat$Api21Impl: void stopNestedScroll(android.view.View)
io.flutter.embedding.android.FlutterView: void onSizeChanged(int,int,int,int)
androidx.fragment.app.Fragment: boolean getAllowReturnTransitionOverlap()
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getSystemGestureInsets()
androidx.appcompat.widget.AppCompatImageButton: void setImageDrawable(android.graphics.drawable.Drawable)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader getActiveReader()
io.flutter.embedding.engine.dart.DartMessenger$DefaultTaskQueueFactory: DartMessenger$DefaultTaskQueueFactory()
org.chromium.support_lib_boundary.DropDataContentProviderBoundaryInterface: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)
androidx.core.view.ViewCompat$Api26Impl: boolean isFocusedByDefault(android.view.View)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$21$lambda$20(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.appcompat.widget.SwitchCompat: SwitchCompat(android.content.Context,android.util.AttributeSet)
org.chromium.support_lib_boundary.JsReplyProxyBoundaryInterface: void postMessage(java.lang.String)
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient$1: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)
io.flutter.app.FlutterActivityDelegate: void onNewIntent(android.content.Intent)
androidx.appcompat.widget.ActionMenuView: android.graphics.drawable.Drawable getOverflowIcon()
androidx.core.widget.ImageViewCompat$Api21Impl: void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)
androidx.fragment.app.Fragment: boolean isDetached()
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: void success(java.lang.Object)
io.flutter.view.TextureRegistry: io.flutter.view.TextureRegistry$SurfaceTextureEntry registerSurfaceTexture(android.graphics.SurfaceTexture)
io.flutter.plugins.imagepicker.ImagePickerPlugin: io.flutter.plugins.imagepicker.ImagePickerDelegate getImagePickerDelegate()
io.flutter.embedding.engine.loader.ResourceExtractor: void access$200(java.io.InputStream,java.io.OutputStream)
io.flutter.plugins.urllauncher.WebViewActivity: void onCreate(android.os.Bundle)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$6500(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugin.platform.PlatformViewsController: android.util.SparseArray getOverlayLayerViews()
io.flutter.plugins.webviewflutter.PigeonApiCookieManager$Companion: PigeonApiCookieManager$Companion()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: android.app.Activity getActivity()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
io.flutter.embedding.engine.systemchannels.SettingsChannel: SettingsChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.view.AccessibilityBridge$SemanticsNode: void access$5300(io.flutter.view.AccessibilityBridge$SemanticsNode,float[],java.util.Set,boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1: SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1(kotlinx.coroutines.flow.Flow,androidx.datastore.preferences.core.Preferences$Key)
io.flutter.embedding.android.AndroidTouchProcessor: void addPointerForIndex(android.view.MotionEvent,int,int,int,android.graphics.Matrix,java.nio.ByteBuffer)
io.flutter.plugin.common.JSONUtil: JSONUtil()
io.flutter.plugin.common.MethodCall: java.lang.Object argument(java.lang.String)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void lambda$onPageFinished$3(android.webkit.WebView,java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$30$lambda$29(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityCreated(android.app.Activity,android.os.Bundle)
androidx.appcompat.widget.AppCompatTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: PigeonApiWebView$Companion()
io.flutter.plugins.webviewflutter.PigeonApiConsoleMessage: PigeonApiConsoleMessage(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.plugins.imagepicker.ImagePickerDelegate$2: void getFullImagePath(android.net.Uri,io.flutter.plugins.imagepicker.ImagePickerDelegate$OnPathReadyListener)
io.flutter.embedding.engine.renderer.FlutterRenderer: void clearDeadListeners()
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener access$100(io.flutter.embedding.engine.dart.DartExecutor)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setWebauthnSupport(int)
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager access$000(io.flutter.embedding.engine.systemchannels.DeferredComponentChannel)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: boolean hasSelection()
androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelStore getViewModelStore()
io.flutter.plugin.common.StandardMessageCodec: void writeLong(java.io.ByteArrayOutputStream,long)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2$1: SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2$1(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback$Companion: PigeonApiCustomViewCallback$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: kotlin.Unit lambda$onReceivedHttpAuthRequest$16(kotlin.Result)
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.CharSequence getLabel()
androidx.appcompat.widget.Toolbar: void setTitle(java.lang.CharSequence)
androidx.fragment.app.Fragment: void setEnterSharedElementCallback(androidx.core.app.SharedElementCallback)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$4600(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: void addOnSaveStateListener(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi$-CC: void lambda$setUp$6(io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceErrorCompat: java.lang.String description(androidx.webkit.WebResourceErrorCompat)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback getPigeonApiCustomViewCallback()
io.flutter.plugins.webviewflutter.PigeonApiView: void pigeon_newInstance(android.view.View,kotlin.jvm.functions.Function1)
androidx.fragment.app.Fragment: java.lang.CharSequence getText(int)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView$1: FlutterMutatorView$1(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView,android.view.View$OnFocusChangeListener,android.view.View)
androidx.appcompat.widget.Toolbar: void setLogo(android.graphics.drawable.Drawable)
io.flutter.plugin.editing.TextInputPlugin: boolean handleKeyEvent(android.view.KeyEvent)
io.flutter.embedding.engine.FlutterEngineCache: void remove(java.lang.String)
androidx.core.view.ViewParentCompat$Api21Impl: boolean onNestedFling(android.view.ViewParent,android.view.View,float,float,boolean)
androidx.activity.ComponentActivity: androidx.activity.result.ActivityResultRegistry getActivityResultRegistry()
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityStopped(android.app.Activity)
io.flutter.plugin.editing.TextEditingDelta: void setDeltas(java.lang.CharSequence,java.lang.CharSequence,int,int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription: PlatformChannel$AppSwitcherDescription(int,java.lang.String)
io.flutter.embedding.engine.plugins.util.GeneratedPluginRegister: GeneratedPluginRegister()
io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener: void onPreEngineRestart()
io.flutter.embedding.engine.plugins.activity.ActivityControlSurface: void onUserLeaveHint()
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: java.lang.String getDeferredComponentInstallState(int,java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebView: void destroy(android.webkit.WebView)
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment getParentFragment()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$DelegateFactory: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate createDelegate(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler: void dispose(int)
io.flutter.embedding.engine.FlutterEngineGroup$Options: io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint getDartEntrypoint()
androidx.fragment.app.Fragment: android.os.Bundle getArguments()
io.flutter.view.FlutterNativeView: boolean isAttached()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void lambda$shouldOverrideUrlLoading$11(android.webkit.WebView,android.webkit.WebResourceRequest)
io.flutter.plugin.platform.PlatformViewsController: int toLogicalPixels(double)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: void logWarningIfFinalizationListenerHasStopped()
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: boolean validate()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$DefaultFlutterAssets: java.lang.String getAssetFilePathByName(java.lang.String)
io.flutter.embedding.android.FlutterActivity: void onNewIntent(android.content.Intent)
androidx.appcompat.widget.AppCompatImageView: void setImageURI(android.net.Uri)
io.flutter.view.FlutterRunArguments: FlutterRunArguments()
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String getLookupKeyForAsset(java.lang.String)
androidx.fragment.app.Fragment: boolean isInLayout()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.plugins.imagepicker.Messages$SourceSpecification$Builder: io.flutter.plugins.imagepicker.Messages$SourceSpecification build()
io.flutter.embedding.android.FlutterView: boolean onTouchEvent(android.view.MotionEvent)
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions: io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions fromList(java.util.ArrayList)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient$Companion: PigeonApiWebViewClient$Companion()
io.flutter.view.FlutterMain: void ensureInitializationComplete(android.content.Context,java.lang.String[])
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi$-CC: void lambda$setUp$1(io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.urllauncher.Messages$PigeonCodec: java.lang.Object readValueOfType(byte,java.nio.ByteBuffer)
androidx.appcompat.widget.AppCompatImageButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.appcompat.widget.Toolbar: void setTitleMarginBottom(int)
io.flutter.plugin.platform.PlatformViewsController$1: void clearFocus(int)
io.flutter.embedding.android.AndroidTouchProcessor: int getPointerChangeForPanZoom(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] $values()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1: SharedPreferencesPlugin$setInt$1(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,long,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.WebViewProxyApi: void clearCache(android.webkit.WebView,boolean)
androidx.core.app.ActivityCompat$Api31Impl: boolean isLaunchedFromBubble(android.app.Activity)
io.flutter.embedding.android.AndroidTouchProcessor: float getVerticalScrollFactor(android.content.Context)
io.flutter.embedding.android.FlutterActivity: void commitBackGesture()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient$Companion: void setUpMessageHandlers$lambda$11$lambda$10(io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.FlutterTextureView: void changeSurfaceSize(int,int)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: void error(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugin.platform.PlatformViewRegistryImpl: boolean registerViewFactory(java.lang.String,io.flutter.plugin.platform.PlatformViewFactory)
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: void enableBufferingIncomingMessages()
androidx.transition.FragmentTransitionSupport: FragmentTransitionSupport()
io.flutter.embedding.android.KeyEmbedderResponder: void synchronizeTogglingKey(io.flutter.embedding.android.KeyboardMap$TogglingGoal,boolean,long,android.view.KeyEvent)
io.flutter.app.FlutterApplication: void setCurrentActivity(android.app.Activity)
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setUseWideViewPort(android.webkit.WebSettings,boolean)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: PigeonApiWebSettings$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: int access$200(long)
io.flutter.embedding.engine.dart.DartExecutor: void executeDartEntrypoint(io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmoji(int)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback)
io.flutter.plugins.sharedpreferences.MessagesAsync_gKt: java.util.List access$wrapError(java.lang.Throwable)
io.flutter.plugins.webviewflutter.ConsoleMessageLevel$Companion: io.flutter.plugins.webviewflutter.ConsoleMessageLevel ofRaw(int)
io.flutter.view.AccessibilityBridge$1: void onLongPress(int)
androidx.appcompat.widget.Toolbar: int getContentInsetEnd()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: PlatformChannel$SystemUiMode(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer: void addOnTrimMemoryListener(io.flutter.view.TextureRegistry$OnTrimMemoryListener)
io.flutter.plugin.editing.ListenableEditingState$EditingStateWatcher: void didChangeEditingState(boolean,boolean,boolean)
io.flutter.embedding.engine.loader.ResourceExtractor$1: ResourceExtractor$1()
io.flutter.plugins.imagepicker.ImagePickerDelegate: void launchTakeVideoWithCameraIntent()
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi: java.lang.Boolean setBool(java.lang.String,java.lang.Boolean)
io.flutter.view.FlutterView$3: FlutterView$3(io.flutter.view.FlutterView,io.flutter.plugin.platform.PlatformPlugin)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean setComposingText(java.lang.CharSequence,int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathOffset(float)
io.flutter.embedding.android.FlutterImageView: void init()
androidx.appcompat.widget.ActionBarContextView: ActionBarContextView(android.content.Context,android.util.AttributeSet)
io.flutter.plugins.webviewflutter.PigeonApiCookieManager$Companion: PigeonApiCookieManager$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void chooseImageFromGallery(io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions,boolean,io.flutter.plugins.imagepicker.Messages$Result)
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: java.lang.reflect.InvocationHandler[] createWebMessageChannel()
io.flutter.plugins.webviewflutter.AndroidWebkitLibrary_gKt: java.util.List access$wrapError(java.lang.Throwable)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: boolean hasComposing()
androidx.appcompat.widget.Toolbar: void setTitle(int)
io.flutter.view.TextureRegistry$TextureEntry: void release()
androidx.exifinterface.media.ExifInterfaceUtils$Api21Impl: long lseek(java.io.FileDescriptor,long,int)
io.flutter.plugin.common.BinaryMessenger$-CC: io.flutter.plugin.common.BinaryMessenger$TaskQueue $default$makeBackgroundTaskQueue(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions)
androidx.fragment.app.Fragment: void setPopDirection(boolean)
io.flutter.plugins.imagepicker.Messages$PigeonCodec: Messages$PigeonCodec()
io.flutter.plugin.platform.AccessibilityEventsDelegate: boolean onAccessibilityHoverEvent(android.view.MotionEvent,boolean)
io.flutter.view.TextureRegistry$SurfaceProducer: android.view.Surface getSurface()
io.flutter.embedding.android.FlutterFragment: boolean shouldRestoreAndSaveState()
androidx.fragment.app.FragmentActivity: void setExitSharedElementCallback(androidx.core.app.SharedElementCallback)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader29()
androidx.core.view.WindowInsetsCompat$Impl: void setStableInsets(androidx.core.graphics.Insets)
io.flutter.plugins.sharedpreferences.MessagesAsyncPigeonCodec: java.lang.Object readValueOfType(byte,java.nio.ByteBuffer)
io.flutter.embedding.android.FlutterFragment: FlutterFragment()
io.flutter.embedding.engine.FlutterJNI: void prefetchDefaultFontManager()
io.flutter.embedding.android.FlutterActivity: io.flutter.plugin.platform.PlatformPlugin providePlatformPlugin(android.app.Activity,io.flutter.embedding.engine.FlutterEngine)
io.flutter.plugin.platform.PlatformViewsController$1: void offset(int,double,double)
androidx.core.view.ViewGroupCompat$Api21Impl: void setTransitionGroup(android.view.ViewGroup,boolean)
androidx.appcompat.view.menu.ActionMenuItemView: void setPopupCallback(androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError: java.util.ArrayList toList()
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getOverflowIcon()
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: FlutterPlugin$FlutterPluginBinding(android.content.Context,io.flutter.embedding.engine.FlutterEngine,io.flutter.plugin.common.BinaryMessenger,io.flutter.view.TextureRegistry,io.flutter.plugin.platform.PlatformViewRegistry,io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets,io.flutter.embedding.engine.FlutterEngineGroup)
io.flutter.plugins.imagepicker.ImagePickerPlugin: void setCameraDevice(io.flutter.plugins.imagepicker.ImagePickerDelegate,io.flutter.plugins.imagepicker.Messages$SourceSpecification)
androidx.core.view.ViewCompat$Api28Impl: java.lang.Object requireViewById(android.view.View,int)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void endRearDisplayPresentationSession()
io.flutter.view.TextureRegistry$OnFrameConsumedListener: void onFrameConsumed()
io.flutter.plugins.webviewflutter.WebStorageProxyApi: android.webkit.WebStorage instance()
io.flutter.plugins.webviewflutter.ResultCompat: void success(java.lang.Object,java.lang.Object)
io.flutter.plugin.platform.PlatformOverlayView: PlatformOverlayView(android.content.Context,int,int,io.flutter.plugin.platform.AccessibilityEventsDelegate)
io.flutter.embedding.android.FlutterSurfaceView: FlutterSurfaceView(android.content.Context,android.util.AttributeSet,boolean)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void lambda$onPageStarted$1(android.webkit.WebView,java.lang.String)
io.flutter.util.ViewUtils: void calculateMaximumDisplayMetrics(android.content.Context,io.flutter.util.ViewUtils$DisplayUpdater)
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager: void pigeon_newInstance(io.flutter.plugins.webviewflutter.FlutterAssetManager,kotlin.jvm.functions.Function1)
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void appIsDetached()
io.flutter.embedding.android.FlutterActivity: boolean stillAttachedForEvent(java.lang.String)
androidx.appcompat.widget.SearchView: void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener)
androidx.appcompat.widget.AppCompatImageButton: void setSupportImageTintMode(android.graphics.PorterDuff$Mode)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void onRestoreInstanceState(android.os.Bundle)
io.flutter.BuildConfig: BuildConfig()
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader createImageReader(int,int)
io.flutter.plugin.platform.PlatformPlugin$1: PlatformPlugin$1(io.flutter.plugin.platform.PlatformPlugin)
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,io.flutter.embedding.android.FlutterTextureView)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void onPageFinished(android.webkit.WebView,java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setMediaPlaybackRequiresUserGesture(android.webkit.WebSettings,boolean)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean beginBatchEdit()
org.chromium.support_lib_boundary.WebMessageBoundaryInterface: java.lang.String getData()
io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask: java.lang.Void doInBackground(java.lang.Void[])
androidx.appcompat.widget.AppCompatTextView: void setLastBaselineToBottomHeight(int)
androidx.fragment.app.Fragment: android.view.View getAnimatingAway()
androidx.core.view.MenuItemCompat$Api26Impl: int getNumericModifiers(android.view.MenuItem)
androidx.recyclerview.widget.RecyclerView: void setScrollingTouchSlop(int)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: void lambda$new$1(android.graphics.SurfaceTexture)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.RenderMode getRenderMode()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: PigeonApiWebChromeClient(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: void setMaxWidth(java.lang.Double)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState valueOf(java.lang.String)
io.flutter.util.PathUtils: PathUtils()
io.flutter.plugin.common.MethodCodec: java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall)
io.flutter.plugins.imagepicker.R$xml: R$xml()
io.flutter.plugins.urllauncher.UrlLauncher: UrlLauncher(android.content.Context)
androidx.core.view.ViewConfigurationCompat$Api34Impl: int getScaledMinimumFlingVelocity(android.view.ViewConfiguration,int,int,int)
androidx.fragment.app.Fragment: void onLowMemory()
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: FlutterRenderer$DisplayFeatureType(java.lang.String,int,int)
io.flutter.plugins.webviewflutter.WebViewPointProxyApi: WebViewPointProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.embedding.android.FlutterFragmentActivity: boolean shouldAttachEngineToActivity()
io.flutter.plugin.editing.TextInputPlugin: void destroy()
androidx.appcompat.widget.LinearLayoutCompat: android.graphics.drawable.Drawable getDividerDrawable()
androidx.activity.ComponentActivity: void removeOnUserLeaveHintListener(java.lang.Runnable)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: void setString(java.lang.String,java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.appcompat.widget.LinearLayoutCompat: void setWeightSum(float)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void addOnUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener)
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: android.view.View getView()
io.flutter.embedding.engine.systemchannels.PlatformChannel: java.util.List access$300(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray)
io.flutter.embedding.android.FlutterActivity$1: void onBackCancelled()
io.flutter.util.ViewUtils$ViewVisitor: boolean run(android.view.View)
io.flutter.embedding.engine.plugins.PluginRegistry: void removeAll()
io.flutter.plugin.common.PluginRegistry: java.lang.Object valuePublishedByPlugin(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: void setBackgroundResource(int)
io.flutter.plugins.urllauncher.Messages$WebViewOptions$Builder: io.flutter.plugins.urllauncher.Messages$WebViewOptions$Builder setEnableDomStorage(java.lang.Boolean)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void setPlatformViewClient(int,boolean)
io.flutter.embedding.android.KeyData: java.nio.ByteBuffer toBytes()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1: SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1(kotlinx.coroutines.flow.Flow,androidx.datastore.preferences.core.Preferences$Key)
io.flutter.plugins.webviewflutter.DownloadListenerProxyApi: io.flutter.plugins.webviewflutter.ProxyApiRegistrar getPigeonRegistrar()
io.flutter.embedding.engine.FlutterJNI: void ensureAttachedToNative()
io.flutter.embedding.engine.dart.DartExecutor$DartCallback: java.lang.String toString()
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsRegionalIndicator(int)
io.flutter.plugin.platform.PlatformPlugin$1: void setPreferredOrientations(int)
io.flutter.plugin.platform.SingleViewWindowManager: SingleViewWindowManager(android.view.WindowManager,io.flutter.plugin.platform.SingleViewFakeWindowViewGroup)
org.chromium.support_lib_boundary.ProfileStoreBoundaryInterface: java.lang.reflect.InvocationHandler getOrCreateProfile(java.lang.String)
androidx.core.widget.TextViewCompat$Api24Impl: android.icu.text.DecimalFormatSymbols getInstance(java.util.Locale)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceError: void pigeon_newInstance(android.webkit.WebResourceError,kotlin.jvm.functions.Function1)
androidx.recyclerview.widget.RecyclerView: void setOnFlingListener(androidx.recyclerview.widget.RecyclerView$OnFlingListener)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)
io.flutter.plugin.common.StandardMessageCodec: void writeDouble(java.io.ByteArrayOutputStream,double)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void install()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean isAttachedToContentProvider()
io.flutter.embedding.engine.dart.DartMessenger: int getPendingChannelResponseCount()
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager$Companion: void setUpMessageHandlers$lambda$5$lambda$4(io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void release()
androidx.core.view.ViewCompat$Api28Impl: void setScreenReaderFocusable(android.view.View,boolean)
io.flutter.plugin.common.EventChannel: java.lang.String access$200(io.flutter.plugin.common.EventChannel)
androidx.activity.ComponentActivity: androidx.lifecycle.viewmodel.CreationExtras getDefaultViewModelCreationExtras()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugin.common.MessageCodec getCodec()
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.app.FlutterActivityEvents: void onNewIntent(android.content.Intent)
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: FlutterRenderer$ViewportMetrics()
io.flutter.plugin.platform.PlatformViewWrapper: PlatformViewWrapper(android.content.Context)
io.flutter.embedding.engine.dart.DartExecutor: void onDetachedFromJNI()
androidx.appcompat.widget.ActionBarContainer: void setSplitBackground(android.graphics.drawable.Drawable)
io.flutter.embedding.engine.dart.DartMessenger: void handleError(java.lang.Error)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void removeOnWindowFocusChangedListener(io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener)
io.flutter.plugins.imagepicker.ImagePickerPlugin: void onDetachedFromActivityForConfigChanges()
io.flutter.plugins.imagepicker.Messages$VoidResult: void success()
io.flutter.embedding.engine.plugins.service.ServiceControlSurface: void attachToService(android.app.Service,androidx.lifecycle.Lifecycle,boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: android.content.SharedPreferences createSharedPreferences(io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: void setDouble(java.lang.String,double,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.embedding.android.FlutterFragment: boolean attachToEngineAutomatically()
io.flutter.embedding.engine.FlutterJNI: void attachToNative()
io.flutter.embedding.android.FlutterFragment: void onFlutterTextureViewCreated(io.flutter.embedding.android.FlutterTextureView)
io.flutter.view.AccessibilityBridge: void access$300(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityEvent)
io.flutter.app.FlutterActivity: io.flutter.view.FlutterView getFlutterView()
io.flutter.view.FlutterMain: java.lang.String findAppBundlePath()
androidx.activity.ComponentActivity: java.lang.Object onRetainNonConfigurationInstance()
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi: void closeWebView()
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration fromJson(org.json.JSONObject)
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: void release()
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$-CC: void setUp(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.imagepicker.Messages$ImagePickerApi)
io.flutter.embedding.android.FlutterFragmentActivity: boolean shouldHandleDeeplinking()
io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
io.flutter.embedding.android.MotionEventTracker: MotionEventTracker()
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: boolean clipboardHasStrings()
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)
io.flutter.embedding.engine.systemchannels.LocalizationChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.android.FlutterFragmentActivity: android.view.View createFragmentContainer()
io.flutter.plugin.platform.PlatformViewsController: void lambda$configureForVirtualDisplay$0(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest,android.view.View,boolean)
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest: java.util.List resources(android.webkit.PermissionRequest)
io.flutter.view.FlutterView: io.flutter.embedding.engine.dart.DartExecutor getDartExecutor()
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityNodeInfo obtainAccessibilityNodeInfo(android.view.View)
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: io.flutter.embedding.engine.systemchannels.MouseCursorChannel$MouseCursorMethodHandler access$000(io.flutter.embedding.engine.systemchannels.MouseCursorChannel)
io.flutter.embedding.engine.dart.DartMessenger$HandlerInfo: DartMessenger$HandlerInfo(io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler,io.flutter.embedding.engine.dart.DartMessenger$DartMessengerTaskQueue)
androidx.appcompat.widget.SearchView: java.lang.CharSequence getQueryHint()
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: void addOnNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener)
androidx.appcompat.widget.AlertDialogLayout: AlertDialogLayout(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.android.FlutterFragment: java.lang.String getCachedEngineId()
io.flutter.view.FlutterView: void startBackGesture(android.window.BackEvent)
io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener: void onEngineWillDestroy()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)
io.flutter.plugin.common.StandardMethodCodec: java.nio.ByteBuffer encodeErrorEnvelopeWithStacktrace(java.lang.String,java.lang.String,java.lang.Object,java.lang.String)
androidx.appcompat.widget.LinearLayoutCompat: int getDividerWidth()
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onPageStarted$lambda$1(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.renderer.FlutterUiDisplayListener: void onFlutterUiNoLongerDisplayed()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.NavigationChannel getNavigationChannel()
io.flutter.embedding.android.FlutterActivity: FlutterActivity()
io.flutter.plugin.platform.PlatformPlugin$1: void showSystemOverlays(java.util.List)
io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback)
io.flutter.embedding.android.KeyEmbedderResponder: long keyOfPlane(long,long)
io.flutter.plugins.urllauncher.Messages$WebViewOptions: java.lang.Boolean getEnableJavaScript()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View$OnApplyWindowInsetsListener getInsetsListener()
io.flutter.plugins.imagepicker.ImagePickerUtils: boolean needRequestCameraPermission(android.content.Context)
androidx.appcompat.widget.Toolbar: void setSubtitle(int)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemWindowInsets()
io.flutter.embedding.android.FlutterSurfaceView: FlutterSurfaceView(android.content.Context)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: java.lang.String getDartEntrypointLibraryUri()
io.flutter.plugins.webviewflutter.WebResourceErrorCompatProxyApi: long errorCode(androidx.webkit.WebResourceErrorCompat)
io.flutter.view.FlutterMain: java.lang.String getLookupKeyForAsset(java.lang.String,java.lang.String)
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputMethodManager getInputMethodManager()
androidx.core.view.ViewCompat$Api21Impl: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)
io.flutter.view.AccessibilityBridge: boolean externalViewRequestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
io.flutter.embedding.engine.loader.FlutterLoader: void ensureInitializationCompleteAsync(android.content.Context,java.lang.String[],android.os.Handler,java.lang.Runnable)
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest: PigeonApiPermissionRequest(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void onSaveInstanceState(android.os.Bundle)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: androidx.core.view.WindowInsetsCompat build()
io.flutter.view.AccessibilityBridge$StringAttribute: AccessibilityBridge$StringAttribute(io.flutter.view.AccessibilityBridge$1)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$12(kotlin.Result)
io.flutter.plugin.common.StandardMethodCodec: java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi: WebChromeClientProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
androidx.core.view.ViewCompat$Api29Impl: java.util.List getSystemGestureExclusionRects(android.view.View)
io.flutter.view.FlutterView: io.flutter.view.TextureRegistry$ImageTextureEntry createImageTexture()
io.flutter.plugins.imagepicker.Messages$GeneralOptions: void setAllowMultiple(java.lang.Boolean)
io.flutter.view.AccessibilityBridge$1: void onTooltip(java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.lang.Object access$dataStoreSetString(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,java.lang.String,java.lang.String,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: double deltaMillis(long)
io.flutter.plugin.platform.PlatformViewWrapper: void resizeRenderTarget(int,int)
io.flutter.app.FlutterFragmentActivity: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness fromValue(java.lang.String)
io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager: void loadDartLibrary(int,java.lang.String)
io.flutter.plugin.common.BinaryMessenger: io.flutter.plugin.common.BinaryMessenger$TaskQueue makeBackgroundTaskQueue()
io.flutter.plugins.webviewflutter.CookieManagerProxyApi: void removeAllCookies(android.webkit.CookieManager,kotlin.jvm.functions.Function1)
androidx.activity.Api34Impl: float touchY(android.window.BackEvent)
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder initialRoute(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.view.Surface getSurface()
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: void runOnMainThread(java.lang.Runnable)
androidx.datastore.preferences.protobuf.WireFormat$FieldType: androidx.datastore.preferences.protobuf.WireFormat$FieldType valueOf(java.lang.String)
io.flutter.plugins.webviewflutter.ViewProxyApi: void scrollBy(android.view.View,long,long)
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType[] $values()
io.flutter.plugins.imagepicker.ImagePickerDelegate: ImagePickerDelegate(android.app.Activity,io.flutter.plugins.imagepicker.ImageResizer,io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions,io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions,io.flutter.plugins.imagepicker.Messages$Result,io.flutter.plugins.imagepicker.ImagePickerCache,io.flutter.plugins.imagepicker.ImagePickerDelegate$PermissionManager,io.flutter.plugins.imagepicker.ImagePickerDelegate$FileUriResolver,io.flutter.plugins.imagepicker.FileUtils,java.util.concurrent.ExecutorService)
io.flutter.plugins.imagepicker.Messages$SourceSpecification: void setCamera(io.flutter.plugins.imagepicker.Messages$SourceCamera)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
androidx.core.widget.TextViewCompat$Api28Impl: void setFirstBaselineToTopHeight(android.widget.TextView,int)
io.flutter.embedding.android.FlutterEngineProvider: io.flutter.embedding.engine.FlutterEngine provideFlutterEngine(android.content.Context)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: long getClearFinalizedWeakReferencesInterval()
io.flutter.embedding.engine.systemchannels.KeyboardChannel: void setKeyboardMethodHandler(io.flutter.embedding.engine.systemchannels.KeyboardChannel$KeyboardMethodHandler)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void maybeWaitOnFence(android.media.Image)
androidx.core.view.WindowInsetsCompat$Impl29: void setStableInsets(androidx.core.graphics.Insets)
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel$Companion: PigeonApiJavaScriptChannel$Companion()
io.flutter.plugin.platform.PlatformViewRegistry: boolean registerViewFactory(java.lang.String,io.flutter.plugin.platform.PlatformViewFactory)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getKeys$prefs$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
androidx.fragment.app.Fragment: void onPictureInPictureModeChanged(boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values()
io.flutter.embedding.android.FlutterSurfaceView: FlutterSurfaceView(android.content.Context,boolean)
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
io.flutter.view.AccessibilityBridge$3: AccessibilityBridge$3(io.flutter.view.AccessibilityBridge,android.os.Handler)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry()
io.flutter.plugins.imagepicker.R: R()
io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback: void pigeon_newInstance(android.webkit.WebChromeClient$CustomViewCallback,kotlin.jvm.functions.Function1)
androidx.core.view.WindowInsetsCompat$Impl: boolean isRound()
io.flutter.plugin.common.BinaryCodec: java.nio.ByteBuffer encodeMessage(java.lang.Object)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$4500(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.util.Preconditions: void checkState(boolean)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$9$lambda$8(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.WebResourceRequestProxyApi: WebResourceRequestProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.util.Predicate: boolean test(java.lang.Object)
io.flutter.plugin.platform.PlatformViewsController: void enforceMinimumAndroidApiVersion(int)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding: void removeOnModeChangeListener(io.flutter.embedding.engine.plugins.service.ServiceAware$OnModeChangeListener)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceResponse: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugin.editing.SpellCheckPlugin: void destroy()
io.flutter.FlutterInjector$Builder: io.flutter.FlutterInjector$Builder setExecutorService(java.util.concurrent.ExecutorService)
io.flutter.view.FlutterView: FlutterView(android.content.Context)
io.flutter.plugins.urllauncher.Messages$WebViewOptions: void setEnableDomStorage(java.lang.Boolean)
io.flutter.plugin.platform.SurfaceProducerPlatformViewRenderTarget: android.view.Surface getSurface()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient$Companion: void setUpMessageHandlers$lambda$5$lambda$4(io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.urllauncher.UrlLauncher$IntentResolver: java.lang.String getHandlerComponentName(android.content.Intent)
io.flutter.embedding.android.FlutterActivity: void configureStatusBarForFullscreenFlutterExperience()
io.flutter.plugins.imagepicker.ImagePickerCache: void setType(java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest: void pigeon_newInstance(android.webkit.WebResourceRequest,kotlin.jvm.functions.Function1)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: int getWidth()
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,io.flutter.embedding.android.TransparencyMode)
io.flutter.plugins.imagepicker.FileUtils: java.lang.String getPathFromUri(android.content.Context,android.net.Uri)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: java.lang.String getString(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long)
io.flutter.plugins.imagepicker.ImagePickerDelegate$1: void askForPermission(java.lang.String,int)
androidx.fragment.app.Fragment: boolean isInBackStack()
io.flutter.plugins.webviewflutter.AndroidWebKitError: AndroidWebKitError(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.Log: void i(java.lang.String,java.lang.String,java.lang.Throwable)
io.flutter.embedding.engine.loader.FlutterLoader: boolean isLeakVM(android.os.Bundle)
io.flutter.plugin.platform.PlatformViewWrapper: void unsetOnDescendantFocusChangeListener()
io.flutter.plugin.localization.LocalizationPlugin: java.util.Locale localeFromString(java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$26$lambda$25(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.common.BinaryCodec: BinaryCodec(boolean)
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentActivity getActivity()
io.flutter.plugin.common.EventChannel: EventChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec)
io.flutter.embedding.engine.FlutterEngineGroup: io.flutter.embedding.engine.FlutterEngine createAndRunEngine(android.content.Context,io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$1: void success(java.util.List)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void onAndroidAccessibilityEnabled()
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler: void onTap(int)
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.FlutterFragment createDefault()
io.flutter.plugin.localization.LocalizationPlugin: LocalizationPlugin(android.content.Context,io.flutter.embedding.engine.systemchannels.LocalizationChannel)
androidx.activity.ComponentActivity: void removeOnMultiWindowModeChangedListener(androidx.core.util.Consumer)
io.flutter.embedding.engine.dart.DartMessenger: void send(java.lang.String,java.nio.ByteBuffer)
io.flutter.plugins.webviewflutter.WebResourceRequestProxyApi: java.lang.Boolean isRedirect(android.webkit.WebResourceRequest)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: kotlin.Unit lambda$shouldOverrideUrlLoading$12(kotlin.Result)
androidx.recyclerview.widget.RecyclerView: long getNanoTime()
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: boolean equals(java.lang.Object)
androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()
io.flutter.embedding.android.FlutterImageView: FlutterImageView(android.content.Context,android.media.ImageReader,io.flutter.embedding.android.FlutterImageView$SurfaceKind)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage dequeueImage()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromService()
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder: io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder dartEntrypointArgs(java.util.List)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: void installDeferredComponent(int,java.lang.String)
androidx.activity.ComponentActivity: void addOnTrimMemoryListener(androidx.core.util.Consumer)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean isAttachedToActivity()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeStableInsets()
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder: io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback buildCallback()
androidx.core.content.FileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: void closeReader()
io.flutter.plugins.imagepicker.ImagePickerUtils: int getLimitFromOption(io.flutter.plugins.imagepicker.Messages$GeneralOptions)
io.flutter.plugins.imagepicker.Messages$GeneralOptions: java.util.ArrayList toList()
io.flutter.plugins.urllauncher.Messages$WebViewOptions: java.util.ArrayList toList()
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder$Callback: KeyboardManager$PerEventCallbackBuilder$Callback(io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: long id()
io.flutter.plugin.common.MethodChannel$Result: void notImplemented()
androidx.appcompat.widget.AppCompatImageView: void setImageBitmap(android.graphics.Bitmap)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void lambda$onReceivedError$9(android.webkit.WebView,int,java.lang.String,java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2$1: SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2$1(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.PigeonApiView: PigeonApiView(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
androidx.core.view.ViewCompat$Api28Impl: void removeOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$38$lambda$37(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin$ListEncoder: LegacySharedPreferencesPlugin$ListEncoder()
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: void send(java.lang.String,java.nio.ByteBuffer)
io.flutter.plugins.webviewflutter.ResultCompat$Companion: kotlin.Unit asCompatCallback$lambda$0(kotlin.jvm.functions.Function1,kotlin.Result)
io.flutter.embedding.android.AndroidTouchProcessor: boolean onTouchEvent(android.view.MotionEvent,android.graphics.Matrix)
io.flutter.embedding.engine.dart.DartMessenger$TaskQueueToken: DartMessenger$TaskQueueToken()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setFillAlpha(float)
androidx.recyclerview.widget.RecyclerView: androidx.core.view.NestedScrollingChildHelper getScrollingChildHelper()
androidx.appcompat.widget.ActionBarContextView: void setTitle(java.lang.CharSequence)
io.flutter.plugin.platform.PlatformPlugin$1: void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle)
io.flutter.plugins.urllauncher.Messages$WebViewOptions$Builder: io.flutter.plugins.urllauncher.Messages$WebViewOptions$Builder setHeaders(java.util.Map)
io.flutter.view.VsyncWaiter: void reset()
io.flutter.view.AccessibilityBridge: android.content.ContentResolver access$1000(io.flutter.view.AccessibilityBridge)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi$-CC: void lambda$setUp$4(io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.recyclerview.widget.RecyclerView: void setAccessibilityDelegateCompat(androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate)
androidx.appcompat.widget.ContentFrameLayout: void setAttachListener(androidx.appcompat.widget.ContentFrameLayout$OnAttachListener)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi$Companion: AndroidWebkitLibraryPigeonInstanceManagerApi$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.core.app.AppOpsManagerCompat$Api29Impl: java.lang.String getOpPackageName(android.content.Context)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$19$lambda$18(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions: java.util.ArrayList toList()
androidx.fragment.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)
androidx.appcompat.widget.AppCompatTextView: java.lang.CharSequence getText()
io.flutter.embedding.engine.systemchannels.TextInputChannel: void search(int)
io.flutter.view.FlutterView: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.app.FlutterPluginRegistry: java.util.Map access$500(io.flutter.app.FlutterPluginRegistry)
io.flutter.FlutterInjector$Builder: io.flutter.FlutterInjector$Builder setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager)
io.flutter.plugins.webviewflutter.ResultCompat$Companion: ResultCompat$Companion()
io.flutter.plugins.sharedpreferences.R: R()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar$1: kotlin.Unit onFinalize$lambda$0(long,kotlin.Result)
io.flutter.plugins.webviewflutter.PigeonApiWebStorage: void deleteAllData(android.webkit.WebStorage)
io.flutter.plugins.sharedpreferences.StringListLookupResultType: io.flutter.plugins.sharedpreferences.StringListLookupResultType[] $values()
io.flutter.view.VsyncWaiter$DisplayListener: void onDisplayAdded(int)
io.flutter.plugins.webviewflutter.ConsoleMessageLevel$Companion: ConsoleMessageLevel$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceDestroyed()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void attachToActivityInternal(android.app.Activity,androidx.lifecycle.Lifecycle)
io.flutter.plugin.platform.PlatformView: android.view.View getView()
io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder: FlutterActivity$NewEngineInGroupIntentBuilder(java.lang.Class,java.lang.String)
io.flutter.plugins.imagepicker.FileUtils: java.io.File saferOpenFile(java.lang.String,java.lang.String)
io.flutter.embedding.engine.loader.FlutterLoader: void lambda$ensureInitializationCompleteAsync$1(android.content.Context,java.lang.String[],android.os.Handler,java.lang.Runnable)
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder$Callback: KeyboardManager$PerEventCallbackBuilder$Callback(io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder,io.flutter.embedding.android.KeyboardManager$1)
io.flutter.plugins.webviewflutter.WebStorageProxyApi: WebStorageProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.util.PathUtils: java.lang.String getCacheDirectory(android.content.Context)
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: LoaderManagerImpl$LoaderViewModel()
io.flutter.app.FlutterActivity: void onPause()
io.flutter.embedding.engine.loader.ApplicationInfoLoader: void parseDomain(android.content.res.XmlResourceParser,org.json.JSONArray,boolean)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceErrorCompat: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
androidx.datastore.preferences.protobuf.FieldType: androidx.datastore.preferences.protobuf.FieldType[] values()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: FlutterMutatorsStack()
androidx.appcompat.widget.Toolbar: void setCollapseIcon(int)
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: android.content.Context getApplicationContext()
io.flutter.plugin.editing.TextInputPlugin$2: TextInputPlugin$2(io.flutter.plugin.editing.TextInputPlugin,boolean,double[],double[])
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$1(kotlin.Result)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void updateEditingStateWithDeltas(int,java.util.ArrayList)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.TextInputChannel getTextInputChannel()
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: android.app.Activity activity()
io.flutter.view.FlutterMain: void startInitialization(android.content.Context,io.flutter.view.FlutterMain$Settings)
io.flutter.plugin.common.BinaryCodec: java.nio.ByteBuffer encodeMessage(java.nio.ByteBuffer)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$22$lambda$21(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean access$102(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate,boolean)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: WebChromeClientProxyApi$WebChromeClientImpl(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathStart()
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: void setDeprecatedStringList(java.lang.String,java.util.List,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeStepGranularity()
androidx.fragment.app.Fragment: void startActivityForResult(android.content.Intent,int)
io.flutter.plugin.common.EventChannel: void setStreamHandler(io.flutter.plugin.common.EventChannel$StreamHandler)
androidx.activity.OnBackPressedCallback: void handleOnBackCancelled()
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener)
androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact valueOf(java.lang.String)
io.flutter.plugins.imagepicker.Messages$SourceSpecification: void setType(io.flutter.plugins.imagepicker.Messages$SourceType)
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder transparencyMode(io.flutter.embedding.android.TransparencyMode)
io.flutter.plugins.webviewflutter.FlutterAssetManager$PluginBindingFlutterAssetManager: FlutterAssetManager$PluginBindingFlutterAssetManager(android.content.res.AssetManager,io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets)
io.flutter.embedding.android.FlutterFragmentActivity: io.flutter.embedding.engine.FlutterEngine getFlutterEngine()
io.flutter.plugin.text.ProcessTextPlugin: void onDetachedFromActivity()
androidx.profileinstaller.ProfileInstallReceiver: ProfileInstallReceiver()
io.flutter.embedding.engine.systemchannels.RestorationChannel: java.util.Map packageData(byte[])
androidx.core.view.WindowInsetsCompat$Impl21: boolean isConsumed()
androidx.fragment.app.Fragment: android.content.Context requireContext()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: void _init_$lambda$1(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager)
androidx.core.view.WindowInsetsCompat$Impl: boolean isConsumed()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void onReceivedHttpError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse)
io.flutter.plugins.webviewflutter.JavaScriptChannel: void postMessage(java.lang.String)
io.flutter.embedding.engine.systemchannels.RestorationChannel: byte[] access$000(io.flutter.embedding.engine.systemchannels.RestorationChannel)
io.flutter.plugin.platform.PlatformViewFactory: io.flutter.plugin.common.MessageCodec getCreateArgsCodec()
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: FlutterRenderer$DisplayFeatureState(java.lang.String,int,int)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceChanged(int,int)
io.flutter.embedding.android.FlutterView: boolean access$202(io.flutter.embedding.android.FlutterView,boolean)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi$-CC: void lambda$setUp$3(io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.FlutterFragment: boolean shouldHandleDeeplinking()
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError: int hashCode()
io.flutter.embedding.engine.FlutterEngineCache: boolean contains(java.lang.String)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi: void pickVideos(io.flutter.plugins.imagepicker.Messages$SourceSpecification,io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions,io.flutter.plugins.imagepicker.Messages$GeneralOptions,io.flutter.plugins.imagepicker.Messages$Result)
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener: void pigeon_newInstance(android.webkit.DownloadListener,kotlin.jvm.functions.Function1)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void getTransformMatrix(float[])
org.chromium.support_lib_boundary.StaticsBoundaryInterface: boolean isMultiProcessEnabled()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.embedding.android.AndroidTouchProcessor: float getVerticalScrollFactorAbove26(android.content.Context)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getLogoDescription()
io.flutter.plugin.common.JSONUtil: java.lang.Object unwrap(java.lang.Object)
io.flutter.plugins.imagepicker.ImagePickerUtils: boolean isPermissionPresentInManifest(android.content.Context,java.lang.String)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: boolean onConsoleMessage(android.webkit.ConsoleMessage)
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode access$4700(io.flutter.view.AccessibilityBridge$SemanticsNode,float[],boolean)
io.flutter.plugin.editing.ListenableEditingState: void endBatchEdit()
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: BasicMessageChannel$IncomingReplyHandler(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.FlutterView: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)
io.flutter.plugins.webviewflutter.WebViewProxyApi: void setWebContentsDebuggingEnabled(boolean)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$-CC: void lambda$setUp$3(io.flutter.plugins.imagepicker.Messages$ImagePickerApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.common.BasicMessageChannel: void setMessageHandler(io.flutter.plugin.common.BasicMessageChannel$MessageHandler)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel getPigeonApiJavaScriptChannel()
androidx.fragment.app.Fragment: java.lang.String generateActivityResultKey()
io.flutter.plugin.platform.PlatformViewsController: void maybeInvokeOnFlutterViewAttached(io.flutter.plugin.platform.PlatformView)
io.flutter.plugins.webviewflutter.WebResourceRequestProxyApi: io.flutter.plugins.webviewflutter.ProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.dart.DartMessenger: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugins.webviewflutter.FlutterAssetManagerProxyApi: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugins.webviewflutter.FileChooserParamsProxyApi: FileChooserParamsProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.embedding.android.FlutterActivity$1: void onBackStarted(android.window.BackEvent)
io.flutter.plugin.platform.VirtualDisplayController: void dispose()
io.flutter.embedding.engine.systemchannels.RestorationChannel: byte[] access$002(io.flutter.embedding.engine.systemchannels.RestorationChannel,byte[])
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setAlpha(float)
io.flutter.plugins.urllauncher.Messages$WebViewOptions: java.lang.Boolean getEnableDomStorage()
io.flutter.embedding.engine.systemchannels.TextInputChannel: void send(int)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.embedding.android.FlutterFragment: void onPostResume()
io.flutter.plugin.editing.TextInputPlugin$1: void requestAutofill()
androidx.core.content.res.FontResourcesParserCompat$Api21Impl: int getType(android.content.res.TypedArray,int)
io.flutter.plugin.platform.AccessibilityEventsDelegate: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest: java.lang.Boolean isRedirect(android.webkit.WebResourceRequest)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder flutterShellArgs(io.flutter.embedding.engine.FlutterShellArgs)
io.flutter.embedding.engine.renderer.FlutterRenderer$2: void onCreate(androidx.lifecycle.LifecycleOwner)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String access$3800(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void onDetachedFromActivity()
io.flutter.app.FlutterPluginRegistry: FlutterPluginRegistry(io.flutter.embedding.engine.FlutterEngine,android.content.Context)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest: java.lang.String method(android.webkit.WebResourceRequest)
io.flutter.embedding.engine.renderer.FlutterRenderer: void access$600(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.plugins.imagepicker.ImageResizer: java.io.FileOutputStream createOutputStream(java.io.File)
io.flutter.view.FlutterView: void onSizeChanged(int,int,int,int)
io.flutter.view.VsyncWaiter$FrameCallback: VsyncWaiter$FrameCallback(io.flutter.view.VsyncWaiter,long)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$200(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager$Companion: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager create(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager$PigeonFinalizationListener)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: void onGeolocationPermissionsHidePrompt()
androidx.core.view.WindowInsetsCompat$Impl20: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.TransparencyMode getTransparencyMode()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1$1: SharedPreferencesPlugin$setInt$1$1(androidx.datastore.preferences.core.Preferences$Key,long,kotlin.coroutines.Continuation)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.CharSequence access$3400(io.flutter.view.AccessibilityBridge$SemanticsNode)
androidx.appcompat.widget.Toolbar: int getPopupTheme()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.engine.plugins.FlutterPlugin get(java.lang.Class)
androidx.core.view.ViewCompat$Api21Impl: void callCompatInsetAnimationCallback(android.view.WindowInsets,android.view.View)
io.flutter.embedding.android.FlutterSurfaceView$1: void surfaceChanged(android.view.SurfaceHolder,int,int,int)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void setAccessibilityFeatures(int)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void urlLoading$lambda$8(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStopped(android.app.Activity)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.BackGestureChannel getBackGestureChannel()
io.flutter.plugins.webviewflutter.AndroidWebkitLibrary_gKt: java.util.List wrapError(java.lang.Throwable)
androidx.fragment.app.FragmentActivity: void supportInvalidateOptionsMenu()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.String toString()
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebView getPigeonApiWebView()
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void requestLoading(android.webkit.WebViewClient,android.webkit.WebView,android.webkit.WebResourceRequest,kotlin.jvm.functions.Function1)
androidx.preference.CheckBoxPreference: CheckBoxPreference(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: FlutterRenderer$ImageTextureRegistryEntry(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
io.flutter.embedding.engine.renderer.RenderSurface: void resume()
io.flutter.embedding.android.FlutterTextureView: void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer)
org.chromium.support_lib_boundary.IsomorphicObjectBoundaryInterface: java.lang.Object getOrCreatePeer(java.util.concurrent.Callable)
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin$ListEncoder: java.util.List decode(java.lang.String)
io.flutter.embedding.android.FlutterTextureView$1: void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)
io.flutter.plugins.sharedpreferences.StringListResult: io.flutter.plugins.sharedpreferences.StringListResult copy(java.lang.String,io.flutter.plugins.sharedpreferences.StringListLookupResultType)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo getExtraRenderingInfo(android.view.accessibility.AccessibilityNodeInfo)
io.flutter.plugin.common.StandardMethodCodec: io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer)
io.flutter.embedding.android.FlutterFragmentActivity: io.flutter.embedding.android.RenderMode getRenderMode()
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides[] $values()
io.flutter.plugin.common.PluginRegistry: io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String)
io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder: io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder backgroundMode(io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: androidx.core.view.WindowInsetsCompat build()
io.flutter.Log: void e(java.lang.String,java.lang.String)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewFakeWindowViewGroup access$102(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewFakeWindowViewGroup)
io.flutter.plugin.platform.PlatformPlugin: void access$200(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription)
androidx.webkit.WebViewClientCompat: void onSafeBrowsingHit(android.webkit.WebView,android.webkit.WebResourceRequest,int,android.webkit.SafeBrowsingResponse)
androidx.core.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
io.flutter.plugin.platform.PlatformViewsController$1: void synchronizeToNativeViewHierarchy(boolean)
io.flutter.embedding.android.FlutterFragment: android.app.Activity getActivity()
io.flutter.plugins.urllauncher.Messages$FlutterError: Messages$FlutterError(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityNodeInfo obtainAccessibilityNodeInfo(android.view.View,int)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState[] values()
androidx.appcompat.widget.FitWindowsLinearLayout: void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi$Companion: void setUpMessageHandlers$lambda$3$lambda$2(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedWidthMinor()
org.chromium.support_lib_boundary.DropDataContentProviderBoundaryInterface: void setClearCachedDataIntervalMs(int)
io.flutter.view.AccessibilityBridge: io.flutter.embedding.engine.systemchannels.AccessibilityChannel access$600(io.flutter.view.AccessibilityBridge)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebViewClient getPigeonApiWebViewClient()
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemGestureInsets(androidx.core.graphics.Insets)
io.flutter.plugins.imagepicker.ImagePickerPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: int getDisabledActionModeMenuItems()
io.flutter.view.AccessibilityBridge$Flag: AccessibilityBridge$Flag(java.lang.String,int,int)
io.flutter.plugins.webviewflutter.FileChooserMode: int getRaw()
io.flutter.plugins.imagepicker.ImagePickerPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.plugin.platform.PlatformPlugin$1: void showSystemUiMode(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode)
io.flutter.embedding.android.KeyChannelResponder: void handleEvent(android.view.KeyEvent,io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager$Companion: AndroidWebkitLibraryPigeonInstanceManager$Companion()
androidx.fragment.app.Fragment: void setHasOptionsMenu(boolean)
androidx.activity.ComponentActivity: void reportFullyDrawn()
org.chromium.support_lib_boundary.StaticsBoundaryInterface: void initSafeBrowsing(android.content.Context,android.webkit.ValueCallback)
io.flutter.plugins.webviewflutter.WebViewProxyApi: void destroy(android.webkit.WebView)
io.flutter.plugins.urllauncher.UrlLauncher: boolean containsRestrictedHeader(java.util.Map)
io.flutter.plugin.platform.SingleViewWindowManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)
io.flutter.app.FlutterActivity: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.view.FlutterView: void redispatch(android.view.KeyEvent)
io.flutter.plugins.webviewflutter.WebResourceErrorCompatProxyApi: java.lang.String description(androidx.webkit.WebResourceErrorCompat)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getTranslateY()
io.flutter.view.FlutterView: boolean checkInputConnectionProxy(android.view.View)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: FlutterMutatorView(android.content.Context,float,io.flutter.embedding.android.AndroidTouchProcessor)
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)
androidx.window.layout.adapter.sidecar.SidecarCompat$TranslatingCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SystemChannel getSystemChannel()
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.PluginRegistry$Registrar addWindowFocusChangedListener(io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener)
io.flutter.plugin.platform.PlatformPlugin$1: void restoreSystemUiOverlays()
io.flutter.embedding.engine.FlutterJNI: void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest: java.lang.String url(android.webkit.WebResourceRequest)
androidx.exifinterface.media.ExifInterfaceUtils$Api23Impl: void setDataSource(android.media.MediaMetadataRetriever,android.media.MediaDataSource)
io.flutter.plugin.platform.PlatformPlugin: void popSystemNavigator()
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: void removeListener()
androidx.appcompat.widget.ViewStubCompat: void setInflatedId(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void showSystemUiMode(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode)
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceWindowChanged(long,android.view.Surface)
io.flutter.embedding.engine.dart.DartMessenger$Reply: void reply(java.nio.ByteBuffer)
io.flutter.plugins.imagepicker.FileUtils: java.lang.String sanitizeFilename(java.lang.String)
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: LegacySharedPreferencesPlugin(io.flutter.plugins.sharedpreferences.SharedPreferencesListEncoder)
androidx.datastore.preferences.protobuf.GeneratedMessageLite$MethodToInvoke: androidx.datastore.preferences.protobuf.GeneratedMessageLite$MethodToInvoke valueOf(java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.plugin.mouse.MouseCursorPlugin: io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate access$100(io.flutter.plugin.mouse.MouseCursorPlugin)
io.flutter.plugin.platform.PlatformViewsController: void onPreEngineRestart()
io.flutter.embedding.android.FlutterView: void releaseImageView()
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.util.Map getAllPrefs(java.lang.String,java.util.Set)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode fromValue(java.lang.String)
io.flutter.embedding.engine.systemchannels.RestorationChannel$2: RestorationChannel$2(io.flutter.embedding.engine.systemchannels.RestorationChannel)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager)
io.flutter.embedding.engine.FlutterJNI: void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
io.flutter.embedding.engine.systemchannels.MouseCursorChannel$1: MouseCursorChannel$1(io.flutter.embedding.engine.systemchannels.MouseCursorChannel)
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void sendState(io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState,boolean)
androidx.core.app.ActivityCompat$Api23Impl: void onSharedElementsReady(java.lang.Object)
io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback$Companion: PigeonApiGeolocationPermissionsCallback$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.activity.OnBackPressedDispatcher$Api34Impl: android.window.OnBackInvokedCallback createOnBackAnimationCallback(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setImeVisibility(boolean)
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void setOnFrameConsumedListener(io.flutter.view.TextureRegistry$OnFrameConsumedListener)
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: SurfaceTextureSurfaceProducer(long,android.os.Handler,io.flutter.embedding.engine.FlutterJNI,io.flutter.view.TextureRegistry$SurfaceTextureEntry)
io.flutter.app.FlutterPluginRegistry: java.lang.Object valuePublishedByPlugin(java.lang.String)
io.flutter.embedding.engine.loader.ApplicationInfoLoader: boolean getBoolean(android.os.Bundle,java.lang.String,boolean)
io.flutter.plugins.webviewflutter.GeolocationPermissionsCallbackProxyApi: void invoke(android.webkit.GeolocationPermissions$Callback,java.lang.String,boolean,boolean)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$LayoutManager getLayoutManager()
androidx.appcompat.widget.ViewStubCompat: void setOnInflateListener(androidx.appcompat.widget.ViewStubCompat$OnInflateListener)
androidx.core.view.WindowInsetsCompat$BuilderImpl: androidx.core.view.WindowInsetsCompat build()
io.flutter.app.FlutterPluginRegistry: java.util.List access$600(io.flutter.app.FlutterPluginRegistry)
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$1: SettingsChannel$ConfigurationQueue$1(io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue,io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$SentConfiguration)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setStableInsets(androidx.core.graphics.Insets)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void create(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: FlutterPluginRegistry$FlutterRegistrar(io.flutter.app.FlutterPluginRegistry,java.lang.String)
androidx.appcompat.widget.SwitchCompat: void setTrackResource(int)
androidx.window.extensions.core.util.function.Consumer: void accept(java.lang.Object)
androidx.core.view.MenuItemCompat$Api26Impl: java.lang.CharSequence getContentDescription(android.view.MenuItem)
androidx.appcompat.widget.SwitchCompat: android.content.res.ColorStateList getTrackTintList()
io.flutter.plugin.editing.TextInputPlugin: void unlockPlatformViewInputConnection()
androidx.core.widget.NestedScrollView: void setFillViewport(boolean)
io.flutter.embedding.engine.FlutterJNI: void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onShowCustomView$lambda$4(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] $values()
androidx.recyclerview.widget.RecyclerView: RecyclerView(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: android.view.Surface getSurface()
io.flutter.plugins.sharedpreferences.SharedPreferencesPluginKt: java.lang.Object transformPref(java.lang.Object,io.flutter.plugins.sharedpreferences.SharedPreferencesListEncoder)
androidx.appcompat.view.menu.ActionMenuItemView: ActionMenuItemView(android.content.Context,android.util.AttributeSet)
io.flutter.plugin.editing.TextInputPlugin: void access$600(io.flutter.plugin.editing.TextInputPlugin,int,boolean)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void registerIn(android.app.Activity)
androidx.appcompat.widget.ActionBarContextView: void setSubtitle(java.lang.CharSequence)
io.flutter.plugin.common.BinaryMessenger: void send(java.lang.String,java.nio.ByteBuffer)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener)
io.flutter.view.VsyncWaiter$DisplayListener: void onDisplayRemoved(int)
org.chromium.support_lib_boundary.WebResourceRequestBoundaryInterface: boolean isRedirect()
io.flutter.embedding.engine.renderer.FlutterRenderer: void access$300(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void synchronizeToNativeViewHierarchy(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions: io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions getImageSelectionOptions()
io.flutter.plugin.common.BinaryMessenger: io.flutter.plugin.common.BinaryMessenger$TaskQueue makeBackgroundTaskQueue(io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions)
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()
io.flutter.plugins.webviewflutter.PigeonApiWebView: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void release()
io.flutter.embedding.engine.systemchannels.ProcessTextChannel$1: ProcessTextChannel$1(io.flutter.embedding.engine.systemchannels.ProcessTextChannel)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonCodec codec_delegate$lambda$1()
androidx.preference.TwoStatePreference: TwoStatePreference(android.content.Context,android.util.AttributeSet)
io.flutter.view.TextureRegistry$SurfaceProducer: int getHeight()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: boolean getIgnoreCallsToDart()
io.flutter.plugin.text.ProcessTextPlugin: void processTextAction(java.lang.String,java.lang.String,boolean,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: void setBool(java.lang.String,boolean,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.preference.internal.PreferenceImageView: void setMaxWidth(int)
io.flutter.embedding.engine.FlutterJNI: void destroyOverlaySurfaces()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void lambda$shouldOverrideUrlLoading$13(android.webkit.WebView,java.lang.String)
androidx.appcompat.widget.AppCompatTextView: android.content.res.ColorStateList getSupportBackgroundTintList()
androidx.core.content.FileProvider: android.content.res.XmlResourceParser getFileProviderPathsMetaData(android.content.Context,java.lang.String,android.content.pm.ProviderInfo,int)
io.flutter.plugins.webviewflutter.HttpAuthHandlerProxyApi: void cancel(android.webkit.HttpAuthHandler)
io.flutter.embedding.android.FlutterFragment$2: void handleOnBackPressed()
io.flutter.plugins.webviewflutter.CookieManagerProxyApi: android.webkit.CookieManager instance()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler: void offset(int,double,double)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)
androidx.appcompat.widget.SwitchCompat: android.graphics.drawable.Drawable getThumbDrawable()
io.flutter.embedding.android.FlutterFragmentActivity: void onPostResume()
io.flutter.plugin.common.StandardMessageCodec: java.lang.Object decodeMessage(java.nio.ByteBuffer)
io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate: android.view.PointerIcon getSystemPointerIcon(int)
io.flutter.plugin.common.BasicMessageChannel: java.lang.String access$300(io.flutter.plugin.common.BasicMessageChannel)
androidx.datastore.preferences.protobuf.ProtoSyntax: androidx.datastore.preferences.protobuf.ProtoSyntax valueOf(java.lang.String)
io.flutter.embedding.android.FlutterView: void init()
io.flutter.embedding.engine.renderer.FlutterRenderer: void setAccessibilityFeatures(int)
io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient$Companion: void setUpMessageHandlers$lambda$3$lambda$2(io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: kotlin.Unit lambda$onReceivedError$6(kotlin.Result)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getScaleY()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void onPageFinished(android.webkit.WebView,java.lang.String)
io.flutter.plugin.common.BasicMessageChannel: void send(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi: void setSynchronousReturnValueForShouldOverrideUrlLoading(android.webkit.WebViewClient,boolean)
io.flutter.embedding.engine.dart.DartMessenger$ConcurrentTaskQueue: DartMessenger$ConcurrentTaskQueue(java.util.concurrent.ExecutorService)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: void setDeferredComponentChannel(io.flutter.embedding.engine.systemchannels.DeferredComponentChannel)
io.flutter.plugin.text.ProcessTextPlugin: ProcessTextPlugin(io.flutter.embedding.engine.systemchannels.ProcessTextChannel)
io.flutter.embedding.engine.FlutterEngineGroup: io.flutter.embedding.engine.FlutterEngine createAndRunEngine(android.content.Context,io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint,java.lang.String)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback getPigeonApiGeolocationPermissionsCallback()
androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelProvider$Factory getDefaultViewModelProviderFactory()
io.flutter.view.FlutterNativeView: io.flutter.app.FlutterPluginRegistry getPluginRegistry()
androidx.appcompat.widget.SearchView: void setSearchableInfo(android.app.SearchableInfo)
androidx.core.widget.PopupWindowCompat$Api23Impl: int getWindowLayoutType(android.widget.PopupWindow)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmoji(int)
io.flutter.plugins.imagepicker.ImagePickerCache: void clear()
androidx.fragment.app.Fragment: void registerForContextMenu(android.view.View)
androidx.appcompat.widget.SearchView: void setOnQueryTextListener(androidx.appcompat.widget.SearchView$OnQueryTextListener)
io.flutter.embedding.engine.FlutterEngine: FlutterEngine(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterJNI,io.flutter.plugin.platform.PlatformViewsController,java.lang.String[],boolean,boolean,io.flutter.embedding.engine.FlutterEngineGroup)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void requestLoading$lambda$7(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeMinTextSize()
androidx.appcompat.widget.ActionBarContextView: void setContentHeight(int)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiFileChooserParams getPigeonApiFileChooserParams()
io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener: void onFlutterEngineAttachedToFlutterView(io.flutter.embedding.engine.FlutterEngine)
io.flutter.view.AccessibilityViewEmbedder: AccessibilityViewEmbedder(android.view.View,int)
io.flutter.embedding.android.FlutterFragment: void onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$0(kotlin.Result)
io.flutter.embedding.android.FlutterView: boolean acquireLatestImageViewFrame()
io.flutter.embedding.engine.renderer.RenderSurface: void pause()
io.flutter.plugin.platform.PlatformPlugin: void access$400(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode)
io.flutter.plugin.common.ErrorLogResult: ErrorLogResult(java.lang.String)
androidx.appcompat.widget.Toolbar: android.view.Menu getMenu()
io.flutter.app.FlutterActivityEvents: void onResume()
androidx.fragment.app.Fragment: void setTargetFragment(androidx.fragment.app.Fragment,int)
androidx.recyclerview.widget.RecyclerView: int getBaseline()
io.flutter.view.AccessibilityBridge: void willRemoveSemanticsNode(io.flutter.view.AccessibilityBridge$SemanticsNode)
android.support.v4.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
io.flutter.embedding.android.FlutterFragment: void setFrameworkHandlesBack(boolean)
io.flutter.plugin.common.MethodCall: boolean hasArgument(java.lang.String)
io.flutter.plugins.webviewflutter.DisplayListenerProxy$1: void onDisplayAdded(int)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$25$lambda$24(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.JavaScriptChannelProxyApi: io.flutter.plugins.webviewflutter.ProxyApiRegistrar getPigeonRegistrar()
io.flutter.FlutterInjector$Builder: io.flutter.FlutterInjector$Builder setFlutterJNIFactory(io.flutter.embedding.engine.FlutterJNI$Factory)
io.flutter.embedding.android.KeyboardManager$CharacterCombiner: KeyboardManager$CharacterCombiner()
io.flutter.embedding.engine.systemchannels.PlatformChannel: void systemChromeChanged(boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathOffset()
io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.embedding.engine.renderer.FlutterRenderer: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)
androidx.fragment.app.Fragment: androidx.lifecycle.LiveData getViewLifecycleOwnerLiveData()
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder renderMode(io.flutter.embedding.android.RenderMode)
androidx.datastore.preferences.PreferencesProto$Value$ValueCase: androidx.datastore.preferences.PreferencesProto$Value$ValueCase valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState[] $values()
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi: void setSynchronousReturnValueForOnJsAlert(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,boolean)
io.flutter.embedding.android.KeyData: KeyData(java.nio.ByteBuffer)
io.flutter.plugin.platform.PlatformViewRenderTarget: int getWidth()
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$4300(io.flutter.view.AccessibilityBridge$SemanticsNode)
org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.Object convertWebResourceError(java.lang.reflect.InvocationHandler)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$1500(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate)
io.flutter.plugin.common.MethodChannel: void resizeChannelBuffer(int)
io.flutter.plugins.webviewflutter.ResultCompat: java.lang.Object getOrNull()
io.flutter.embedding.engine.dart.DartMessenger$TaskQueueToken: DartMessenger$TaskQueueToken(io.flutter.embedding.engine.dart.DartMessenger$1)
io.flutter.embedding.android.FlutterFragment: io.flutter.plugin.platform.PlatformPlugin providePlatformPlugin(android.app.Activity,io.flutter.embedding.engine.FlutterEngine)
androidx.core.view.WindowInsetsCompat$BuilderImpl: WindowInsetsCompat$BuilderImpl(androidx.core.view.WindowInsetsCompat)
io.flutter.view.AccessibilityBridge: void access$1300(io.flutter.view.AccessibilityBridge)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest: boolean hasGesture(android.webkit.WebResourceRequest)
io.flutter.plugins.webviewflutter.PigeonApiWebStorage: PigeonApiWebStorage(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.plugin.platform.PlatformPlugin$1: void popSystemNavigator()
androidx.recyclerview.widget.RecyclerView: void setClipToPadding(boolean)
io.flutter.app.FlutterFragmentActivity: void onNewIntent(android.content.Intent)
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: int getHeight()
androidx.core.view.WindowInsetsCompat$Impl28: WindowInsetsCompat$Impl28(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl28)
androidx.appcompat.widget.SearchView: int getSuggestionRowLayout()
io.flutter.plugin.platform.PlatformViewWrapper: int getRenderTargetHeight()
androidx.appcompat.widget.AppCompatImageButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
io.flutter.plugins.urllauncher.Messages$PigeonCodec: void writeValue(java.io.ByteArrayOutputStream,java.lang.Object)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
io.flutter.Log: void d(java.lang.String,java.lang.String)
io.flutter.embedding.android.FlutterImageView: void onSizeChanged(int,int,int,int)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: kotlin.Unit lambda$onReceivedHttpError$4(kotlin.Result)
io.flutter.embedding.android.FlutterView: boolean dispatchKeyEvent(android.view.KeyEvent)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setRootAlpha(int)
io.flutter.embedding.android.FlutterFragment: void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
io.flutter.embedding.engine.renderer.FlutterRenderer$2: void onDestroy(androidx.lifecycle.LifecycleOwner)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: long addHostCreatedInstance(java.lang.Object)
io.flutter.embedding.android.FlutterFragment: void onAttach(android.content.Context)
io.flutter.embedding.android.FlutterFragmentActivity: java.lang.String getCachedEngineGroupId()
io.flutter.plugins.webviewflutter.PigeonApiConsoleMessage: java.lang.String sourceId(android.webkit.ConsoleMessage)
io.flutter.view.AccessibilityBridge: int access$1172(io.flutter.view.AccessibilityBridge,int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.engine.FlutterEngine getFlutterEngine()
org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getProfileStore()
io.flutter.plugin.common.StringCodec: java.lang.String decodeMessage(java.nio.ByteBuffer)
io.flutter.view.AccessibilityBridge$SemanticsNode: float access$5600(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.urllauncher.Messages$BrowserOptions$Builder: Messages$BrowserOptions$Builder()
androidx.core.os.BundleApi21ImplKt: void putSize(android.os.Bundle,java.lang.String,android.util.Size)
io.flutter.plugins.webviewflutter.PigeonApiWebView: void pigeon_newInstance(android.webkit.WebView,kotlin.jvm.functions.Function1)
io.flutter.plugin.platform.PlatformPlugin: void access$700(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
androidx.core.view.WindowInsetsCompat$Impl21: void setStableInsets(androidx.core.graphics.Insets)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$27$lambda$26(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
org.chromium.support_lib_boundary.WebMessagePortBoundaryInterface: void setWebMessageCallback(java.lang.reflect.InvocationHandler,android.os.Handler)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation fromValue(java.lang.String)
io.flutter.embedding.engine.systemchannels.SettingsChannel: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder startMessage()
io.flutter.plugins.imagepicker.Messages$SourceSpecification: int hashCode()
androidx.fragment.app.Fragment: void setMenuVisibility(boolean)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabled(boolean)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: FlutterActivityAndFragmentDelegate(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host)
androidx.fragment.app.Fragment: void unregisterForContextMenu(android.view.View)
io.flutter.plugins.imagepicker.ImagePickerCache$CacheType: io.flutter.plugins.imagepicker.ImagePickerCache$CacheType valueOf(java.lang.String)
io.flutter.embedding.android.MotionEventTracker: io.flutter.embedding.android.MotionEventTracker getInstance()
androidx.core.app.AppOpsManagerCompat$Api29Impl: android.app.AppOpsManager getSystemService(android.content.Context)
io.flutter.embedding.android.KeyboardMap: io.flutter.embedding.android.KeyboardMap$TogglingGoal[] getTogglingGoals()
androidx.appcompat.widget.ActionBarContextView: int getAnimatedVisibility()
androidx.appcompat.widget.SearchView: SearchView(android.content.Context,android.util.AttributeSet)
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()
io.flutter.embedding.android.FlutterSurfaceView$1: FlutterSurfaceView$1(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: java.lang.Object remove(long)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient$Companion: void setUpMessageHandlers$lambda$9$lambda$8(io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetEnd()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: kotlin.Unit lambda$onScrollChanged$0(kotlin.Result)
io.flutter.app.FlutterFragmentActivity: java.lang.Object valuePublishedByPlugin(java.lang.String)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$4602(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int)
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: long getId()
io.flutter.plugin.platform.PlatformViewsController: void destroyOverlaySurfaces()
io.flutter.app.FlutterActivityDelegate: void onPause()
io.flutter.view.FlutterView: io.flutter.view.FlutterNativeView getFlutterNativeView()
androidx.appcompat.widget.AppCompatTextView: androidx.core.text.PrecomputedTextCompat$Params getTextMetricsParamsCompat()
androidx.fragment.app.Fragment: java.lang.Object getSharedElementReturnTransition()
io.flutter.util.ViewUtils: ViewUtils()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getInsets(int)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest getPigeonApiPermissionRequest()
io.flutter.embedding.engine.plugins.service.ServiceAware$OnModeChangeListener: void onMoveToForeground()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void commitBackGesture()
io.flutter.plugins.imagepicker.ImagePickerDelegate: void handleChooseImageResult(int,android.content.Intent)
io.flutter.plugins.imagepicker.ImagePickerPlugin: ImagePickerPlugin()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonCodec: java.lang.Object readValueOfType(byte,java.nio.ByteBuffer)
io.flutter.plugins.webviewflutter.DownloadListenerProxyApi$DownloadListenerImpl: kotlin.Unit lambda$onDownloadStart$0(kotlin.Result)
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi$-CC: void lambda$setUp$2(io.flutter.plugins.urllauncher.Messages$UrlLauncherApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
androidx.fragment.app.FragmentContainerView: androidx.fragment.app.Fragment getFragment()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifierBase(int)
io.flutter.plugin.platform.SurfaceProducerPlatformViewRenderTarget: long getId()
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemWindowInsets(androidx.core.graphics.Insets)
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getCollapseIcon()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceChanged(long,int,int)
io.flutter.embedding.engine.dart.DartMessenger$SerialTaskQueue: DartMessenger$SerialTaskQueue(java.util.concurrent.ExecutorService)
androidx.window.area.reflectionguard.ExtensionWindowAreaPresentationRequirements: void setPresentationView(android.view.View)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getScaleX()
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError: Messages$CacheRetrievalError()
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: android.content.Context activeContext()
io.flutter.plugin.platform.PlatformPlugin: PlatformPlugin(android.app.Activity,io.flutter.embedding.engine.systemchannels.PlatformChannel,io.flutter.plugin.platform.PlatformPlugin$PlatformPluginDelegate)
io.flutter.view.AccessibilityBridge: android.graphics.Rect getBoundsInScreen(android.graphics.Rect)
io.flutter.embedding.engine.FlutterEngineGroup$Options: java.lang.String getInitialRoute()
io.flutter.plugin.platform.PlatformViewWrapper: void onDescendantInvalidated(android.view.View,android.view.View)
io.flutter.embedding.android.FlutterFragment: void onStart()
io.flutter.embedding.android.FlutterActivity: android.os.Bundle getMetaData()
io.flutter.plugins.urllauncher.Messages$WebViewOptions: void setEnableJavaScript(java.lang.Boolean)
io.flutter.app.FlutterActivityDelegate: android.view.View access$002(io.flutter.app.FlutterActivityDelegate,android.view.View)
androidx.core.view.MenuItemCompat$Api26Impl: java.lang.CharSequence getTooltipText(android.view.MenuItem)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: java.lang.Long getInt(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.plugins.webviewflutter.PigeonApiWebView: void loadData(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void onRestoreInstanceState(android.os.Bundle)
io.flutter.view.TextureRegistry$SurfaceProducer: void scheduleFrame()
io.flutter.plugin.editing.TextInputPlugin: void access$200(io.flutter.plugin.editing.TextInputPlugin)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: boolean isBitSet(long,int)
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions: boolean equals(java.lang.Object)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1$2: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.embedding.android.FlutterView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
io.flutter.embedding.engine.systemchannels.SpellCheckChannel: SpellCheckChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: java.lang.Object getSystemService(java.lang.String)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: void setError(io.flutter.plugins.imagepicker.Messages$CacheRetrievalError)
io.flutter.embedding.android.FlutterSurfaceView: boolean shouldNotify()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$502(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.WindowInsets)
androidx.appcompat.widget.SwitchCompat: android.content.res.ColorStateList getThumbTintList()
io.flutter.view.AccessibilityBridge$SemanticsNode: void ensureInverseTransform()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.embedding.engine.FlutterJNI: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient$1: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.plugin.platform.PlatformViewWrapper: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
androidx.fragment.app.Fragment: boolean performContextItemSelected(android.view.MenuItem)
androidx.fragment.app.FragmentActivity: void startIntentSenderFromFragment(androidx.fragment.app.Fragment,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)
io.flutter.embedding.android.FlutterActivity: void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
kotlinx.coroutines.selects.TrySelectDetailedResult: kotlinx.coroutines.selects.TrySelectDetailedResult valueOf(java.lang.String)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebResourceResponse getPigeonApiWebResourceResponse()
io.flutter.embedding.engine.FlutterEngineGroup: FlutterEngineGroup(android.content.Context)
androidx.activity.ComponentActivity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)
io.flutter.app.FlutterPluginRegistry: android.app.Activity access$000(io.flutter.app.FlutterPluginRegistry)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebView getPigeonApiWebView()
androidx.fragment.app.Fragment: void setExitTransition(java.lang.Object)
io.flutter.app.FlutterPluginRegistry: java.util.List access$900(io.flutter.app.FlutterPluginRegistry)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String access$3802(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String)
io.flutter.view.AccessibilityBridge: void predictCursorMovement(io.flutter.view.AccessibilityBridge$SemanticsNode,int,boolean,boolean)
io.flutter.embedding.android.FlutterView$5: void onFlutterUiNoLongerDisplayed()
io.flutter.plugin.platform.PlatformViewRegistryImpl: io.flutter.plugin.platform.PlatformViewFactory getFactory(java.lang.String)
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi: java.lang.Boolean launchUrl(java.lang.String,java.util.Map)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: int getAttributionBehavior()
androidx.preference.internal.PreferenceImageView: int getMaxWidth()
androidx.core.view.WindowInsetsCompat$Impl20: boolean equals(java.lang.Object)
io.flutter.plugins.imagepicker.Messages: java.util.ArrayList wrapError(java.lang.Throwable)
io.flutter.plugins.webviewflutter.PigeonApiCookieManager$Companion: void setUpMessageHandlers$lambda$8$lambda$7(io.flutter.plugins.webviewflutter.PigeonApiCookieManager,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2800(io.flutter.view.AccessibilityBridge$SemanticsNode)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemGestureInsets(androidx.core.graphics.Insets)
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: FlutterView$SurfaceTextureRegistryEntry(io.flutter.view.FlutterView,long,android.graphics.SurfaceTexture)
io.flutter.embedding.engine.renderer.FlutterRenderer$TextureFinalizerRunnable: FlutterRenderer$TextureFinalizerRunnable(long,io.flutter.embedding.engine.FlutterJNI)
io.flutter.embedding.engine.dart.DartExecutor$1: DartExecutor$1(io.flutter.embedding.engine.dart.DartExecutor)
androidx.core.view.ViewParentCompat$Api21Impl: void onNestedPreScroll(android.view.ViewParent,android.view.View,int,int,int[])
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: ImeSyncDeferringInsetsCallback(android.view.View)
io.flutter.embedding.engine.renderer.FlutterRenderer: boolean isDisplayingFlutterUi()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] $values()
io.flutter.embedding.android.AndroidTouchProcessor: void addPointerForIndex(android.view.MotionEvent,int,int,int,android.graphics.Matrix,java.nio.ByteBuffer,android.content.Context)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean access$100(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate)
io.flutter.Log: void setLogLevel(int)
android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
io.flutter.plugins.webviewflutter.FileChooserParamsProxyApi: io.flutter.plugins.webviewflutter.FileChooserMode mode(android.webkit.WebChromeClient$FileChooserParams)
io.flutter.view.AccessibilityBridge$SemanticsNode: float max(float,float,float,float)
io.flutter.embedding.engine.systemchannels.NavigationChannel: void setInitialRoute(java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: int getChangingConfigurations()
io.flutter.plugins.sharedpreferences.StringListLookupResultType: io.flutter.plugins.sharedpreferences.StringListLookupResultType valueOf(java.lang.String)
io.flutter.embedding.engine.plugins.service.ServicePluginBinding: void removeOnModeChangeListener(io.flutter.embedding.engine.plugins.service.ServiceAware$OnModeChangeListener)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.net.Uri getUri(java.lang.Object)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$6400(io.flutter.view.AccessibilityBridge$SemanticsNode)
androidx.activity.ComponentActivity: void setContentView(android.view.View)
io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager: void setJNI(io.flutter.embedding.engine.FlutterJNI)
io.flutter.embedding.android.FlutterFragment: void setDelegateFactory(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$DelegateFactory)
io.flutter.plugins.imagepicker.ImagePickerPlugin: void setup(io.flutter.plugin.common.BinaryMessenger,android.app.Application,android.app.Activity,io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder: io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder backgroundMode(io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode)
io.flutter.embedding.android.KeyData: KeyData()
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)
io.flutter.embedding.engine.FlutterEngine: FlutterEngine(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterJNI,io.flutter.plugin.platform.PlatformViewsController,java.lang.String[],boolean,boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.plugin.common.StandardMethodCodec: java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall)
androidx.appcompat.view.menu.ListMenuItemView: void setGroupDividerEnabled(boolean)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection fromInt(int)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebViewClient getPigeonApiWebViewClient()
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler: void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: long id()
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: Messages$CacheRetrievalResult()
androidx.core.view.WindowInsetsCompat$Impl30: WindowInsetsCompat$Impl30(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl30)
io.flutter.embedding.engine.plugins.service.ServiceControlSurface: void onMoveToBackground()
io.flutter.app.FlutterActivityDelegate: void runBundle(java.lang.String)
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder: android.content.Intent build(android.content.Context)
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient$1: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction getOrCreateAccessibilityAction(int)
io.flutter.plugins.webviewflutter.PigeonApiCookieManager: PigeonApiCookieManager(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.plugin.platform.SingleViewPresentation$ImmContext: android.content.Context createDisplayContext(android.view.Display)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String)
io.flutter.embedding.android.FlutterImageView: FlutterImageView(android.content.Context,int,int,io.flutter.embedding.android.FlutterImageView$SurfaceKind)
androidx.appcompat.widget.SearchView: void setOnSearchClickListener(android.view.View$OnClickListener)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void clearClient()
androidx.browser.customtabs.CustomTabsIntent$Api34Impl: void setShareIdentityEnabled(android.app.ActivityOptions,boolean)
androidx.fragment.app.Fragment: void onPrimaryNavigationFragmentChanged(boolean)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long id()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder shouldAutomaticallyHandleOnBackPressed(boolean)
androidx.appcompat.widget.AppCompatImageView: void setBackgroundResource(int)
io.flutter.embedding.engine.FlutterJNI: void updateRefreshRate()
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$4$lambda$3(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.fragment.app.Fragment: void setSharedElementReturnTransition(java.lang.Object)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient getPigeonApiWebChromeClient()
io.flutter.view.AccessibilityBridge$SemanticsNode: void transformPoint(float[],float[],float[])
io.flutter.plugin.platform.PlatformPlugin$1: void share(java.lang.String)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean finishComposingText()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.MouseCursorChannel getMouseCursorChannel()
androidx.recyclerview.widget.StaggeredGridLayoutManager: StaggeredGridLayoutManager(android.content.Context,android.util.AttributeSet,int,int)
androidx.fragment.app.Fragment: int getId()
androidx.appcompat.widget.ActionBarOverlayLayout: void setIcon(int)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: io.flutter.embedding.engine.FlutterJNI access$200(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager)
io.flutter.plugin.platform.PlatformViewsController: java.lang.Class[] access$600()
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream: byte[] buffer()
io.flutter.plugin.platform.PlatformPlugin$PlatformPluginDelegate$-CC: void $default$setFrameworkHandlesBack(io.flutter.plugin.platform.PlatformPlugin$PlatformPluginDelegate,boolean)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi: void removeStrongReference$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: void setWebViewClient(android.webkit.WebViewClient)
io.flutter.plugins.urllauncher.UrlLauncherPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
androidx.activity.ComponentActivity: void onMultiWindowModeChanged(boolean,android.content.res.Configuration)
io.flutter.plugin.common.PluginRegistry$ActivityResultListener: boolean onActivityResult(int,int,android.content.Intent)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: void setBool(java.lang.String,boolean,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.app.FlutterActivity: io.flutter.view.FlutterNativeView createFlutterNativeView()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$DefaultFlutterAssets: FlutterEngineConnectionRegistry$DefaultFlutterAssets(io.flutter.embedding.engine.loader.FlutterLoader)
io.flutter.embedding.engine.systemchannels.SystemChannel: SystemChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$dataStoreSetString$2: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.appcompat.widget.ActionMenuView: void setOverflowReserved(boolean)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromActivity()
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: io.flutter.plugins.webviewflutter.ConsoleMessageLevel[] $values()
io.flutter.plugins.imagepicker.ImagePickerCache: java.lang.String retrievePendingCameraMediaUriPath()
io.flutter.plugins.webviewflutter.PigeonApiFileChooserParams: boolean isCaptureEnabled(android.webkit.WebChromeClient$FileChooserParams)
io.flutter.plugins.webviewflutter.WebViewProxyApi: void loadUrl(android.webkit.WebView,java.lang.String,java.util.Map)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onHideCustomView$lambda$5(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugin.platform.PlatformPlugin$2: void lambda$onSystemUiVisibilityChange$0(int)
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets: java.lang.String getAssetFilePathByName(java.lang.String)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction getActionScrollInDirection()
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugin.common.StandardMethodCodec: java.lang.Object decodeEnvelope(java.nio.ByteBuffer)
io.flutter.embedding.engine.FlutterEngineGroup$1: void onPreEngineRestart()
io.flutter.embedding.android.AndroidTouchProcessor: boolean onTouchEvent(android.view.MotionEvent)
androidx.appcompat.widget.LinearLayoutCompat: void setMeasureWithLargestChildEnabled(boolean)
io.flutter.plugins.webviewflutter.PigeonApiConsoleMessage: void pigeon_newInstance(android.webkit.ConsoleMessage,kotlin.jvm.functions.Function1)
io.flutter.embedding.android.FlutterView$1: void onAccessibilityChanged(boolean,boolean)
io.flutter.plugins.webviewflutter.PigeonApiWebView: void onScrollChanged$lambda$1(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugin.editing.TextInputPlugin: void lockPlatformViewInputConnection()
io.flutter.plugin.platform.PlatformView: void dispose()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setBackgroundResource(int)
org.chromium.support_lib_boundary.ProfileBoundaryInterface: android.webkit.ServiceWorkerController getServiceWorkerController()
io.flutter.plugins.imagepicker.ImagePickerDelegate$MediaPath: java.lang.String getPath()
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$28$lambda$27(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: void onPermissionRequest(android.webkit.PermissionRequest)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void cleanup()
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: void success(java.lang.Object)
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: boolean access$200(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry)
io.flutter.view.AccessibilityBridge: void setOnAccessibilityChangeListener(io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener)
io.flutter.plugins.webviewflutter.WebViewFlutterPlugin: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager getInstanceManager()
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: long access$300(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry)
androidx.fragment.app.Fragment: java.lang.String getString(int,java.lang.Object[])
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: int getRaw()
io.flutter.embedding.engine.plugins.lifecycle.FlutterLifecycleAdapter: androidx.lifecycle.Lifecycle getActivityLifecycle(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.plugin.platform.PlatformViewsController: void configureForHybridComposition(io.flutter.plugin.platform.PlatformView,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest)
androidx.activity.ComponentActivity: void addOnConfigurationChangedListener(androidx.core.util.Consumer)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$15$lambda$14(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.PigeonApiWebStorage$Companion: PigeonApiWebStorage$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.view.TextureRegistry$ImageTextureEntry: void pushImage(android.media.Image)
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type[] $values()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager$PigeonFinalizationListener: void onFinalize(long)
io.flutter.embedding.engine.systemchannels.KeyboardChannel$KeyboardMethodHandler: java.util.Map getKeyboardState()
io.flutter.plugins.webviewflutter.FileChooserMode: io.flutter.plugins.webviewflutter.FileChooserMode[] values()
io.flutter.plugins.imagepicker.ImageResizer: int calculateSampleSize(android.graphics.BitmapFactory$Options,int,int)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi: java.lang.Boolean setDouble(java.lang.String,java.lang.Double)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
io.flutter.plugins.imagepicker.Messages$GeneralOptions$Builder: io.flutter.plugins.imagepicker.Messages$GeneralOptions$Builder setUsePhotoPicker(java.lang.Boolean)
androidx.appcompat.widget.SearchView: void setIconified(boolean)
io.flutter.plugins.sharedpreferences.StringListResult: io.flutter.plugins.sharedpreferences.StringListResult copy$default(io.flutter.plugins.sharedpreferences.StringListResult,java.lang.String,io.flutter.plugins.sharedpreferences.StringListLookupResultType,int,java.lang.Object)
io.flutter.plugin.editing.TextInputPlugin: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback getImeSyncCallback()
io.flutter.view.AccessibilityBridge$SemanticsNode: android.text.SpannableString createSpannableString(java.lang.String,java.util.List)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$EdgeEffectFactory getEdgeEffectFactory()
io.flutter.util.ViewUtils$DisplayUpdater: void updateDisplayMetrics(float,float,float)
androidx.activity.ComponentActivity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)
androidx.fragment.app.Fragment: boolean shouldShowRequestPermissionRationale(java.lang.String)
io.flutter.embedding.android.FlutterFragment: void onActivityResult(int,int,android.content.Intent)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi: io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl pigeon_defaultConstructor()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: android.app.Activity getAppComponent()
io.flutter.view.AccessibilityBridge$1: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiWebViewClient,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.common.BinaryMessenger: void enableBufferingIncomingMessages()
io.flutter.view.FlutterView: void commitBackGesture()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: androidx.core.graphics.PathParser$PathDataNode[] getPathData()
androidx.appcompat.widget.Toolbar: int getTitleMarginBottom()
androidx.core.app.AppOpsManagerCompat$Api29Impl: int checkOpNoThrow(android.app.AppOpsManager,java.lang.String,int,java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onPageFinished$lambda$2(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugin.common.BasicMessageChannel: void send(java.lang.Object)
io.flutter.plugins.imagepicker.ImagePickerCache: ImagePickerCache(android.content.Context)
io.flutter.plugin.platform.PlatformPlugin: void access$1100(io.flutter.plugin.platform.PlatformPlugin,java.lang.String)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$4(kotlin.Result)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: java.util.List getPaths()
io.flutter.embedding.engine.FlutterJNI: void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager)
androidx.fragment.app.Fragment: boolean isRemoving()
io.flutter.plugin.text.ProcessTextPlugin: java.util.Map queryTextActions()
io.flutter.plugin.platform.SingleViewWindowManager: boolean isCrossWindowBlurEnabled()
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String access$3000(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
io.flutter.app.FlutterFragmentActivity: void onDestroy()
io.flutter.embedding.android.FlutterActivity: void setFrameworkHandlesBack(boolean)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceError: long errorCode(android.webkit.WebResourceError)
androidx.appcompat.widget.ActivityChooserView$InnerLayout: ActivityChooserView$InnerLayout(android.content.Context,android.util.AttributeSet)
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setBuiltInZoomControls(android.webkit.WebSettings,boolean)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: java.util.ArrayList toList()
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow valueOf(java.lang.String)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate getCompatAccessibilityDelegate()
androidx.core.content.FileProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onProgressChanged(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,android.webkit.WebView,long,kotlin.jvm.functions.Function1)
io.flutter.plugin.platform.PlatformView: void onFlutterViewDetached()
io.flutter.plugins.imagepicker.ImagePickerDelegate: void saveStateBeforeResult()
io.flutter.embedding.android.FlutterView: void sendViewportMetricsToFlutter()
io.flutter.embedding.android.FlutterActivity: boolean isDebuggable()
io.flutter.view.VsyncWaiter: long access$002(io.flutter.view.VsyncWaiter,long)
androidx.appcompat.widget.SearchView: java.lang.CharSequence getQuery()
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.core.app.ActivityCompat$Api23Impl: boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String)
io.flutter.view.VsyncWaiter$1: void asyncWaitForVsync(long)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void updateEditingStateWithTag(int,java.util.HashMap)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void startRearDisplaySession(android.app.Activity,androidx.window.extensions.core.util.function.Consumer)
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: int getHeight()
io.flutter.embedding.android.KeyEmbedderResponder: KeyEmbedderResponder(io.flutter.plugin.common.BinaryMessenger)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2220(io.flutter.view.AccessibilityBridge$SemanticsNode,int)
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler: void pigeon_newInstance(android.webkit.HttpAuthHandler,kotlin.jvm.functions.Function1)
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void setUp(io.flutter.plugin.common.BinaryMessenger,android.content.Context)
io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask: java.lang.Object doInBackground(java.lang.Object[])
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.FlutterEngine spawn(android.content.Context,io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint,java.lang.String,java.util.List,io.flutter.plugin.platform.PlatformViewsController,boolean,boolean)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void setSynchronousReturnValueForOnJsAlert(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,boolean)
androidx.core.widget.TextViewCompat$Api23Impl: android.graphics.PorterDuff$Mode getCompoundDrawableTintMode(android.widget.TextView)
androidx.appcompat.widget.SearchView$SearchAutoComplete: int getSearchViewTextMinWidthDp()
io.flutter.app.FlutterActivityDelegate: void onLowMemory()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi: io.flutter.plugins.webviewflutter.ProxyApiRegistrar getPigeonRegistrar()
io.flutter.embedding.engine.plugins.activity.ActivityAware: void onDetachedFromActivityForConfigChanges()
io.flutter.embedding.android.FlutterActivity: void unregisterOnBackInvokedCallback()
androidx.core.view.WindowInsetsCompat$Impl: WindowInsetsCompat$Impl(androidx.core.view.WindowInsetsCompat)
io.flutter.embedding.engine.plugins.activity.ActivityControlSurface: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.embedding.engine.plugins.PluginRegistry: void add(io.flutter.embedding.engine.plugins.FlutterPlugin)
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$SentConfiguration: android.util.DisplayMetrics access$000(io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$SentConfiguration)
io.flutter.plugins.imagepicker.Messages$GeneralOptions: void setUsePhotoPicker(java.lang.Boolean)
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: android.media.ImageReader createImageReader()
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi: java.lang.Boolean supportsCustomTabs()
io.flutter.plugin.editing.TextInputPlugin: android.text.Editable getEditable()
io.flutter.embedding.engine.FlutterJNI: void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
io.flutter.plugins.imagepicker.ImagePickerDelegate: void takeVideoWithCamera(io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions,io.flutter.plugins.imagepicker.Messages$Result)
io.flutter.plugins.webviewflutter.WebViewFlutterPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
androidx.activity.OnBackPressedCallback: void handleOnBackProgressed(androidx.activity.BackEventCompat)
org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: int getCacheMode()
io.flutter.embedding.engine.systemchannels.KeyEventChannel$EventResponseHandler: void onFrameworkResponse(boolean)
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: void setSize(int,int)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.PlatformView access$000(io.flutter.plugin.platform.SingleViewPresentation$PresentationState)
io.flutter.embedding.android.KeyEmbedderResponder: void synthesizeEvent(boolean,java.lang.Long,java.lang.Long,long)
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.PluginRegistry$Registrar addNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener)
org.chromium.support_lib_boundary.StaticsBoundaryInterface: void setSafeBrowsingAllowlist(java.util.Set,android.webkit.ValueCallback)
io.flutter.plugins.urllauncher.Messages: java.util.ArrayList wrapError(java.lang.Throwable)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader access$700(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
io.flutter.embedding.engine.FlutterJNI: java.lang.String[] computePlatformResolvedLocale(java.lang.String[])
io.flutter.plugins.urllauncher.Messages$BrowserOptions: java.lang.Boolean getShowTitle()
io.flutter.embedding.android.MotionEventTracker$MotionEventId: MotionEventTracker$MotionEventId(long)
io.flutter.embedding.android.FlutterFragment: void onNewIntent(android.content.Intent)
io.flutter.plugin.editing.ListenableEditingState: int getComposingEnd()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void removeActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener)
androidx.core.view.ViewCompat$Api28Impl: boolean isAccessibilityHeading(android.view.View)
io.flutter.plugins.webviewflutter.WebViewProxyApi: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.view.AccessibilityBridge$SpellOutStringAttribute: AccessibilityBridge$SpellOutStringAttribute()
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String)
androidx.webkit.WebViewClientCompat: void onSafeBrowsingHit(android.webkit.WebView,android.webkit.WebResourceRequest,int,java.lang.reflect.InvocationHandler)
androidx.core.view.WindowInsetsCompat$Impl21: WindowInsetsCompat$Impl21(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: io.flutter.plugin.platform.PlatformPlugin providePlatformPlugin(android.app.Activity,io.flutter.embedding.engine.FlutterEngine)
io.flutter.embedding.android.FlutterFragmentActivity: io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder withNewEngineInGroup(java.lang.String)
io.flutter.plugins.webviewflutter.FlutterAssetManager: FlutterAssetManager(android.content.res.AssetManager)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)
io.flutter.view.AccessibilityBridge$SemanticsNode: android.graphics.Rect getGlobalRect()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay fromValue(java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1: SharedPreferencesPlugin$getValueByKey$$inlined$map$1(kotlinx.coroutines.flow.Flow,androidx.datastore.preferences.core.Preferences$Key)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.plugins.contentprovider.ContentProviderControlSurface getContentProviderControlSurface()
io.flutter.embedding.engine.systemchannels.TextInputChannel: void newline(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$1: PlatformChannel$1(io.flutter.embedding.engine.systemchannels.PlatformChannel)
androidx.appcompat.widget.AppCompatImageView: void setImageResource(int)
io.flutter.plugins.webviewflutter.ConsoleMessageProxyApi: java.lang.String sourceId(android.webkit.ConsoleMessage)
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: java.util.List toList()
androidx.appcompat.widget.AppCompatTextView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
androidx.recyclerview.widget.RecyclerView: void setEdgeEffectFactory(androidx.recyclerview.widget.RecyclerView$EdgeEffectFactory)
io.flutter.embedding.android.FlutterImageView: void onDraw(android.graphics.Canvas)
androidx.preference.Preference: Preference(android.content.Context,android.util.AttributeSet)
io.flutter.plugins.webviewflutter.WebViewProxyApi: java.lang.String getUrl(android.webkit.WebView)
io.flutter.plugins.urllauncher.UrlLauncherPlugin: UrlLauncherPlugin()
io.flutter.embedding.engine.systemchannels.RestorationChannel: RestorationChannel(io.flutter.plugin.common.MethodChannel,boolean)
io.flutter.view.AccessibilityBridge$SemanticsNode: void access$5400(io.flutter.view.AccessibilityBridge$SemanticsNode,java.util.List)
androidx.appcompat.widget.LinearLayoutCompat: int getBaseline()
io.flutter.plugins.urllauncher.Messages$WebViewOptions$Builder: io.flutter.plugins.urllauncher.Messages$WebViewOptions$Builder setEnableJavaScript(java.lang.Boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: java.lang.String component1()
io.flutter.view.FlutterView$Provider: io.flutter.view.FlutterView getFlutterView()
io.flutter.embedding.android.FlutterImageView: FlutterImageView(android.content.Context,android.util.AttributeSet)
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: java.lang.String toString()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler: long createForTextureLayer(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest)
io.flutter.plugins.webviewflutter.DownloadListenerProxyApi$DownloadListenerImpl: DownloadListenerProxyApi$DownloadListenerImpl(io.flutter.plugins.webviewflutter.DownloadListenerProxyApi)
androidx.appcompat.widget.SwitchCompat: void setSwitchMinWidth(int)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api30Impl: java.lang.Object createRangeInfo(int,float,float,float)
io.flutter.plugin.platform.PlatformPlugin: void access$600(io.flutter.plugin.platform.PlatformPlugin)
org.chromium.support_lib_boundary.DropDataContentProviderBoundaryInterface: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)
androidx.activity.OnBackPressedDispatcher$Api33Impl: void unregisterOnBackInvokedCallback(java.lang.Object,java.lang.Object)
androidx.appcompat.widget.SwitchCompat: void setTextOn(java.lang.CharSequence)
io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions: io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions setIsSerial(boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: SharedPreferencesBackend(io.flutter.plugin.common.BinaryMessenger,android.content.Context,io.flutter.plugins.sharedpreferences.SharedPreferencesListEncoder)
io.flutter.embedding.android.FlutterFragmentActivity: java.lang.String getDartEntrypointLibraryUri()
io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener: void onIsolateServiceIdAvailable(java.lang.String)
io.flutter.view.FlutterView: void addActivityLifecycleListener(io.flutter.plugin.common.ActivityLifecycleListener)
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions: int hashCode()
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: boolean getEnterpriseAuthenticationAppLinkPolicyEnabled()
io.flutter.plugin.common.JSONMethodCodec: JSONMethodCodec()
io.flutter.embedding.engine.FlutterJNI: void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate)
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.android.FlutterView access$500(io.flutter.plugin.platform.PlatformViewsController)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsVariationSelector(int)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void onWindowFocusChanged(boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2: SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2(kotlinx.coroutines.flow.FlowCollector,androidx.datastore.preferences.core.Preferences$Key)
io.flutter.plugins.webviewflutter.PigeonApiConsoleMessage: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode[] $values()
io.flutter.plugin.platform.PlatformViewsController: void finishFrame(boolean)
io.flutter.plugin.common.EventChannel: EventChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
io.flutter.plugins.sharedpreferences.SharedPreferencesError: SharedPreferencesError(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void addOnNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener)
io.flutter.plugins.webviewflutter.DisplayListenerProxy$1: DisplayListenerProxy$1(io.flutter.plugins.webviewflutter.DisplayListenerProxy,java.util.ArrayList,android.hardware.display.DisplayManager)
io.flutter.embedding.engine.loader.FlutterLoader$1: FlutterLoader$1(io.flutter.embedding.engine.loader.FlutterLoader,android.content.Context)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$1: void success(java.lang.Object)
io.flutter.embedding.android.FlutterActivity: void onWindowFocusChanged(boolean)
org.chromium.support_lib_boundary.ProfileBoundaryInterface: android.webkit.GeolocationPermissions getGeoLocationPermissions()
io.flutter.embedding.android.KeyboardMap$2: KeyboardMap$2()
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onReceivedRequestErrorCompat$lambda$5(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.systemchannels.ProcessTextChannel$ProcessTextMethodHandler: void processTextAction(java.lang.String,java.lang.String,boolean,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice: io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice[] values()
io.flutter.embedding.engine.FlutterEngine: void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage dequeueImage()
androidx.appcompat.widget.Toolbar: void setTitleTextColor(android.content.res.ColorStateList)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setUseWideViewPort(android.webkit.WebSettings,boolean)
androidx.activity.ComponentActivity: void addMenuProvider(androidx.core.view.MenuProvider,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$State)
io.flutter.app.FlutterFragmentActivity: void onStop()
io.flutter.embedding.engine.loader.FlutterLoader$InitResult: FlutterLoader$InitResult(java.lang.String,java.lang.String,java.lang.String,io.flutter.embedding.engine.loader.FlutterLoader$1)
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setSupportMultipleWindows(android.webkit.WebSettings,boolean)
io.flutter.plugins.imagepicker.Messages$GeneralOptions$Builder: io.flutter.plugins.imagepicker.Messages$GeneralOptions$Builder setAllowMultiple(java.lang.Boolean)
io.flutter.plugin.editing.TextInputPlugin: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)
io.flutter.embedding.engine.systemchannels.PlatformChannel: int decodeOrientations(org.json.JSONArray)
androidx.preference.SeekBarPreference: SeekBarPreference(android.content.Context,android.util.AttributeSet)
io.flutter.view.FlutterView: boolean isAttached()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void doInitialFlutterViewRun()
io.flutter.plugins.urllauncher.UrlLauncher: java.lang.Boolean supportsCustomTabs()
androidx.fragment.app.Fragment: java.lang.String toString()
androidx.appcompat.widget.AppCompatImageButton: void setSupportImageTintList(android.content.res.ColorStateList)
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler$Companion: PigeonApiHttpAuthHandler$Companion()
androidx.datastore.preferences.protobuf.FieldType: androidx.datastore.preferences.protobuf.FieldType valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void updateJavaAssetManager(android.content.res.AssetManager,java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$9$lambda$8(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.sharedpreferences.Messages: java.util.ArrayList wrapError(java.lang.Throwable)
io.flutter.embedding.engine.FlutterJNI$Factory: FlutterJNI$Factory()
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebResourceError getPigeonApiWebResourceError()
io.flutter.plugin.platform.PlatformViewsController: void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)
io.flutter.plugin.platform.PlatformViewRenderTarget: android.view.Surface getSurface()
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: SurfaceTexturePlatformViewRenderTarget(io.flutter.view.TextureRegistry$SurfaceTextureEntry)
androidx.appcompat.widget.Toolbar: void setSubtitleTextColor(int)
androidx.core.view.ViewCompat$Api21Impl: float getElevation(android.view.View)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)
androidx.activity.ComponentActivity: void removeMenuProvider(androidx.core.view.MenuProvider)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: void endOfStream()
io.flutter.plugin.platform.VirtualDisplayController: android.view.View getView()
io.flutter.embedding.android.FlutterTextureView: boolean access$002(io.flutter.embedding.android.FlutterTextureView,boolean)
io.flutter.plugins.imagepicker.Messages$SourceCamera: io.flutter.plugins.imagepicker.Messages$SourceCamera[] $values()
androidx.appcompat.widget.ActionBarContainer: void setVisibility(int)
io.flutter.plugin.common.JSONMethodCodec: java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall)
io.flutter.util.Preconditions: void checkState(boolean,java.lang.Object)
io.flutter.plugins.imagepicker.ImagePickerDelegate$2: android.net.Uri resolveFileProviderUriForFile(java.lang.String,java.io.File)
io.flutter.embedding.android.FlutterActivityLaunchConfigs: FlutterActivityLaunchConfigs()
io.flutter.plugin.common.PluginRegistry$Registrar: java.lang.String lookupKeyForAsset(java.lang.String)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$2: void success(java.lang.Object)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebResourceError getPigeonApiWebResourceError()
android.support.v4.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: void initLoadingUnitMappingToComponentNames()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityPaused(android.app.Activity)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void setReturnValueForShouldOverrideUrlLoading(boolean)
io.flutter.plugin.editing.FlutterTextUtils: int getOffsetAfter(java.lang.CharSequence,int)
io.flutter.embedding.engine.systemchannels.SettingsChannel: android.util.DisplayMetrics getPastDisplayMetrics(int)
io.flutter.plugin.localization.LocalizationPlugin$1: java.lang.String getStringResource(java.lang.String,java.lang.String)
io.flutter.embedding.android.KeyEmbedderResponder: void lambda$synchronizePressingKey$0(io.flutter.embedding.android.KeyboardMap$KeyPair,long,android.view.KeyEvent)
io.flutter.plugins.webviewflutter.PigeonApiCookieManager$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiCookieManager,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.core.view.ViewCompat$Api30Impl: java.lang.CharSequence getStateDescription(android.view.View)
io.flutter.plugins.imagepicker.ImagePickerDelegate: ImagePickerDelegate(android.app.Activity,io.flutter.plugins.imagepicker.ImageResizer,io.flutter.plugins.imagepicker.ImagePickerCache)
io.flutter.plugin.common.BasicMessageChannel: void resizeChannelBuffer(int)
io.flutter.plugins.webviewflutter.FileChooserParamsProxyApi: java.util.List acceptTypes(android.webkit.WebChromeClient$FileChooserParams)
io.flutter.embedding.android.FlutterTextureView: void access$300(io.flutter.embedding.android.FlutterTextureView,int,int)
io.flutter.plugins.imagepicker.Messages$SourceSpecification: io.flutter.plugins.imagepicker.Messages$SourceSpecification fromList(java.util.ArrayList)
io.flutter.plugins.urllauncher.WebViewActivity: boolean onKeyDown(int,android.view.KeyEvent)
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: LegacySharedPreferencesPlugin()
io.flutter.plugin.editing.TextInputPlugin: void access$300(io.flutter.plugin.editing.TextInputPlugin,android.view.View)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean clearMetaKeyStates(int)
io.flutter.plugins.urllauncher.UrlLauncher: java.lang.String lambda$new$0(android.content.Context,android.content.Intent)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate createDelegate(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host)
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener$Companion: PigeonApiDownloadListener$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets: java.lang.String getAssetFilePathBySubpath(java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.util.Map getAll(java.util.List,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.window.layout.adapter.sidecar.DistinctElementSidecarCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
androidx.appcompat.widget.ActionBarOverlayLayout: void setActionBarHideOffset(int)
io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.appcompat.widget.Toolbar: void setLogo(int)
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode valueOf(java.lang.String)
io.flutter.view.AccessibilityBridge$SemanticsNode: AccessibilityBridge$SemanticsNode(io.flutter.view.AccessibilityBridge)
io.flutter.plugin.editing.TextInputPlugin: void notifyValueChanged(java.lang.String)
io.flutter.embedding.android.FlutterFragmentActivity: FlutterFragmentActivity()
io.flutter.plugin.platform.PlatformViewsController: void onBeginFrame()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)
androidx.appcompat.widget.AppCompatImageView: android.content.res.ColorStateList getSupportImageTintList()
androidx.fragment.app.Fragment: void restoreChildFragmentState()
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener: PigeonApiDownloadListener(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1$1: SharedPreferencesPlugin$setDouble$1$1(androidx.datastore.preferences.core.Preferences$Key,double,kotlin.coroutines.Continuation)
androidx.appcompat.widget.SearchView: SearchView(android.content.Context)
io.flutter.plugin.common.JSONMethodCodec: java.nio.ByteBuffer encodeErrorEnvelopeWithStacktrace(java.lang.String,java.lang.String,java.lang.Object,java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceResponse: void pigeon_newInstance(android.webkit.WebResourceResponse,kotlin.jvm.functions.Function1)
io.flutter.plugins.imagepicker.ImagePickerDelegate: boolean onActivityResult(int,int,android.content.Intent)
androidx.core.view.WindowInsetsCompat$Impl: void copyWindowDataInto(androidx.core.view.WindowInsetsCompat)
io.flutter.embedding.android.FlutterActivity: void updateBackGestureProgress(android.window.BackEvent)
io.flutter.embedding.android.FlutterTextureView: void resume()
androidx.appcompat.widget.ActionBarOverlayLayout: int getActionBarHideOffset()
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: KeyEventChannel$FlutterKeyEvent(android.view.KeyEvent,java.lang.Character)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDeprecatedStringList$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder: android.content.Intent build(android.content.Context)
androidx.core.view.WindowInsetsCompat$Impl: void setRootViewData(androidx.core.graphics.Insets)
androidx.fragment.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean didChangeLabel()
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: kotlin.Unit lambda$onJsPrompt$10(android.webkit.JsPromptResult,io.flutter.plugins.webviewflutter.ResultCompat)
androidx.appcompat.widget.ContentFrameLayout: ContentFrameLayout(android.content.Context,android.util.AttributeSet)
io.flutter.plugins.webviewflutter.FileChooserParamsProxyApi: boolean isCaptureEnabled(android.webkit.WebChromeClient$FileChooserParams)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()
io.flutter.view.FlutterView: java.lang.String getLookupKeyForAsset(java.lang.String,java.lang.String)
androidx.fragment.app.Fragment: void setSharedElementNames(java.util.ArrayList,java.util.ArrayList)
io.flutter.embedding.android.FlutterView: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
io.flutter.embedding.engine.FlutterEngineCache: void clear()
androidx.core.widget.NestedScrollView: void setNestedScrollingEnabled(boolean)
io.flutter.plugin.platform.PlatformViewsController: void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge)
io.flutter.plugin.common.BinaryCodec: java.lang.Object decodeMessage(java.nio.ByteBuffer)
kotlin.time.DurationUnit: kotlin.time.DurationUnit valueOf(java.lang.String)
org.chromium.support_lib_boundary.WebMessageBoundaryInterface: java.lang.reflect.InvocationHandler getMessagePayload()
io.flutter.plugins.webviewflutter.WebViewProxyApi: void removeJavaScriptChannel(android.webkit.WebView,java.lang.String)
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: android.webkit.WebChromeClient getWebChromeClient()
io.flutter.embedding.engine.FlutterJNI: boolean isAttached()
io.flutter.plugins.webviewflutter.PigeonApiWebView: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void lambda$onReceivedError$9(android.webkit.WebView,int,java.lang.String,java.lang.String)
io.flutter.plugins.imagepicker.ImagePickerDelegate$MediaPath: ImagePickerDelegate$MediaPath(io.flutter.plugins.imagepicker.ImagePickerDelegate,java.lang.String,java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
androidx.core.widget.TextViewCompat$Api23Impl: void setCompoundDrawableTintMode(android.widget.TextView,android.graphics.PorterDuff$Mode)
io.flutter.embedding.android.FlutterSurfaceView: boolean access$100(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromePreferredOrientations(int)
io.flutter.plugins.imagepicker.Messages$SourceSpecification: java.util.ArrayList toList()
androidx.fragment.app.FragmentActivity: void onDestroy()
androidx.fragment.app.Fragment: androidx.lifecycle.Lifecycle getLifecycle()
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setTappableElementInsets(androidx.core.graphics.Insets)
io.flutter.embedding.android.KeyboardMap$TogglingGoal: KeyboardMap$TogglingGoal(int,long,long)
io.flutter.embedding.android.FlutterFragmentActivity: io.flutter.embedding.android.FlutterFragment createFlutterFragment()
io.flutter.plugins.sharedpreferences.StringListObjectInputStream: StringListObjectInputStream(java.io.InputStream)
io.flutter.embedding.engine.plugins.util.GeneratedPluginRegister: void registerGeneratedPlugins(io.flutter.embedding.engine.FlutterEngine)
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getResId(java.lang.Object)
io.flutter.embedding.android.FlutterActivity: void updateSystemUiOverlays()
androidx.activity.ComponentActivity: void access$ensureViewModelStore(androidx.activity.ComponentActivity)
io.flutter.embedding.android.FlutterFragment$2: FlutterFragment$2(io.flutter.embedding.android.FlutterFragment,boolean)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void launchMultiPickImageFromGalleryIntent(java.lang.Boolean,int)
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String fullAssetPathFrom(java.lang.String)
io.flutter.plugins.urllauncher.Messages$WebViewOptions: boolean equals(java.lang.Object)
io.flutter.app.FlutterPluginRegistry: boolean onActivityResult(int,int,android.content.Intent)
io.flutter.embedding.engine.FlutterEngineGroup$1: FlutterEngineGroup$1(io.flutter.embedding.engine.FlutterEngineGroup,io.flutter.embedding.engine.FlutterEngine)
io.flutter.embedding.engine.systemchannels.NavigationChannel: NavigationChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.plugins.webviewflutter.FileChooserMode: io.flutter.plugins.webviewflutter.FileChooserMode[] $values()
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry()
io.flutter.plugins.webviewflutter.ConsoleMessageProxyApi: ConsoleMessageProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: AccessibilityViewEmbedder$ViewAndId(android.view.View,int,io.flutter.view.AccessibilityViewEmbedder$1)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void setTextInputMethodHandler(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void setSize(int,int)
io.flutter.view.VsyncWaiter: io.flutter.view.VsyncWaiter getInstance(android.hardware.display.DisplayManager,io.flutter.embedding.engine.FlutterJNI)
io.flutter.view.FlutterView: int guessBottomKeyboardInset(android.view.WindowInsets)
io.flutter.plugin.platform.VirtualDisplayController: VirtualDisplayController(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.hardware.display.VirtualDisplay,io.flutter.plugin.platform.PlatformView,io.flutter.plugin.platform.PlatformViewRenderTarget,android.view.View$OnFocusChangeListener,int,java.lang.Object)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$1800(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi: android.webkit.WebViewClient pigeon_defaultConstructor()
io.flutter.embedding.engine.systemchannels.BackGestureChannel$1: BackGestureChannel$1(io.flutter.embedding.engine.systemchannels.BackGestureChannel)
io.flutter.plugins.webviewflutter.FileChooserMode: kotlin.enums.EnumEntries getEntries()
io.flutter.view.FlutterView$ZeroSides: io.flutter.view.FlutterView$ZeroSides[] $values()
io.flutter.embedding.engine.FlutterEngine: FlutterEngine(android.content.Context,java.lang.String[])
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$13$lambda$12(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.FlutterInjector$Builder: io.flutter.FlutterInjector build()
io.flutter.plugins.webviewflutter.PigeonApiWebView: java.lang.String getUrl(android.webkit.WebView)
androidx.fragment.app.Fragment: android.view.View getView()
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] $values()
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setWillSuppressErrorPage(boolean)
io.flutter.plugin.common.EventChannel$EventSink: void error(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.view.AccessibilityBridge: void access$700(io.flutter.view.AccessibilityBridge,boolean)
io.flutter.view.TextureRegistry: io.flutter.view.TextureRegistry$SurfaceProducer createSurfaceProducer()
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: androidx.core.view.accessibility.AccessibilityNodeInfoCompat getChild(android.view.accessibility.AccessibilityNodeInfo,int,int)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$29$lambda$28(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue: io.flutter.plugin.common.BasicMessageChannel$Reply enqueueConfiguration(io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$SentConfiguration)
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: DartExecutor$DartEntrypoint(java.lang.String,java.lang.String)
androidx.preference.PreferenceGroup: PreferenceGroup(android.content.Context,android.util.AttributeSet)
io.flutter.app.FlutterFragmentActivity: boolean retainFlutterNativeView()
io.flutter.plugin.common.MethodCodec: java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.embedding.android.FlutterFragmentActivity: void switchLaunchThemeForNormalTheme()
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getSubtitle()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$100(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
org.chromium.support_lib_boundary.SafeBrowsingResponseBoundaryInterface: void showInterstitial(boolean)
io.flutter.embedding.engine.loader.FlutterLoader$Settings: FlutterLoader$Settings()
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$21$lambda$20(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.core.app.AppOpsManagerCompat$Api23Impl: int noteProxyOpNoThrow(android.app.AppOpsManager,java.lang.String,java.lang.String)
io.flutter.embedding.android.FlutterFragment: boolean popSystemNavigator()
io.flutter.embedding.engine.dart.DartExecutor: void executeDartCallback(io.flutter.embedding.engine.dart.DartExecutor$DartCallback)
io.flutter.app.FlutterPluginRegistry: boolean hasPlugin(java.lang.String)
androidx.core.content.ContextCompat$Api26Impl: android.content.Intent registerReceiver(android.content.Context,android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)
io.flutter.plugin.common.BasicMessageChannel: java.nio.ByteBuffer packetFromEncodedMessage(java.nio.ByteBuffer)
io.flutter.embedding.engine.renderer.FlutterRenderer: android.graphics.Bitmap getBitmap()
androidx.appcompat.widget.Toolbar: android.widget.TextView getTitleTextView()
io.flutter.embedding.engine.systemchannels.RestorationChannel: byte[] getRestorationData()
io.flutter.view.FlutterView: void onFirstFrame()
io.flutter.embedding.android.FlutterFragment: java.lang.String getDartEntrypointFunctionName()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager$Companion: AndroidWebkitLibraryPigeonInstanceManager$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.plugins.webviewflutter.JavaScriptChannelProxyApi: JavaScriptChannelProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.plugins.webviewflutter.DownloadListenerProxyApi: android.webkit.DownloadListener pigeon_defaultConstructor()
androidx.fragment.app.Fragment: int getPopEnterAnim()
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: android.util.DisplayMetrics getRearDisplayMetrics()
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel: PigeonApiJavaScriptChannel(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.view.FlutterNativeView$1: void onFlutterUiNoLongerDisplayed()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void onSaveInstanceState(android.os.Bundle)
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: void setMethodHandler(io.flutter.embedding.engine.systemchannels.MouseCursorChannel$MouseCursorMethodHandler)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean isFlutterEngineFromHost()
io.flutter.embedding.android.KeyData$DeviceType: long getValue()
io.flutter.embedding.engine.systemchannels.NavigationChannel: void pushRouteInformation(java.lang.String)
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder: android.content.Intent build(android.content.Context)
io.flutter.plugin.platform.PlatformViewsController: void onEndFrame()
androidx.core.view.ViewCompat$Api21Impl: void setTransitionName(android.view.View,java.lang.String)
androidx.activity.ComponentActivity: void removeOnTrimMemoryListener(androidx.core.util.Consumer)
io.flutter.view.AccessibilityBridge: void access$1200(io.flutter.view.AccessibilityBridge)
io.flutter.plugins.imagepicker.Messages$PigeonCodec: void writeValue(java.io.ByteArrayOutputStream,java.lang.Object)
io.flutter.embedding.android.FlutterSurfaceView: boolean isSurfaceAvailableForRendering()
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$13$lambda$12(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.FlutterAssetManagerProxyApi: FlutterAssetManagerProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.view.TextureRegistry: io.flutter.view.TextureRegistry$ImageTextureEntry createImageTexture()
io.flutter.plugin.editing.TextInputPlugin: android.view.View access$000(io.flutter.plugin.editing.TextInputPlugin)
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverAware: void onAttachedToBroadcastReceiver(io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverPluginBinding)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: androidx.lifecycle.Lifecycle getLifecycle()
io.flutter.plugin.platform.PlatformPlugin: void setFrameworkHandlesBack(boolean)
kotlin.collections.AbstractList: AbstractList()
io.flutter.view.AccessibilityViewEmbedder: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
io.flutter.embedding.android.FlutterView: void onDetachedFromWindow()
androidx.fragment.app.Fragment: android.content.Context getContext()
io.flutter.app.FlutterActivity: boolean hasPlugin(java.lang.String)
io.flutter.embedding.android.FlutterSurfaceView: void init()
io.flutter.embedding.engine.plugins.PluginRegistry: void add(java.util.Set)
io.flutter.plugin.editing.InputConnectionAdaptor: InputConnectionAdaptor(android.view.View,int,io.flutter.embedding.engine.systemchannels.TextInputChannel,io.flutter.plugin.editing.InputConnectionAdaptor$KeyboardDelegate,io.flutter.plugin.editing.ListenableEditingState,android.view.inputmethod.EditorInfo,io.flutter.embedding.engine.FlutterJNI)
io.flutter.plugins.sharedpreferences.ListEncoder: java.util.List decode(java.lang.String)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar$1: AndroidWebkitLibraryPigeonProxyApiRegistrar$1(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi)
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder: io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder initialRoute(java.lang.String)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void setContainerTitle(android.view.accessibility.AccessibilityNodeInfo,java.lang.CharSequence)
androidx.activity.ComponentActivity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$3: void error(java.lang.Throwable)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: kotlin.Unit lambda$doUpdateVisitedHistory$14(kotlin.Result)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean isAttachedToService()
io.flutter.plugin.editing.TextInputPlugin: void clearTextInputClient()
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: DartExecutor$DefaultBinaryMessenger(io.flutter.embedding.engine.dart.DartMessenger,io.flutter.embedding.engine.dart.DartExecutor$1)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void dispose(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiView getPigeonApiView()
androidx.core.view.ViewConfigurationCompat$Api26Impl: float getScaledHorizontalScrollFactor(android.view.ViewConfiguration)
io.flutter.embedding.android.FlutterFragmentActivity: java.lang.String getAppBundlePath()
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2212(io.flutter.view.AccessibilityBridge$SemanticsNode,int)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: void finalize()
io.flutter.embedding.android.FlutterActivity: void setDelegate(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewFakeWindowViewGroup access$100(io.flutter.plugin.platform.SingleViewPresentation$PresentationState)
androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry: java.lang.Object valuePublishedByPlugin(java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getStrokeAlpha()
androidx.core.os.BundleCompat$Api33Impl: java.lang.Object[] getParcelableArray(android.os.Bundle,java.lang.String,java.lang.Class)
androidx.appcompat.widget.LinearLayoutCompat: int getBaselineAlignedChildIndex()
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getTitle()
io.flutter.embedding.android.FlutterView: boolean hasRenderedFirstFrame()
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError: java.lang.String getCode()
io.flutter.view.FlutterView: void onPause()
io.flutter.plugins.imagepicker.ImagePickerDelegate: void takeImageWithCamera(io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions,io.flutter.plugins.imagepicker.Messages$Result)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: WindowInsetsCompat$BuilderImpl29()
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void setRequestInitialAccessibilityFocus(android.view.accessibility.AccessibilityNodeInfo,boolean)
androidx.fragment.app.FragmentContainerView: void setLayoutTransition(android.animation.LayoutTransition)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long access$300(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo)
androidx.core.view.ViewCompat$Api21Impl: boolean hasNestedScrollingParent(android.view.View)
io.flutter.plugin.platform.SurfaceProducerPlatformViewRenderTarget: int getHeight()
io.flutter.embedding.engine.dart.DartMessenger$SerialTaskQueue: void flush()
io.flutter.plugin.platform.PlatformViewFactory: PlatformViewFactory(io.flutter.plugin.common.MessageCodec)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.TransparencyMode getTransparencyMode()
io.flutter.app.FlutterActivityDelegate$ViewFactory: io.flutter.view.FlutterNativeView createFlutterNativeView()
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setGeolocationEnabled(android.webkit.WebSettings,boolean)
io.flutter.FlutterInjector: void setInstance(io.flutter.FlutterInjector)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityNodeInfo findFocus(int)
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions: java.util.ArrayList toList()
io.flutter.embedding.android.KeyData$Type: long getValue()
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$7$lambda$6(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.core.content.FileProvider: android.net.Uri getUriForFile(android.content.Context,java.lang.String,java.io.File)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: android.graphics.Rect getRect()
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect)
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions$Companion: io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions fromList(java.util.List)
io.flutter.plugin.common.MethodChannel: void invokeMethod(java.lang.String,java.lang.Object)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$2: FlutterActivityAndFragmentDelegate$2(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate,io.flutter.embedding.android.FlutterView)
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState: android.app.Activity getActivity()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: void onFlutterSurfaceViewCreated(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.embedding.android.FlutterActivity$1: FlutterActivity$1(io.flutter.embedding.android.FlutterActivity)
io.flutter.plugins.imagepicker.Messages$SourceType: io.flutter.plugins.imagepicker.Messages$SourceType[] $values()
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int,int)
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle getLifecycle()
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$17$lambda$16(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$18(kotlin.Result)
io.flutter.plugin.platform.PlatformOverlayView: PlatformOverlayView(android.content.Context,android.util.AttributeSet)
io.flutter.plugins.imagepicker.ImageResizer: java.io.File createFile(java.io.File,java.lang.String)
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions$Builder: io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions$Builder setMaxDurationSeconds(java.lang.Long)
io.flutter.embedding.engine.dart.PlatformMessageHandler: void handleMessageFromDart(java.lang.String,java.nio.ByteBuffer,int,long)
androidx.fragment.app.Fragment: void setExitSharedElementCallback(androidx.core.app.SharedElementCallback)
io.flutter.util.TraceSection: TraceSection(java.lang.String)
io.flutter.plugin.editing.TextInputPlugin: void sendTextInputAppPrivateCommand(java.lang.String,android.os.Bundle)
io.flutter.plugins.webviewflutter.PigeonApiCookieManager: android.webkit.CookieManager instance()
io.flutter.plugin.editing.ListenableEditingState$1: android.text.Editable getEditable()
io.flutter.plugins.webviewflutter.WebStorageProxyApi: void deleteAllData(android.webkit.WebStorage)
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int)
io.flutter.plugins.webviewflutter.AndroidWebKitError: java.lang.Object getDetails()
io.flutter.embedding.android.FlutterFragmentActivity: io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder withCachedEngine(java.lang.String)
io.flutter.plugins.urllauncher.Messages$WebViewOptions: java.util.Map getHeaders()
io.flutter.plugin.common.StandardMessageCodec: java.nio.ByteBuffer encodeMessage(java.lang.Object)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: FlutterActivityLaunchConfigs$BackgroundMode(java.lang.String,int)
io.flutter.plugin.platform.PlatformViewsController: long configureForTextureLayerComposition(io.flutter.plugin.platform.PlatformView,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$1900(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.view.AccessibilityBridge$1: AccessibilityBridge$1(io.flutter.view.AccessibilityBridge)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageEmptyResponseCallback(int)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener)
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.Boolean remove(java.lang.String)
androidx.appcompat.widget.SearchView: int getImeOptions()
org.chromium.support_lib_boundary.ProfileBoundaryInterface: void cancelPrefetch(java.lang.String)
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: ConsoleMessageLevel(java.lang.String,int,int)
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate: boolean usesVirtualDisplay(int)
androidx.core.view.ViewCompat$Api20Impl: void requestApplyInsets(android.view.View)
io.flutter.app.FlutterPluginRegistry: io.flutter.plugin.platform.PlatformViewsController access$400(io.flutter.app.FlutterPluginRegistry)
io.flutter.plugin.text.ProcessTextPlugin: void onDetachedFromActivityForConfigChanges()
io.flutter.embedding.engine.loader.FlutterLoader: void ensureInitializationComplete(android.content.Context,java.lang.String[])
androidx.core.graphics.drawable.IconCompat$Api28Impl: android.net.Uri getUri(java.lang.Object)
io.flutter.plugin.platform.VirtualDisplayController: io.flutter.plugin.platform.VirtualDisplayController create(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.PlatformView,io.flutter.plugin.platform.PlatformViewRenderTarget,int,int,int,java.lang.Object,android.view.View$OnFocusChangeListener)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$5(kotlin.Result)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$3$lambda$2(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$4800(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
androidx.fragment.app.Fragment: int getTargetRequestCode()
io.flutter.plugins.imagepicker.ImagePickerDelegate: void handleMediaResult(java.util.ArrayList)
io.flutter.plugin.common.BinaryCodec: java.nio.ByteBuffer decodeMessage(java.nio.ByteBuffer)
io.flutter.embedding.android.FlutterFragment: void onDetach()
io.flutter.embedding.android.WindowInfoRepositoryCallbackAdapterWrapper: WindowInfoRepositoryCallbackAdapterWrapper(androidx.window.java.layout.WindowInfoTrackerCallbackAdapter)
androidx.appcompat.widget.ActionMenuView: ActionMenuView(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.systemchannels.SettingsChannel: io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue access$100()
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: void setPaths(java.util.List)
io.flutter.plugins.urllauncher.Messages$BrowserOptions: int hashCode()
io.flutter.plugins.webviewflutter.ConsoleMessageProxyApi: io.flutter.plugins.webviewflutter.ConsoleMessageLevel level(android.webkit.ConsoleMessage)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsetsAnimation$Callback getAnimationCallback()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushTransform(float[])
androidx.fragment.app.Fragment: void setFocusedView(android.view.View)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onJsConfirm$lambda$10(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.FlutterOverlaySurface: FlutterOverlaySurface(int,android.view.Surface)
io.flutter.embedding.engine.FlutterEngineGroupCache: io.flutter.embedding.engine.FlutterEngineGroup get(java.lang.String)
io.flutter.plugins.urllauncher.UrlLauncher: java.lang.Boolean openUrlInApp(java.lang.String,java.lang.Boolean,io.flutter.plugins.urllauncher.Messages$WebViewOptions,io.flutter.plugins.urllauncher.Messages$BrowserOptions)
androidx.core.view.WindowInsetsCompat$Impl: void setOverriddenInsets(androidx.core.graphics.Insets[])
io.flutter.plugins.webviewflutter.PigeonApiWebView: void setDownloadListener(android.webkit.WebView,android.webkit.DownloadListener)
io.flutter.plugins.sharedpreferences.SharedPreferencesListEncoder: java.lang.String encode(java.util.List)
androidx.activity.OnBackPressedCallback: void setEnabledChangedCallback$activity_release(kotlin.jvm.functions.Function0)
io.flutter.embedding.engine.systemchannels.ProcessTextChannel: ProcessTextChannel(io.flutter.embedding.engine.dart.DartExecutor,android.content.pm.PackageManager)
io.flutter.plugins.webviewflutter.PermissionRequestProxyApi: java.util.List resources(android.webkit.PermissionRequest)
io.flutter.plugins.urllauncher.WebViewActivity: android.content.Intent createIntent(android.content.Context,java.lang.String,boolean,boolean,android.os.Bundle)
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue$1: void reply(java.lang.Object)
io.flutter.embedding.engine.plugins.PluginRegistry: void remove(java.util.Set)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setNativeSpellCheckServiceDefined(boolean)
io.flutter.view.FlutterNativeView: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: void tearDown()
io.flutter.plugin.editing.SpellCheckPlugin: SpellCheckPlugin(android.view.textservice.TextServicesManager,io.flutter.embedding.engine.systemchannels.SpellCheckChannel)
io.flutter.embedding.engine.renderer.FlutterRenderer: void setSemanticsEnabled(boolean)
io.flutter.plugin.platform.PlatformPlugin: void destroy()
androidx.core.app.NotificationManagerCompat$Api24Impl: boolean areNotificationsEnabled(android.app.NotificationManager)
io.flutter.plugins.imagepicker.ImagePickerDelegate: java.util.List queryIntentActivitiesPreApi33(android.content.pm.PackageManager,android.content.Intent)
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setTextZoom(android.webkit.WebSettings,long)
androidx.core.view.ViewCompat$Api21Impl: void setElevation(android.view.View,float)
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder shouldAttachEngineToActivity(boolean)
androidx.fragment.app.Fragment: boolean isAdded()
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: java.util.Map getAll(java.util.List,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.app.FlutterPlayStoreSplitApplication: void onCreate()
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterImageTexture(long,long,java.lang.ref.WeakReference)
io.flutter.plugins.webviewflutter.FlutterAssetManagerProxyApi: java.util.List list(io.flutter.plugins.webviewflutter.FlutterAssetManager,java.lang.String)
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: int hashCode()
io.flutter.plugins.imagepicker.ImagePickerDelegate$PermissionManager: void askForPermission(java.lang.String,int)
io.flutter.plugin.text.ProcessTextPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder: io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder backgroundMode(io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode)
io.flutter.plugins.imagepicker.ImagePickerUtils: android.content.pm.PackageInfo getPermissionsPackageInfoPreApi33(android.content.pm.PackageManager,java.lang.String)
io.flutter.plugin.common.StandardMessageCodec: void writeChar(java.io.ByteArrayOutputStream,int)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void removeOnSaveStateListener(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding$OnSaveInstanceStateListener)
io.flutter.FlutterInjector$Builder$NamedThreadFactory: FlutterInjector$Builder$NamedThreadFactory(io.flutter.FlutterInjector$Builder)
io.flutter.view.AccessibilityBridge: boolean access$400(io.flutter.view.AccessibilityBridge)
org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.Object convertWebMessagePort(java.lang.reflect.InvocationHandler)
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode valueOf(java.lang.String)
androidx.core.content.FileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)
io.flutter.embedding.engine.FlutterShellArgs: void remove(java.lang.String)
androidx.appcompat.widget.SearchView: int getPreferredHeight()
io.flutter.embedding.android.FlutterActivity: void release()
androidx.browser.customtabs.CustomTabsIntent$Api23Impl: android.app.ActivityOptions makeBasicActivityOptions()
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderAware: void onDetachedFromContentProvider()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.StackTraceElement getStackTraceElement()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void remove()
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$10$lambda$9(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl: FlutterNativeView$EngineLifecycleListenerImpl(io.flutter.view.FlutterNativeView,io.flutter.view.FlutterNativeView$1)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: void release()
io.flutter.plugins.imagepicker.ImagePickerFileProvider: ImagePickerFileProvider()
io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder: FlutterFragmentActivity$CachedEngineIntentBuilder(java.lang.Class,java.lang.String)
io.flutter.plugins.webviewflutter.WebViewProxyApi: void setDownloadListener(android.webkit.WebView,android.webkit.DownloadListener)
androidx.appcompat.widget.LinearLayoutCompat: int getOrientation()
androidx.appcompat.widget.Toolbar: int getContentInsetStart()
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$4400(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar publish(java.lang.Object)
androidx.appcompat.view.menu.ListMenuItemView: void setChecked(boolean)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void dispatchDraw(android.graphics.Canvas)
io.flutter.embedding.android.FlutterFragment$1: void onWindowFocusChanged(boolean)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi: io.flutter.plugins.webviewflutter.ProxyApiRegistrar getPigeonRegistrar()
androidx.core.content.ContextCompat$Api33Impl: android.content.Intent registerReceiver(android.content.Context,android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)
io.flutter.embedding.android.FlutterFragment: void onSaveInstanceState(android.os.Bundle)
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverPluginBinding: android.content.BroadcastReceiver getBroadcastReceiver()
androidx.webkit.WebViewClientCompat: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,java.lang.reflect.InvocationHandler)
androidx.appcompat.widget.SwitchCompat: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
io.flutter.plugins.webviewflutter.PigeonApiCookieManager: void removeAllCookies(android.webkit.CookieManager,kotlin.jvm.functions.Function1)
io.flutter.plugins.webviewflutter.PigeonApiWebViewPoint: void pigeon_newInstance(io.flutter.plugins.webviewflutter.WebViewPoint,kotlin.jvm.functions.Function1)
io.flutter.app.FlutterActivityDelegate: java.lang.Boolean showSplashScreenUntilFirstFrame()
androidx.core.widget.TextViewCompat$Api23Impl: int getHyphenationFrequency(android.widget.TextView)
io.flutter.embedding.android.FlutterFragment: java.lang.String getDartEntrypointLibraryUri()
io.flutter.view.TextureRegistry$SurfaceProducer: int getWidth()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getRootStableInsets()
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: void setType(io.flutter.plugins.imagepicker.Messages$CacheRetrievalType)
androidx.appcompat.widget.ActionMenuView: void setPopupTheme(int)
io.flutter.app.FlutterFragmentActivity: void onActivityResult(int,int,android.content.Intent)
io.flutter.plugin.common.BasicMessageChannel: void setWarnsOnChannelOverflow(io.flutter.plugin.common.BinaryMessenger,java.lang.String,boolean)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] values()
io.flutter.app.FlutterActivityDelegate: boolean hasPlugin(java.lang.String)
kotlinx.coroutines.android.AndroidDispatcherFactory: int getLoadPriority()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2$1: SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2$1(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2,kotlin.coroutines.Continuation)
androidx.recyclerview.widget.RecyclerView: int getMaxFlingVelocity()
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.view.TextureRegistry textures()
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState[] $values()
io.flutter.plugin.platform.PlatformViewRegistryImpl: PlatformViewRegistryImpl()
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi: java.lang.Boolean setEncodedStringList(java.lang.String,java.lang.String)
io.flutter.embedding.android.AndroidTouchProcessor: int getVerticalScrollFactorPre26(android.content.Context)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.lang.Object dataStoreSetString(java.lang.String,java.lang.String,kotlin.coroutines.Continuation)
androidx.appcompat.widget.DropDownListView: void setListSelectionHidden(boolean)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void lambda$onActivityResult$5(int)
io.flutter.embedding.android.FlutterTextureView: FlutterTextureView(android.content.Context)
io.flutter.view.VsyncWaiter$DisplayListener: VsyncWaiter$DisplayListener(io.flutter.view.VsyncWaiter,android.hardware.display.DisplayManager)
io.flutter.embedding.android.FlutterActivity: java.util.List getDartEntrypointArgs()
io.flutter.plugins.urllauncher.Messages$PigeonCodec: Messages$PigeonCodec()
io.flutter.plugins.webviewflutter.FileChooserMode$Companion: FileChooserMode$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hasAction(io.flutter.view.AccessibilityBridge$Action)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: void setOnFrameConsumedListener(io.flutter.view.TextureRegistry$OnFrameConsumedListener)
io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice: io.flutter.plugins.imagepicker.ImagePickerDelegate$CameraDevice[] $values()
io.flutter.embedding.android.AndroidTouchProcessor: boolean onGenericMotionEvent(android.view.MotionEvent,android.content.Context)
io.flutter.embedding.android.FlutterView: void access$500(io.flutter.embedding.android.FlutterView)
io.flutter.view.AccessibilityBridge: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1: SharedPreferencesPlugin$clear$1(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,java.util.List,kotlin.coroutines.Continuation)
io.flutter.plugin.platform.PlatformViewsController: float getDisplayDensity()
io.flutter.embedding.android.FlutterImageView$SurfaceKind: FlutterImageView$SurfaceKind(java.lang.String,int)
androidx.fragment.app.Fragment: java.lang.Object getReenterTransition()
io.flutter.embedding.engine.dart.DartExecutor$1: void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)
io.flutter.embedding.engine.FlutterJNI: void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: ShimPluginRegistry$ShimRegistrarAggregate()
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder withNewEngine()
io.flutter.view.VsyncWaiter: io.flutter.embedding.engine.FlutterJNI access$100(io.flutter.view.VsyncWaiter)
io.flutter.plugin.platform.PlatformPlugin$1: void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void setSynchronousReturnValueForShouldOverrideUrlLoading(android.webkit.WebViewClient,boolean)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$23$lambda$22(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.fragment.app.Fragment: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState: ImagePickerPlugin$ActivityState(io.flutter.plugins.imagepicker.ImagePickerPlugin,io.flutter.plugins.imagepicker.ImagePickerDelegate,android.app.Activity)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener)
androidx.appcompat.widget.AppCompatTextView: int getLastBaselineToBottomHeight()
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder dartEntrypoint(java.lang.String)
io.flutter.plugins.imagepicker.ExifDataCopier: void setIfNotNull(androidx.exifinterface.media.ExifInterface,androidx.exifinterface.media.ExifInterface,java.lang.String)
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.BinaryMessenger messenger()
io.flutter.plugin.platform.PlatformViewWrapper: PlatformViewWrapper(android.content.Context,io.flutter.plugin.platform.PlatformViewRenderTarget)
io.flutter.plugin.editing.TextInputPlugin$1: void show()
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.core.widget.PopupWindowCompat$Api23Impl: boolean getOverlapAnchor(android.widget.PopupWindow)
io.flutter.embedding.android.FlutterImageView: void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.Build: Build()
io.flutter.plugin.common.MethodCall: java.lang.Object arguments()
io.flutter.embedding.android.FlutterView: boolean checkInputConnectionProxy(android.view.View)
androidx.recyclerview.widget.RecyclerView: void setRecycledViewPool(androidx.recyclerview.widget.RecyclerView$RecycledViewPool)
io.flutter.plugin.editing.TextInputPlugin$1: TextInputPlugin$1(io.flutter.plugin.editing.TextInputPlugin)
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: void setWebChromeClient(android.webkit.WebChromeClient)
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.FlutterJNI access$100(io.flutter.embedding.engine.loader.FlutterLoader)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$5$lambda$4(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder: FlutterActivity$NewEngineIntentBuilder(java.lang.Class)
org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: java.util.Set getRequestedWithHeaderOriginAllowList()
io.flutter.util.Preconditions: Preconditions()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void lambda$onPageStarted$1(android.webkit.WebView,java.lang.String)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void onNewIntent(android.content.Intent)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onGeolocationPermissionsHidePrompt(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,kotlin.jvm.functions.Function1)
androidx.appcompat.widget.SwitchCompat: void setTextOff(java.lang.CharSequence)
androidx.core.view.WindowInsetsCompat$Impl29: WindowInsetsCompat$Impl29(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl29)
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: io.flutter.embedding.android.FlutterView tryFindFlutterView()
androidx.preference.PreferenceScreen: PreferenceScreen(android.content.Context,android.util.AttributeSet)
io.flutter.plugin.editing.TextInputPlugin$1: void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getFinalClippingPaths()
androidx.fragment.app.FragmentActivity: void onStop()
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setBackForwardCacheEnabled(boolean)
androidx.fragment.app.Fragment: boolean getAllowEnterTransitionOverlap()
io.flutter.view.TextureRegistry$SurfaceProducer: void setSize(int,int)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void unspecifiedAction(int)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRect(int,int,int,int)
io.flutter.embedding.engine.renderer.FlutterRenderer: void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
io.flutter.plugin.platform.PlatformViewWrapper: void setTouchProcessor(io.flutter.embedding.android.AndroidTouchProcessor)
io.flutter.view.FlutterMain: FlutterMain()
io.flutter.embedding.engine.renderer.FlutterRenderer: android.os.Handler access$500(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineContentProviderPluginBinding: FlutterEngineConnectionRegistry$FlutterEngineContentProviderPluginBinding(android.content.ContentProvider)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void readyToDisplay(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,int,int,int,int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: java.lang.String getCachedEngineId()
io.flutter.plugin.platform.PlatformViewsController: long access$800(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.PlatformView,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest)
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest$Companion: void setUpMessageHandlers$lambda$3$lambda$2(io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: int getForceDark()
androidx.appcompat.widget.Toolbar: int getContentInsetStartWithNavigation()
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult$Builder: Messages$CacheRetrievalResult$Builder()
io.flutter.view.FlutterNativeView: io.flutter.view.FlutterView access$000(io.flutter.view.FlutterNativeView)
io.flutter.view.FlutterMain$Settings: java.lang.String getLogTag()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$1: void onFlutterUiDisplayed()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setEncodedStringList$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
io.flutter.plugin.common.EventChannel: EventChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String)
io.flutter.embedding.android.FlutterView: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener: void onUserLeaveHint()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean onActivityResult(int,int,android.content.Intent)
io.flutter.plugins.imagepicker.ImageResizer: ImageResizer(android.content.Context,io.flutter.plugins.imagepicker.ExifDataCopier)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean isAttached()
io.flutter.embedding.engine.plugins.activity.ActivityControlSurface: void detachFromActivityForConfigChanges()
io.flutter.view.AccessibilityBridge: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
io.flutter.plugins.webviewflutter.AndroidWebkitLibrary_gKt: java.util.List access$wrapResult(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI nativeSpawn(long,java.lang.String,java.lang.String,java.lang.String,java.util.List)
io.flutter.plugins.webviewflutter.PigeonApiCustomViewCallback: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathStart(float)
io.flutter.embedding.engine.FlutterJNI: void onRenderingStopped()
io.flutter.plugin.platform.VirtualDisplayController$1: void onResumed()
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$20$lambda$19(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onReceivedHttpError$lambda$3(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.systemchannels.LocalizationChannel: io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler access$000(io.flutter.embedding.engine.systemchannels.LocalizationChannel)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromBroadcastReceiver()
io.flutter.embedding.android.FlutterFragment: void onTrimMemory(int)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$12$lambda$11(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.platform.SingleViewPresentation: void onCreate(android.os.Bundle)
androidx.fragment.app.FragmentActivity: boolean onMenuItemSelected(int,android.view.MenuItem)
io.flutter.plugin.editing.TextInputPlugin: android.view.autofill.AutofillManager access$500(io.flutter.plugin.editing.TextInputPlugin)
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.loader.ResourceExtractor access$000(io.flutter.embedding.engine.loader.FlutterLoader,android.content.Context)
androidx.core.view.ViewCompat$Api21Impl: void setZ(android.view.View,float)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean handleVerticalMovement(boolean,boolean)
io.flutter.embedding.engine.FlutterEngineGroupCache: void remove(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: android.media.Image acquireLatestImage()
io.flutter.plugins.sharedpreferences.SharedPreferencesError: java.lang.String getMessage()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1: SharedPreferencesPlugin$getDouble$1(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,kotlin.jvm.internal.Ref$ObjectRef,kotlin.coroutines.Continuation)
io.flutter.app.FlutterPluginRegistry: void onWindowFocusChanged(boolean)
io.flutter.app.FlutterFragmentActivity: void onStart()
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler: void onFocus(int)
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)
androidx.core.view.ViewParentCompat$Api21Impl: void onNestedScrollAccepted(android.view.ViewParent,android.view.View,android.view.View,int)
io.flutter.embedding.engine.FlutterJNI: void notifyLowMemoryWarning()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityResumed(android.app.Activity)
io.flutter.plugins.webviewflutter.FileChooserMode$Companion: FileChooserMode$Companion()
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: void removeOnUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener)
androidx.fragment.app.FragmentActivity: android.view.View dispatchFragmentsOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)
io.flutter.plugins.webviewflutter.FlutterAssetManagerProxyApi: io.flutter.plugins.webviewflutter.FlutterAssetManager instance()
io.flutter.plugin.common.PluginRegistry$Registrar: android.app.Activity activity()
io.flutter.embedding.android.FlutterView$3: void onFlutterUiDisplayed()
io.flutter.view.AccessibilityBridge$4: void onTouchExplorationStateChanged(boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getPivotX()
org.chromium.support_lib_boundary.StaticsBoundaryInterface: android.net.Uri getSafeBrowsingPrivacyPolicyUrl()
io.flutter.embedding.android.FlutterFragmentActivity: void configureWindowForTransparency()
io.flutter.plugins.imagepicker.FileUtils: java.lang.String getImageName(android.content.Context,android.net.Uri)
io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager: java.lang.String getDeferredComponentInstallState(int,java.lang.String)
androidx.fragment.app.Fragment: boolean performOptionsItemSelected(android.view.MenuItem)
io.flutter.plugin.editing.TextInputPlugin$1: void setEditableSizeAndTransform(double,double,double[])
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl: FlutterNativeView$EngineLifecycleListenerImpl(io.flutter.view.FlutterNativeView)
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.EventChannel)
io.flutter.view.FlutterView: io.flutter.view.FlutterNativeView detach()
io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate: void asyncWaitForVsync(long)
io.flutter.embedding.android.FlutterTextureView: boolean isSurfaceAvailableForRendering()
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder handleDeeplinking(boolean)
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin$ListEncoder: java.lang.String encode(java.util.List)
io.flutter.plugin.platform.PlatformViewsController: void removeOverlaySurfaces()
io.flutter.plugin.common.BasicMessageChannel: BasicMessageChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MessageCodec)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void launchPickMediaFromGalleryIntent(io.flutter.plugins.imagepicker.Messages$GeneralOptions)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult$Builder: io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult$Builder setType(io.flutter.plugins.imagepicker.Messages$CacheRetrievalType)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: java.lang.String getCollectionItemColumnTitle(java.lang.Object)
androidx.appcompat.view.menu.ActionMenuItemView: void setTitle(java.lang.CharSequence)
org.chromium.support_lib_boundary.VisualStateCallbackBoundaryInterface: void onComplete(long)
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient: WebViewActivity$FlutterWebChromeClient(io.flutter.plugins.urllauncher.WebViewActivity)
io.flutter.embedding.android.KeyboardManager: java.util.Map getKeyboardState()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: FlutterFragment$CachedEngineFragmentBuilder(java.lang.String,io.flutter.embedding.android.FlutterFragment$1)
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder: io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder initialRoute(java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setAllowFileAccess(android.webkit.WebSettings,boolean)
io.flutter.plugin.platform.SingleViewWindowManager: void removeViewImmediate(android.view.View)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides[] values()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numTrims()
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: android.view.Surface getSurface()
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder withNewEngineInGroup(java.lang.String)
io.flutter.app.FlutterPluginRegistry: java.util.List access$1100(io.flutter.app.FlutterPluginRegistry)
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: void removeOnNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener)
io.flutter.embedding.engine.loader.FlutterLoader$1: void lambda$call$0()
androidx.core.view.WindowInsetsCompat$Impl21: WindowInsetsCompat$Impl21(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl21)
io.flutter.plugin.editing.ListenableEditingState: void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
io.flutter.plugin.platform.PlatformViewsController$1: void setDirection(int,int)
io.flutter.embedding.engine.FlutterEngineGroupCache: void clear()
io.flutter.embedding.engine.FlutterJNI: void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
androidx.activity.ComponentActivity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$dataStoreSetString$2: java.lang.Object invoke(androidx.datastore.preferences.core.MutablePreferences,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.ConsoleMessageLevel: io.flutter.plugins.webviewflutter.ConsoleMessageLevel valueOf(java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2$1: SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2$1(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1$2,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$25$lambda$24(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder: io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder backgroundMode(io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode)
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$7100(io.flutter.view.AccessibilityBridge,int)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)
androidx.core.view.ViewCompat$Api26Impl: void setKeyboardNavigationCluster(android.view.View,boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.lang.String getString(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.core.view.ViewCompat$Api28Impl: java.lang.CharSequence getAccessibilityPaneTitle(android.view.View)
io.flutter.embedding.android.FlutterFragment: java.util.List getDartEntrypointArgs()
androidx.datastore.preferences.protobuf.Writer$FieldOrder: androidx.datastore.preferences.protobuf.Writer$FieldOrder valueOf(java.lang.String)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityResumed(android.app.Activity)
io.flutter.embedding.android.FlutterFragmentActivity: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode getBackgroundMode()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler: void synchronizeToNativeViewHierarchy(boolean)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError: void setCode(java.lang.String)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi: java.lang.Boolean setInt(java.lang.String,java.lang.Long)
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: SingleViewPresentation$PresentationContext(android.content.Context,io.flutter.plugin.platform.WindowManagerHandler,android.content.Context)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$500(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: void removeWebMessageListener(java.lang.String)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void lambda$onReceivedHttpAuthRequest$17(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)
io.flutter.plugin.text.ProcessTextPlugin: void destroy()
io.flutter.view.FlutterView: void updateBackGestureProgress(android.window.BackEvent)
io.flutter.embedding.android.FlutterSurfaceView: FlutterSurfaceView(android.content.Context,android.util.AttributeSet)
io.flutter.FlutterInjector: io.flutter.embedding.engine.FlutterJNI$Factory getFlutterJNIFactory()
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: TextInputChannel$Configuration(boolean,boolean,boolean,boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization,io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,java.lang.Integer,java.lang.String,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill,java.lang.String[],io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration[])
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setAllowFileAccess(android.webkit.WebSettings,boolean)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.FlutterAssetManager getFlutterAssetManager()
io.flutter.view.AccessibilityBridge: AccessibilityBridge(android.view.View,io.flutter.embedding.engine.systemchannels.AccessibilityChannel,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate)
io.flutter.embedding.engine.dart.DartMessenger: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getKeys$prefs$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
io.flutter.view.AccessibilityBridge: boolean doesLayoutInDisplayCutoutModeRequireLeftInset()
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: kotlin.Unit lambda$onReceivedHttpAuthRequest$16(kotlin.Result)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding: android.app.Service getService()
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: void onStart(androidx.lifecycle.LifecycleOwner)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long yoinkParentIdFromParcel(android.view.accessibility.AccessibilityNodeInfo)
androidx.appcompat.widget.LinearLayoutCompat: int getVirtualChildCount()
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onPageStarted(android.webkit.WebViewClient,android.webkit.WebView,java.lang.String,kotlin.jvm.functions.Function1)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder dartLibraryUri(java.lang.String)
androidx.fragment.app.Fragment: androidx.activity.result.ActivityResultLauncher registerForActivityResult(androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultRegistry,androidx.activity.result.ActivityResultCallback)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void startRearDisplayPresentationSession(android.app.Activity,androidx.window.extensions.core.util.function.Consumer)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2: SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2(kotlinx.coroutines.flow.FlowCollector,androidx.datastore.preferences.core.Preferences$Key)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.CharSequence getValueLabelHint()
androidx.fragment.app.Fragment: int hashCode()
androidx.activity.ComponentActivity: void removeOnNewIntentListener(androidx.core.util.Consumer)
org.chromium.support_lib_boundary.TracingControllerBoundaryInterface: void start(int,java.util.Collection,int)
io.flutter.plugin.platform.PlatformViewsController: void lockInputConnection(io.flutter.plugin.platform.VirtualDisplayController)
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.view.TextureRegistry$ImageTextureEntry createImageTexture()
io.flutter.embedding.android.MotionEventTracker$MotionEventId: long getId()
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.plugin.editing.FlutterTextUtils: boolean isEmojiModifierBase(int)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void handleChooseMediaResult(int,android.content.Intent)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void resize(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.editing.TextInputPlugin$1: void hide()
io.flutter.view.FlutterView: void onStart()
io.flutter.app.FlutterActivityEvents: void onUserLeaveHint()
io.flutter.plugin.common.StandardMessageCodec: void writeValue(java.io.ByteArrayOutputStream,java.lang.Object)
androidx.fragment.app.FragmentActivity: void startActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int,android.os.Bundle)
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest)
io.flutter.embedding.engine.renderer.FlutterRenderer: void registerImageTexture(long,io.flutter.view.TextureRegistry$ImageConsumer)
io.flutter.plugins.urllauncher.WebViewActivity$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: java.lang.String getPathName()
io.flutter.embedding.engine.FlutterEngineCache: io.flutter.embedding.engine.FlutterEngine get(java.lang.String)
androidx.appcompat.widget.Toolbar: void setLogoDescription(int)
io.flutter.embedding.engine.FlutterJNI: void onEndFrame()
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: PigeonApiWebSettings(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.view.FlutterView: io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture()
io.flutter.plugins.webviewflutter.WebViewFlutterPlugin: void onDetachedFromActivityForConfigChanges()
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions$Builder: io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions$Builder setImageSelectionOptions(io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$DefaultFlutterAssets: java.lang.String getAssetFilePathByName(java.lang.String,java.lang.String)
io.flutter.app.FlutterPluginRegistry: java.util.List access$1000(io.flutter.app.FlutterPluginRegistry)
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: ImageReaderPlatformViewRenderTarget(io.flutter.view.TextureRegistry$ImageTextureEntry)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2$1: SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2$1(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1$invokeSuspend$$inlined$map$1$2,kotlin.coroutines.Continuation)
io.flutter.app.FlutterApplication: android.app.Activity getCurrentActivity()
io.flutter.embedding.engine.dart.DartExecutor: java.lang.String getIsolateServiceId()
io.flutter.plugins.webviewflutter.PigeonApiWebResourceErrorCompat: long errorCode(androidx.webkit.WebResourceErrorCompat)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi$-CC: void lambda$setUp$7(io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.fragment.app.Fragment: void onMultiWindowModeChanged(boolean)
androidx.appcompat.widget.SearchView: androidx.cursoradapter.widget.CursorAdapter getSuggestionsAdapter()
io.flutter.embedding.android.FlutterActivity: void switchLaunchThemeForNormalTheme()
io.flutter.view.AccessibilityBridge$Action: AccessibilityBridge$Action(java.lang.String,int,int)
io.flutter.plugins.sharedpreferences.StringListLookupResultType: int getRaw()
io.flutter.plugins.imagepicker.Messages$ImagePickerApi: void pickMedia(io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions,io.flutter.plugins.imagepicker.Messages$GeneralOptions,io.flutter.plugins.imagepicker.Messages$Result)
io.flutter.view.AccessibilityBridge: boolean isTouchExplorationEnabled()
io.flutter.embedding.android.FlutterFragment: void onUserLeaveHint()
io.flutter.plugins.webviewflutter.PigeonApiConsoleMessage: long lineNumber(android.webkit.ConsoleMessage)
io.flutter.plugin.platform.VirtualDisplayController$2$1: void run()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: boolean shouldHandleDeeplinking()
io.flutter.plugin.platform.VirtualDisplayController: void onFlutterViewAttached(android.view.View)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient$Companion: PigeonApiWebChromeClient$Companion()
io.flutter.view.FlutterView: void onAttachedToWindow()
io.flutter.embedding.android.FlutterSurfaceView: void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderControlSurface: void attachToContentProvider(android.content.ContentProvider,androidx.lifecycle.Lifecycle)
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getLogo()
io.flutter.plugins.webviewflutter.WebResourceRequestProxyApi: boolean hasGesture(android.webkit.WebResourceRequest)
io.flutter.embedding.android.FlutterTextureView$1: boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)
androidx.appcompat.widget.Toolbar: void setNavigationIcon(android.graphics.drawable.Drawable)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.view.AccessibilityBridge: void sendLatestAccessibilityFlagsToFlutter()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void setInt(java.lang.String,long,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.embedding.engine.systemchannels.RestorationChannel$1: RestorationChannel$1(io.flutter.embedding.engine.systemchannels.RestorationChannel,byte[])
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl pigeon_defaultConstructor()
io.flutter.embedding.android.KeyEmbedderResponder: void sendKeyEvent(io.flutter.embedding.android.KeyData,io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback)
io.flutter.plugins.webviewflutter.PigeonApiWebStorage$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.PigeonApiWebStorage,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.FlutterAssetManager: java.lang.String getAssetFilePathByName(java.lang.String)
io.flutter.embedding.android.FlutterActivity: android.window.OnBackInvokedCallback getOnBackInvokedCallback()
io.flutter.embedding.engine.dart.DartExecutor: void setIsolateServiceIdListener(io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener)
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind[] $values()
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onReceivedError(android.webkit.WebViewClient,android.webkit.WebView,long,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1)
io.flutter.embedding.engine.plugins.service.ServiceAware: void onAttachedToService(io.flutter.embedding.engine.plugins.service.ServicePluginBinding)
androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag valueOf(java.lang.String)
io.flutter.plugin.platform.PlatformPlugin: io.flutter.embedding.engine.systemchannels.PlatformChannel access$1400(io.flutter.plugin.platform.PlatformPlugin)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setSpeculativeLoadingStatus(int)
io.flutter.plugins.sharedpreferences.SharedPreferencesError: SharedPreferencesError(java.lang.String,java.lang.String,java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void setClipboardData(java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void next(int)
androidx.core.view.WindowInsetsCompat$Impl20: WindowInsetsCompat$Impl20(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl20)
androidx.appcompat.widget.AppCompatImageView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
io.flutter.plugins.sharedpreferences.SharedPreferencesPluginKt: androidx.datastore.core.DataStore access$getSharedPreferencesDataStore(android.content.Context)
androidx.core.widget.TextViewCompat$Api28Impl: android.text.PrecomputedText$Params getTextMetricsParams(android.widget.TextView)
io.flutter.embedding.engine.FlutterEngineGroup: io.flutter.embedding.engine.FlutterEngine createAndRunEngine(io.flutter.embedding.engine.FlutterEngineGroup$Options)
androidx.core.view.WindowInsetsCompat$Impl30: void copyRootViewBounds(android.view.View)
io.flutter.view.FlutterView: float getDevicePixelRatio()
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions$Builder: Messages$MediaSelectionOptions$Builder()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setEncodedStringList$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.view.AccessibilityBridge$LocaleStringAttribute: AccessibilityBridge$LocaleStringAttribute(io.flutter.view.AccessibilityBridge$1)
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: java.lang.String getFileName()
io.flutter.plugins.urllauncher.Messages$BrowserOptions$Builder: io.flutter.plugins.urllauncher.Messages$BrowserOptions build()
org.chromium.support_lib_boundary.DropDataContentProviderBoundaryInterface: android.os.ParcelFileDescriptor openFile(android.content.ContentProvider,android.net.Uri)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] $values()
org.chromium.support_lib_boundary.FeatureFlagHolderBoundaryInterface: java.lang.String[] getSupportedFeatures()
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.PluginRegistry$Registrar addUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener)
io.flutter.view.TextureRegistry$GLTextureConsumer: android.graphics.SurfaceTexture getSurfaceTexture()
io.flutter.app.FlutterActivityDelegate: void onPostResume()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebResourceErrorCompat getPigeonApiWebResourceErrorCompat()
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: android.graphics.SurfaceTexture surfaceTexture()
io.flutter.view.FlutterNativeView: io.flutter.app.FlutterPluginRegistry access$200(io.flutter.view.FlutterNativeView)
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions$Builder: io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions$Builder setMaxWidth(java.lang.Double)
io.flutter.plugins.imagepicker.FileUtils: java.lang.String getImageExtension(android.content.Context,android.net.Uri)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean doPerformContextMenuAction(int)
io.flutter.view.AccessibilityBridge: void onWindowNameChange(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: void addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener)
androidx.activity.ComponentActivity: void addMenuProvider(androidx.core.view.MenuProvider)
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterTexture(long,long,java.lang.ref.WeakReference)
io.flutter.view.FlutterCallbackInformation: FlutterCallbackInformation(java.lang.String,java.lang.String,java.lang.String)
androidx.fragment.app.FragmentActivity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
io.flutter.plugins.sharedpreferences.StringListResult: boolean equals(java.lang.Object)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void showSystemOverlays(java.util.List)
io.flutter.plugins.urllauncher.WebViewActivity$1: void onReceive(android.content.Context,android.content.Intent)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.embedding.android.FlutterFragmentActivity: void onUserLeaveHint()
io.flutter.plugin.platform.PlatformViewsController: void onTrimMemory(int)
androidx.preference.SwitchPreferenceCompat: SwitchPreferenceCompat(android.content.Context,android.util.AttributeSet)
androidx.fragment.app.Fragment: androidx.activity.result.ActivityResultLauncher registerForActivityResult(androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String)
androidx.appcompat.widget.SearchView: void setOnCloseListener(androidx.appcompat.widget.SearchView$OnCloseListener)
io.flutter.view.FlutterMain: java.lang.String getLookupKeyForAsset(java.lang.String)
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityPreCreated(android.app.Activity,android.os.Bundle)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void launchTakeImageWithCameraIntent()
io.flutter.plugins.urllauncher.UrlLauncher: void closeWebView()
androidx.appcompat.widget.SearchView: void setAppSearchData(android.os.Bundle)
io.flutter.embedding.android.FlutterView: void onAttachedToWindow()
androidx.core.content.ContextCompat$Api26Impl: android.content.ComponentName startForegroundService(android.content.Context,android.content.Intent)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getAll$1: SharedPreferencesPlugin$getAll$1(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,java.util.List,kotlin.coroutines.Continuation)
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: boolean access$002(io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget,boolean)
io.flutter.embedding.android.FlutterView: void autofill(android.util.SparseArray)
androidx.appcompat.view.menu.ListMenuItemView: void setTitle(java.lang.CharSequence)
io.flutter.plugin.common.BasicMessageChannel: void resizeChannelBuffer(io.flutter.plugin.common.BinaryMessenger,java.lang.String,int)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onDestroyView()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: android.content.res.ColorStateList getSupportBackgroundTintList()
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String)
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry: void release()
io.flutter.embedding.engine.dart.DartExecutor: java.lang.String access$002(io.flutter.embedding.engine.dart.DartExecutor,java.lang.String)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: void writeValue(java.io.ByteArrayOutputStream,java.lang.Object)
io.flutter.embedding.android.FlutterActivity: void detachFromFlutterEngine()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onPrepare(android.view.WindowInsetsAnimation)
androidx.core.widget.NestedScrollView: void setSmoothScrollingEnabled(boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler: void resize(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewBufferResized)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setTappableElementInsets(androidx.core.graphics.Insets)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$2300(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void markDirty()
io.flutter.plugins.webviewflutter.ConsoleMessageProxyApi: long lineNumber(android.webkit.ConsoleMessage)
androidx.preference.UnPressableLinearLayout: UnPressableLinearLayout(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.android.FlutterSurfaceView: void pause()
androidx.recyclerview.widget.RecyclerView: void setNestedScrollingEnabled(boolean)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)
io.flutter.embedding.android.KeyData$DeviceType: KeyData$DeviceType(java.lang.String,int,long)
io.flutter.plugins.imagepicker.ImagePickerUtils: int getMaxItems()
androidx.core.widget.ImageViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getImageTintMode(android.widget.ImageView)
io.flutter.plugin.platform.PlatformViewsController: void attach(android.content.Context,io.flutter.view.TextureRegistry,io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.app.FlutterActivity: void onDestroy()
io.flutter.plugins.webviewflutter.PigeonApiWebResourceResponse: long statusCode(android.webkit.WebResourceResponse)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$4000(io.flutter.view.AccessibilityBridge$SemanticsNode)
androidx.appcompat.widget.ViewStubCompat: int getLayoutResource()
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode access$2700(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: ImagePickerPlugin$LifeCycleObserver(io.flutter.plugins.imagepicker.ImagePickerPlugin,android.app.Activity)
io.flutter.view.FlutterView: void onStop()
androidx.core.app.ActivityCompat$Api21Impl: void finishAfterTransition(android.app.Activity)
androidx.activity.OnBackPressedDispatcher$Api33Impl: android.window.OnBackInvokedCallback createOnBackInvokedCallback(kotlin.jvm.functions.Function0)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void draw(android.graphics.Canvas)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener)
io.flutter.embedding.engine.dart.DartMessenger: DartMessenger(io.flutter.embedding.engine.FlutterJNI,io.flutter.embedding.engine.dart.DartMessenger$TaskQueueFactory)
androidx.core.view.WindowInsetsCompat$Impl28: boolean equals(java.lang.Object)
io.flutter.embedding.android.TransparencyMode: TransparencyMode(java.lang.String,int)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void attachToService(android.app.Service,androidx.lifecycle.Lifecycle,boolean)
io.flutter.embedding.engine.renderer.FlutterRenderer$1: void onFlutterUiNoLongerDisplayed()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: int getStrokeColor()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numImageReaders()
io.flutter.plugins.imagepicker.ImagePickerCache: void saveResult(java.util.ArrayList,java.lang.String,java.lang.String)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: void addInstance(java.lang.Object,long)
io.flutter.embedding.android.FlutterFragment: boolean access$000(io.flutter.embedding.android.FlutterFragment,java.lang.String)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void lambda$onReceivedError$7(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError)
io.flutter.plugin.editing.TextInputPlugin: void autofill(android.util.SparseArray)
io.flutter.view.FlutterView: void addFirstFrameListener(io.flutter.view.FlutterView$FirstFrameListener)
io.flutter.plugin.platform.PlatformPlugin: boolean access$1200(io.flutter.plugin.platform.PlatformPlugin)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener$Companion: PigeonApiDownloadListener$Companion()
io.flutter.plugin.editing.FlutterTextUtils: boolean isVariationSelector(int)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError: void setMessage(java.lang.String)
io.flutter.embedding.engine.dart.DartMessenger$DefaultTaskQueueFactory: io.flutter.embedding.engine.dart.DartMessenger$DartMessengerTaskQueue makeBackgroundTaskQueue(io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions)
androidx.fragment.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)
io.flutter.app.FlutterActivityDelegate: void onResume()
androidx.appcompat.widget.Toolbar: void setLogoDescription(java.lang.CharSequence)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat buildCollectionItemInfoCompat(boolean,int,int,int,int,boolean,java.lang.String,java.lang.String)
io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin: FlutterAndroidLifecyclePlugin()
io.flutter.plugins.webviewflutter.PigeonApiFileChooserParams: java.lang.String filenameHint(android.webkit.WebChromeClient$FileChooserParams)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void setDouble(java.lang.String,double,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.activity.ComponentActivity: void initializeViewTreeOwners()
io.flutter.plugins.webviewflutter.WebViewFlutterPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError: io.flutter.plugins.imagepicker.Messages$CacheRetrievalError fromList(java.util.ArrayList)
io.flutter.plugin.platform.PlatformViewsController: void lambda$onEndFrame$3()
io.flutter.embedding.engine.renderer.FlutterRenderer: java.util.List access$100(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.plugins.webviewflutter.PigeonApiWebView: java.lang.String getTitle(android.webkit.WebView)
androidx.appcompat.widget.ActionBarContainer: android.view.View getTabContainer()
io.flutter.plugins.imagepicker.FileUtils: android.database.Cursor queryImageName(android.content.Context,android.net.Uri)
io.flutter.embedding.android.FlutterView$4: void accept(java.lang.Object)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: void setUp()
io.flutter.plugins.imagepicker.ImagePickerPlugin: void pickVideos(io.flutter.plugins.imagepicker.Messages$SourceSpecification,io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions,io.flutter.plugins.imagepicker.Messages$GeneralOptions,io.flutter.plugins.imagepicker.Messages$Result)
io.flutter.embedding.android.FlutterTextureView: void setRenderSurface(android.view.Surface)
androidx.appcompat.widget.ActionMenuView: void setOnMenuItemClickListener(androidx.appcompat.widget.ActionMenuView$OnMenuItemClickListener)
io.flutter.plugins.webviewflutter.CustomViewCallbackProxyApi: CustomViewCallbackProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.plugin.platform.PlatformPlugin: void restoreSystemChromeSystemUIOverlays()
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getTappableElementInsets()
androidx.fragment.app.FragmentActivity: void supportStartPostponedEnterTransition()
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode access$2702(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode)
androidx.activity.OnBackPressedCallback: void remove()
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void share(java.lang.String)
io.flutter.view.FlutterView: void setInitialRoute(java.lang.String)
io.flutter.app.FlutterActivity: void onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: io.flutter.plugins.sharedpreferences.SharedPreferencesListEncoder access$getListEncoder$p(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin)
io.flutter.view.FlutterNativeView: void enableBufferingIncomingMessages()
androidx.appcompat.widget.FitWindowsFrameLayout: FitWindowsFrameLayout(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.renderer.FlutterRenderer$1: void onFlutterUiDisplayed()
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi: void setSynchronousReturnValueForOnJsConfirm(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,boolean)
io.flutter.plugins.webviewflutter.PigeonApiWebViewPoint: PigeonApiWebViewPoint(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.embedding.engine.dart.DartMessenger: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onJsAlert$lambda$9(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.view.TextureRegistry$SurfaceProducer$Callback access$200(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
io.flutter.view.FlutterView: void cancelBackGesture()
io.flutter.embedding.engine.renderer.FlutterRenderer: void unregisterTexture(long)
org.chromium.support_lib_boundary.ServiceWorkerClientBoundaryInterface: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebResourceRequest)
androidx.fragment.app.Fragment: void performResume()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1$1: java.lang.Object invoke(androidx.datastore.preferences.core.MutablePreferences,kotlin.coroutines.Continuation)
androidx.core.app.ActivityCompat$Api21Impl: void startPostponedEnterTransition(android.app.Activity)
io.flutter.plugins.imagepicker.ImagePickerDelegate$1: ImagePickerDelegate$1(android.app.Activity)
io.flutter.embedding.android.KeyEmbedderResponder: io.flutter.embedding.android.KeyData$Type getEventType(android.view.KeyEvent)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int)
io.flutter.app.FlutterFragmentActivity: void onUserLeaveHint()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onBackPressed()
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void aWindowIsFocused()
io.flutter.plugin.common.MessageCodec: java.nio.ByteBuffer encodeMessage(java.lang.Object)
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions: int hashCode()
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$6$lambda$5(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void doUpdateVisitedHistory(android.webkit.WebViewClient,android.webkit.WebView,java.lang.String,boolean,kotlin.jvm.functions.Function1)
io.flutter.plugins.imagepicker.ImagePickerDelegate$PendingCallState: ImagePickerDelegate$PendingCallState(io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions,io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions,io.flutter.plugins.imagepicker.Messages$Result)
io.flutter.plugin.platform.PlatformViewRenderTarget: long getId()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: android.graphics.Path getPath()
io.flutter.embedding.engine.FlutterJNI: void nativeDeferredComponentInstallFailure(int,java.lang.String,boolean)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader: boolean canPrune()
androidx.appcompat.widget.ActionBarOverlayLayout: java.lang.CharSequence getTitle()
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: WebViewProxyApi$WebViewPlatformView(io.flutter.plugins.webviewflutter.WebViewProxyApi)
io.flutter.plugin.editing.TextInputPlugin: boolean needsAutofill()
org.chromium.support_lib_boundary.WebMessageListenerBoundaryInterface: void onPostMessage(android.webkit.WebView,java.lang.reflect.InvocationHandler,android.net.Uri,boolean,java.lang.reflect.InvocationHandler)
io.flutter.app.FlutterPluginRegistry: void attach(io.flutter.view.FlutterView,android.app.Activity)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.CharSequence access$3300(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.embedding.engine.FlutterJNI: java.lang.String getObservatoryUri()
io.flutter.embedding.engine.systemchannels.RestorationChannel: void setRestorationData(byte[])
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState,android.view.View$OnFocusChangeListener,boolean)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setJavaScriptEnabled(android.webkit.WebSettings,boolean)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient$Companion: PigeonApiWebChromeClient$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
io.flutter.view.AccessibilityBridge$1: void announce(java.lang.String)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$7(kotlin.Result)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedWidthMajor()
androidx.activity.ComponentActivity: void addOnMultiWindowModeChangedListener(androidx.core.util.Consumer)
androidx.core.content.FileProvider: java.lang.String getType(android.net.Uri)
androidx.core.view.ViewCompat$Api28Impl: boolean isScreenReaderFocusable(android.view.View)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onReceivedRequestError$lambda$4(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
androidx.fragment.app.FragmentActivity: void supportPostponeEnterTransition()
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: PlatformChannel$Brightness(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] $values()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest: PlatformViewsChannel$PlatformViewResizeRequest(int,double,double)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] $values()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onShowFileChooser$lambda$2(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.FlutterEngineGroup$Options: io.flutter.embedding.engine.FlutterEngineGroup$Options setDartEntrypoint(io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromContentProvider()
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.view.FlutterNativeView: io.flutter.plugin.common.BinaryMessenger$TaskQueue makeBackgroundTaskQueue(io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions)
io.flutter.embedding.android.FlutterActivity: void cancelBackGesture()
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface(io.flutter.plugin.platform.PlatformOverlayView)
io.flutter.embedding.engine.loader.FlutterApplicationInfo: FlutterApplicationInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setCacheMode(int)
androidx.appcompat.widget.AppCompatImageButton: android.content.res.ColorStateList getSupportImageTintList()
androidx.core.view.WindowInsetsCompat$Impl: void copyRootViewBounds(android.view.View)
org.chromium.support_lib_boundary.WebMessageCallbackBoundaryInterface: void onMessage(java.lang.reflect.InvocationHandler,java.lang.reflect.InvocationHandler)
io.flutter.plugin.common.PluginRegistry$Registrar: android.content.Context activeContext()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1: SharedPreferencesPlugin$getDouble$1$invokeSuspend$$inlined$map$1(kotlinx.coroutines.flow.Flow,androidx.datastore.preferences.core.Preferences$Key,io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin)
io.flutter.plugin.editing.FlutterTextUtils: int getOffsetBefore(java.lang.CharSequence,int)
io.flutter.plugins.urllauncher.UrlLauncher: UrlLauncher(android.content.Context,io.flutter.plugins.urllauncher.UrlLauncher$IntentResolver)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onReceivedError$lambda$6(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder: android.content.Intent build(android.content.Context)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage queueImage(android.media.Image)
io.flutter.view.AccessibilityBridge$TextDirection: AccessibilityBridge$TextDirection(java.lang.String,int)
io.flutter.plugins.webviewflutter.PigeonApiWebStorage: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void remove(java.util.Set)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)
io.flutter.plugins.urllauncher.Messages$BrowserOptions: Messages$BrowserOptions()
io.flutter.app.FlutterActivityDelegate: io.flutter.view.FlutterView getFlutterView()
io.flutter.plugins.imagepicker.ImagePickerDelegate: java.lang.String getResizedImagePath(java.lang.String,io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions)
io.flutter.embedding.engine.FlutterEngineGroupCache: void put(java.lang.String,io.flutter.embedding.engine.FlutterEngineGroup)
io.flutter.embedding.android.FlutterFragmentActivity: android.widget.FrameLayout provideRootLayout(android.content.Context)
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.lang.Object access$readAllKeys(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler$Companion: void setUpMessageHandlers$lambda$5$lambda$4(io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.fragment.app.Fragment: void performActivityCreated(android.os.Bundle)
androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.graphics.Insets getInsets(int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onTrimMemory(int)
io.flutter.plugins.imagepicker.Messages$MediaSelectionOptions: void setImageSelectionOptions(io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions)
io.flutter.embedding.engine.renderer.FlutterRenderer: void surfaceChanged(int,int)
io.flutter.embedding.engine.plugins.activity.ActivityControlSurface: boolean onActivityResult(int,int,android.content.Intent)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
androidx.appcompat.widget.SwitchCompat: int getThumbTextPadding()
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides valueOf(java.lang.String)
io.flutter.plugins.urllauncher.Messages$WebViewOptions$Builder: io.flutter.plugins.urllauncher.Messages$WebViewOptions build()
androidx.recyclerview.widget.RecyclerView: void setViewCacheExtension(androidx.recyclerview.widget.RecyclerView$ViewCacheExtension)
io.flutter.plugins.imagepicker.ImagePickerPlugin: io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult retrieveLostResults()
org.chromium.support_lib_boundary.WebMessageBoundaryInterface: java.lang.reflect.InvocationHandler[] getPorts()
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel$1: DeferredComponentChannel$1(io.flutter.embedding.engine.systemchannels.DeferredComponentChannel)
io.flutter.view.FlutterView: void updateViewportMetrics()
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.plugin.common.PluginRegistry$Registrar publish(java.lang.Object)
io.flutter.plugins.webviewflutter.WebResourceErrorCompatProxyApi: WebResourceErrorCompatProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: void send()
io.flutter.embedding.engine.FlutterEngine: FlutterEngine(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler)
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi$-CC: void setUp(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugins.urllauncher.Messages$UrlLauncherApi)
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: void onActivityStarted(android.app.Activity)
io.flutter.FlutterInjector$Builder$NamedThreadFactory: FlutterInjector$Builder$NamedThreadFactory(io.flutter.FlutterInjector$Builder,io.flutter.FlutterInjector$1)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder initialRoute(java.lang.String)
io.flutter.embedding.android.FlutterView: void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: int getForceDarkBehavior()
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type[] values()
io.flutter.plugins.webviewflutter.PigeonApiView: void scrollBy(android.view.View,long,long)
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions$Builder: io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions build()
io.flutter.embedding.engine.FlutterJNI: void onFirstFrame()
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2102(io.flutter.view.AccessibilityBridge$SemanticsNode,int)
androidx.activity.ComponentActivity: androidx.activity.result.ActivityResultLauncher registerForActivityResult(androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultRegistry,androidx.activity.result.ActivityResultCallback)
io.flutter.plugins.webviewflutter.PermissionRequestProxyApi: void deny(android.webkit.PermissionRequest)
androidx.core.view.VelocityTrackerCompat$Api34Impl: float getAxisVelocity(android.view.VelocityTracker,int,int)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1: SharedPreferencesPlugin$setDouble$1(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,double,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.plugins.PluginRegistry: io.flutter.embedding.engine.plugins.FlutterPlugin get(java.lang.Class)
io.flutter.plugins.webviewflutter.DownloadListenerProxyApi$DownloadListenerImpl: void lambda$onDownloadStart$1(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)
io.flutter.embedding.engine.systemchannels.MouseCursorChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.android.FlutterFragment: void onBackPressed()
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions$Companion: SharedPreferencesPigeonOptions$Companion()
io.flutter.embedding.engine.systemchannels.KeyEventChannel: void lambda$createReplyHandler$0(io.flutter.embedding.engine.systemchannels.KeyEventChannel$EventResponseHandler,java.lang.Object)
androidx.fragment.app.Fragment: int getEnterAnim()
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebSettings getPigeonApiWebSettings()
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setThreshold(int)
androidx.core.view.VelocityTrackerCompat$Api34Impl: boolean isAxisSupported(android.view.VelocityTracker,int)
io.flutter.plugins.sharedpreferences.MessagesAsync_gKt: java.util.List wrapError(java.lang.Throwable)
org.chromium.support_lib_boundary.WebMessagePortBoundaryInterface: void close()
androidx.appcompat.widget.ActionBarOverlayLayout: void setHideOnContentScrollEnabled(boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1: java.lang.Object invokeSuspend(java.lang.Object)
androidx.browser.customtabs.CustomTabsIntent$Api24Impl: java.lang.String getDefaultLocale()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.lang.Object access$getPrefs(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,java.util.List,kotlin.coroutines.Continuation)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1: SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1(kotlinx.coroutines.flow.Flow,androidx.datastore.preferences.core.Preferences$Key)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean nullableHasAncestor(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate)
io.flutter.app.FlutterActivity: io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String)
androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.CursorAnchorInfo getCursorAnchorInfo()
io.flutter.embedding.android.FlutterView$4: void accept(androidx.window.layout.WindowLayoutInfo)
io.flutter.embedding.android.FlutterActivity: void onCreate(android.os.Bundle)
io.flutter.plugin.common.PluginRegistry$Registrar: java.lang.String lookupKeyForAsset(java.lang.String,java.lang.String)
io.flutter.Log: void i(java.lang.String,java.lang.String)
io.flutter.Build$API_LEVELS: Build$API_LEVELS()
io.flutter.embedding.engine.loader.FlutterLoader: FlutterLoader()
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: io.flutter.plugins.sharedpreferences.StringListResult getStringList(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
org.chromium.support_lib_boundary.WebViewClientBoundaryInterface: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)
androidx.appcompat.widget.SwitchCompat: void setShowText(boolean)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding: void onMoveToForeground()
androidx.appcompat.widget.ActionBarContextView: void setVisibility(int)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: void setReturnValueForOnJsPrompt(boolean)
org.chromium.support_lib_boundary.WebMessagePayloadBoundaryInterface: int getType()
io.flutter.plugin.common.FlutterException: FlutterException(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.systemchannels.BackGestureChannel: void startBackGesture(android.window.BackEvent)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: PlatformViewsChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.embedding.engine.systemchannels.BackGestureChannel: void updateBackGestureProgress(android.window.BackEvent)
androidx.fragment.app.Fragment: void performAttach()
io.flutter.plugins.imagepicker.ImagePickerCache$CacheType: io.flutter.plugins.imagepicker.ImagePickerCache$CacheType[] values()
io.flutter.plugins.urllauncher.UrlLauncher: boolean openCustomTab(android.content.Context,android.net.Uri,android.os.Bundle,io.flutter.plugins.urllauncher.Messages$BrowserOptions)
io.flutter.view.AccessibilityViewEmbedder: java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord)
io.flutter.app.FlutterPluginRegistry: io.flutter.plugin.platform.PlatformViewsController getPlatformViewsController()
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: java.lang.String lookupKeyForAsset(java.lang.String)
androidx.appcompat.widget.AppCompatImageView: android.content.res.ColorStateList getSupportBackgroundTintList()
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.engine.FlutterEngine getFlutterEngine()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: FlutterMutatorsStack$FlutterMutator(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Rect,float[])
androidx.appcompat.widget.SearchView: SearchView(android.content.Context,android.util.AttributeSet,int)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiView getPigeonApiView()
io.flutter.plugins.imagepicker.ImagePickerDelegate: void lambda$onActivityResult$4(int,android.content.Intent)
androidx.fragment.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions: io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions fromList(java.util.ArrayList)
androidx.datastore.preferences.protobuf.JavaType: androidx.datastore.preferences.protobuf.JavaType[] values()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder shouldAutomaticallyHandleOnBackPressed(boolean)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessage(java.lang.String,java.nio.ByteBuffer,int,long)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1: SharedPreferencesPlugin$getString$1(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,kotlin.jvm.internal.Ref$ObjectRef,kotlin.coroutines.Continuation)
androidx.appcompat.widget.Toolbar: android.widget.TextView getSubtitleTextView()
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputConnection getLastInputConnection()
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest$Companion: PigeonApiPermissionRequest$Companion()
io.flutter.embedding.android.FlutterActivity: boolean shouldAttachEngineToActivity()
androidx.core.app.AppOpsManagerCompat$Api23Impl: java.lang.Object getSystemService(android.content.Context,java.lang.Class)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: kotlin.Unit lambda$onHideCustomView$2(kotlin.Result)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: java.lang.String getCachedEngineGroupId()
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1: BasicMessageChannel$IncomingMessageHandler$1(io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$6(kotlin.Result)
androidx.appcompat.widget.AppCompatTextView: void setTextFuture(java.util.concurrent.Future)
androidx.appcompat.widget.SearchView$SearchAutoComplete: SearchView$SearchAutoComplete(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.dart.DartExecutor: java.lang.String access$000(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.view.FlutterView: boolean onTouchEvent(android.view.MotionEvent)
io.flutter.app.FlutterActivityDelegate: io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String)
io.flutter.app.FlutterPluginRegistry: io.flutter.view.FlutterNativeView access$200(io.flutter.app.FlutterPluginRegistry)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler: void createForPlatformViewLayer(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest)
io.flutter.embedding.engine.loader.FlutterLoader: boolean automaticallyRegisterPlugins()
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: AccessibilityChannel(io.flutter.plugin.common.BasicMessageChannel,io.flutter.embedding.engine.FlutterJNI)
androidx.appcompat.widget.AppCompatTextView: android.view.textclassifier.TextClassifier getTextClassifier()
io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder: io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder destroyEngineWithActivity(boolean)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType fromValue(java.lang.String)
io.flutter.view.FlutterView: void autofill(android.util.SparseArray)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$3500(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.embedding.engine.FlutterEngineGroup$Options: boolean getWaitForRestorationData()
io.flutter.app.FlutterActivityDelegate: void addLaunchView()
androidx.core.widget.NestedScrollView: int getNestedScrollAxes()
androidx.activity.ComponentActivity: void onSaveInstanceState(android.os.Bundle)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager: void _set_clearFinalizedWeakReferencesInterval_$lambda$0(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager)
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: Messages$ImageSelectionOptions()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointVariantSelector(int)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: void setOnTrimMemoryListener(io.flutter.view.TextureRegistry$OnTrimMemoryListener)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$5900(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action)
io.flutter.plugins.webviewflutter.WebViewFlutterAndroidExternalApi$-CC: android.webkit.WebView getWebView(io.flutter.embedding.engine.FlutterEngine,long)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String access$3002(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String)
org.chromium.support_lib_boundary.ProfileBoundaryInterface: java.lang.String getName()
io.flutter.plugins.webviewflutter.PigeonApiWebView: boolean canGoBack(android.webkit.WebView)
io.flutter.plugin.editing.TextEditingDelta: int getNewSelectionEnd()
io.flutter.plugin.platform.VirtualDisplayController: void dispatchTouchEvent(android.view.MotionEvent)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void setSynchronousReturnValueForOnJsPrompt(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,boolean)
io.flutter.embedding.android.FlutterView: void access$000(io.flutter.embedding.android.FlutterView,boolean,boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values()
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: java.lang.String getString(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.app.FlutterPluginRegistry: boolean onNewIntent(android.content.Intent)
org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertSafeBrowsingResponse(java.lang.Object)
io.flutter.plugins.webviewflutter.CookieManagerProxyApi: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
androidx.appcompat.widget.AppCompatImageView: void setSupportImageTintMode(android.graphics.PorterDuff$Mode)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: AndroidWebkitLibraryPigeonProxyApiBaseCodec(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
androidx.core.view.ViewCompat$Api29Impl: void setSystemGestureExclusionRects(android.view.View,java.util.List)
androidx.appcompat.widget.SwitchCompat: void setThumbResource(int)
io.flutter.embedding.android.KeyEmbedderResponder: void updatePressingState(java.lang.Long,java.lang.Long)
io.flutter.plugin.common.MethodChannel: void invokeMethod(java.lang.String,java.lang.Object,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.platform.PlatformViewFactory: io.flutter.plugin.platform.PlatformView create(android.content.Context,int,java.lang.Object)
io.flutter.view.AccessibilityBridge: void sendWindowContentChangeEvent(int)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: void onHideCustomView()
io.flutter.embedding.android.FlutterFragment: void onPause()
io.flutter.view.VsyncWaiter$FrameCallback: long access$302(io.flutter.view.VsyncWaiter$FrameCallback,long)
io.flutter.plugins.imagepicker.Messages$SourceSpecification$Builder: Messages$SourceSpecification$Builder()
io.flutter.plugins.urllauncher.Messages$BrowserOptions$Builder: io.flutter.plugins.urllauncher.Messages$BrowserOptions$Builder setShowTitle(java.lang.Boolean)
io.flutter.plugins.imagepicker.ImagePickerCache: void savePendingCameraMediaUriPath(android.net.Uri)
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] values()
io.flutter.view.VsyncWaiter: io.flutter.view.VsyncWaiter$FrameCallback access$200(io.flutter.view.VsyncWaiter)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: void onFlutterUiNoLongerDisplayed()
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: androidx.core.view.accessibility.AccessibilityNodeInfoCompat getParent(android.view.accessibility.AccessibilityNodeInfo,int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float getAlpha()
io.flutter.plugin.common.MethodChannel: io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.MethodChannel)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)
io.flutter.embedding.android.FlutterTextureView: void connectSurfaceToRenderer()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void show()
androidx.fragment.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)
io.flutter.embedding.engine.plugins.service.ServiceControlSurface: void detachFromService()
io.flutter.embedding.engine.systemchannels.BackGestureChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.FlutterJNI: void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: boolean isAudioMuted()
io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder: io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder dartEntrypointArgs(java.util.List)
androidx.core.widget.NestedScrollView: int getScrollRange()
androidx.versionedparcelable.CustomVersionedParcelable: CustomVersionedParcelable()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: android.graphics.Matrix getLocalMatrix()
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: io.flutter.embedding.android.FlutterFragment build()
androidx.appcompat.widget.LinearLayoutCompat: void setHorizontalGravity(int)
io.flutter.plugin.common.MethodChannel$IncomingResultHandler: MethodChannel$IncomingResultHandler(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.util.List getKeys(java.util.List,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler: void setDirection(int,int)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceError: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.app.FlutterActivity: void onUserLeaveHint()
io.flutter.embedding.android.FlutterSurfaceView: void connectSurfaceToRenderer()
io.flutter.plugins.urllauncher.Messages: Messages()
androidx.appcompat.view.menu.ActionMenuItemView: void setChecked(boolean)
io.flutter.view.TextureRegistry$SurfaceProducer$Callback: void onSurfaceDestroyed()
androidx.core.view.WindowInsetsCompat$BuilderImpl30: WindowInsetsCompat$BuilderImpl30()
io.flutter.plugins.webviewflutter.ResultCompat$Companion: ResultCompat$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.browser.browseractions.BrowserActionsFallbackMenuView: BrowserActionsFallbackMenuView(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.android.FlutterView$3: FlutterView$3(io.flutter.embedding.android.FlutterView)
androidx.fragment.app.Fragment: void performOptionsMenuClosed(android.view.Menu)
io.flutter.plugin.platform.PlatformPlugin: void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType)
io.flutter.embedding.android.FlutterFragment: boolean shouldAttachEngineToActivity()
androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int)
androidx.appcompat.widget.AppCompatTextView: int getFirstBaselineToTopHeight()
io.flutter.view.FlutterView$1: FlutterView$1(io.flutter.view.FlutterView)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] values()
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setIconTintMode(android.view.MenuItem,android.graphics.PorterDuff$Mode)
io.flutter.plugins.webviewflutter.ResultCompat$Companion: kotlin.jvm.functions.Function1 asCompatCallback(kotlin.jvm.functions.Function1)
io.flutter.embedding.engine.dart.DartExecutor: DartExecutor(io.flutter.embedding.engine.FlutterJNI,android.content.res.AssetManager)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalType: io.flutter.plugins.imagepicker.Messages$CacheRetrievalType[] values()
androidx.fragment.app.Fragment: java.lang.Object requireHost()
io.flutter.plugin.platform.SingleViewWindowManager: void addCrossWindowBlurEnabledListener(java.util.concurrent.Executor,java.util.function.Consumer)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean setComposingRegion(int,int)
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: android.view.Surface getSurface()
io.flutter.util.HandlerCompat: android.os.Handler createAsyncHandler(android.os.Looper)
io.flutter.plugins.imagepicker.Messages$GeneralOptions$Builder: Messages$GeneralOptions$Builder()
io.flutter.plugin.platform.PlatformView: void onFlutterViewAttached(android.view.View)
androidx.appcompat.widget.SearchView: void setOnSuggestionListener(androidx.appcompat.widget.SearchView$OnSuggestionListener)
androidx.appcompat.widget.AppCompatImageButton: void setImageURI(android.net.Uri)
io.flutter.embedding.android.KeyEmbedderResponder: void lambda$sendKeyEvent$2(io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback,java.nio.ByteBuffer)
io.flutter.plugins.webviewflutter.HttpAuthHandlerProxyApi: boolean useHttpAuthUsernamePassword(android.webkit.HttpAuthHandler)
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: android.webkit.WebChromeClient getWebChromeClient()
io.flutter.plugins.webviewflutter.WebViewProxyApi: android.webkit.WebSettings settings(android.webkit.WebView)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemGestureInsets()
io.flutter.embedding.engine.FlutterJNI: void nativeCleanupMessageData(long)
io.flutter.plugins.sharedpreferences.MessagesAsyncPigeonCodec: void writeValue(java.io.ByteArrayOutputStream,java.lang.Object)
androidx.preference.DialogPreference: DialogPreference(android.content.Context,android.util.AttributeSet)
io.flutter.view.AccessibilityBridge$2: void onAccessibilityStateChanged(boolean)
androidx.core.widget.TextViewCompat$Api23Impl: void setHyphenationFrequency(android.widget.TextView,int)
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: io.flutter.plugin.common.BinaryMessenger$TaskQueue makeBackgroundTaskQueue(io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions)
io.flutter.plugins.sharedpreferences.MessagesAsync_gKt: java.util.List wrapResult(java.lang.Object)
io.flutter.embedding.android.KeyboardMap$1: KeyboardMap$1()
io.flutter.view.AccessibilityBridge: boolean performCursorMoveAction(io.flutter.view.AccessibilityBridge$SemanticsNode,int,android.os.Bundle,boolean)
androidx.preference.internal.PreferenceImageView: int getMaxHeight()
io.flutter.embedding.engine.systemchannels.TextInputChannel: void commitContent(int,java.util.Map)
androidx.appcompat.widget.AppCompatTextView: void setTextClassifier(android.view.textclassifier.TextClassifier)
androidx.fragment.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)
io.flutter.plugin.common.ErrorLogResult: void success(java.lang.Object)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind[] values()
io.flutter.plugin.platform.PlatformPlugin$PlatformPluginDelegate: boolean popSystemNavigator()
androidx.fragment.app.Fragment: androidx.core.app.SharedElementCallback getExitTransitionCallback()
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager$Companion: PigeonApiFlutterAssetManager$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode getOrCreateSemanticsNode(int)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebSettings getPigeonApiWebSettings()
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.FlutterImageView)
io.flutter.embedding.android.FlutterView: int guessBottomKeyboardInset(android.view.WindowInsets)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onShowFileChooser(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,android.webkit.WebView,android.webkit.WebChromeClient$FileChooserParams,kotlin.jvm.functions.Function1)
io.flutter.embedding.engine.FlutterJNI: void nativeOnVsync(long,long,long)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void lambda$onReceivedHttpError$5(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$302(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
androidx.appcompat.widget.ActionMenuView: void setOverflowIcon(android.graphics.drawable.Drawable)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStarted(android.app.Activity)
io.flutter.plugins.sharedpreferences.StringListLookupResultType: io.flutter.plugins.sharedpreferences.StringListLookupResultType[] values()
io.flutter.embedding.android.FlutterFragmentActivity: io.flutter.embedding.android.FlutterFragmentActivity$NewEngineIntentBuilder withNewEngine()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$300(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.fragment.app.Fragment: android.view.animation.Animation onCreateAnimation(int,boolean,int)
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: void synthesizeMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.imagepicker.Messages$SourceType: io.flutter.plugins.imagepicker.Messages$SourceType[] values()
io.flutter.embedding.engine.FlutterJNI: void setLocalizationPlugin(io.flutter.plugin.localization.LocalizationPlugin)
io.flutter.embedding.engine.FlutterJNI: void nativePrefetchDefaultFontManager()
io.flutter.embedding.engine.systemchannels.SystemChannel: void sendMemoryPressureWarning()
androidx.fragment.app.Fragment: boolean equals(java.lang.Object)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void addPlugin(io.flutter.embedding.engine.plugins.shim.ShimRegistrar)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: java.lang.String getCollectionItemRowTitle(java.lang.Object)
io.flutter.embedding.android.FlutterTextureView: boolean access$100(io.flutter.embedding.android.FlutterTextureView)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.plugins.service.ServiceControlSurface getServiceControlSurface()
androidx.core.app.CoreComponentFactory: CoreComponentFactory()
io.flutter.app.FlutterActivity: void onLowMemory()
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setBuiltInZoomControls(android.webkit.WebSettings,boolean)
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: void scheduleFrame()
androidx.appcompat.widget.Toolbar: int getContentInsetRight()
io.flutter.embedding.engine.FlutterEngineCache: void put(java.lang.String,io.flutter.embedding.engine.FlutterEngine)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$46$lambda$45(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getMutators()
io.flutter.embedding.android.FlutterFragment: java.lang.String getCachedEngineGroupId()
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setRequestedWithHeaderOriginAllowList(java.util.Set)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode[] $values()
io.flutter.embedding.android.KeyboardManager$ViewDelegate: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
io.flutter.view.TextureRegistry: io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture()
androidx.tracing.TraceApi29Impl: boolean isEnabled()
io.flutter.embedding.android.FlutterTextureView: void access$200(io.flutter.embedding.android.FlutterTextureView)
io.flutter.plugins.webviewflutter.PigeonApiView: io.flutter.plugins.webviewflutter.WebViewPoint getScrollPosition(android.view.View)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values()
io.flutter.plugin.platform.PlatformPlugin$1: boolean clipboardHasStrings()
androidx.core.content.res.ResourcesCompat$Api23Impl: int getColor(android.content.res.Resources,int,android.content.res.Resources$Theme)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$3: void success(java.lang.Object)
io.flutter.embedding.engine.systemchannels.NavigationChannel$1: NavigationChannel$1(io.flutter.embedding.engine.systemchannels.NavigationChannel)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: boolean uninstallDeferredComponent(int,java.lang.String)
io.flutter.plugins.imagepicker.Messages$VoidResult: void error(java.lang.Throwable)
androidx.appcompat.widget.SwitchCompat: void setThumbTintList(android.content.res.ColorStateList)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$000(io.flutter.embedding.engine.systemchannels.AccessibilityChannel)
org.chromium.support_lib_boundary.ProxyControllerBoundaryInterface: void setProxyOverride(java.lang.String[][],java.lang.String[],java.lang.Runnable,java.util.concurrent.Executor)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void destroy()
io.flutter.plugin.platform.SurfaceProducerPlatformViewRenderTarget: void scheduleFrame()
org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertWebResourceRequest(android.webkit.WebResourceRequest)
androidx.core.app.ComponentActivity: boolean shouldDumpInternalState(java.lang.String[])
io.flutter.embedding.android.FlutterFragmentActivity: void configureStatusBarForFullscreenFlutterExperience()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.lang.Double getDouble(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.plugin.common.PluginRegistry: boolean hasPlugin(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: boolean nativeGetIsSoftwareRenderingEnabled()
io.flutter.embedding.engine.FlutterEngineGroup$Options: io.flutter.embedding.engine.FlutterEngineGroup$Options setPlatformViewsController(io.flutter.plugin.platform.PlatformViewsController)
org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertWebMessagePort(java.lang.Object)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onGeolocationPermissionsShowPrompt(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,java.lang.String,android.webkit.GeolocationPermissions$Callback,kotlin.jvm.functions.Function1)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.view.VsyncWaiter$FrameCallback: void doFrame(long)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult$Builder: io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult build()
androidx.appcompat.widget.AppCompatImageView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: void release()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRRect(int,int,int,int,float[])
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult$Builder: io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult$Builder setPaths(java.util.List)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiCookieManager getPigeonApiCookieManager()
androidx.core.view.WindowInsetsCompat$BuilderImpl20: void setSystemWindowInsets(androidx.core.graphics.Insets)
androidx.datastore.preferences.PreferencesProto$Value$ValueCase: androidx.datastore.preferences.PreferencesProto$Value$ValueCase[] values()
io.flutter.embedding.android.FlutterSurfaceView: boolean access$002(io.flutter.embedding.android.FlutterSurfaceView,boolean)
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromeEnabledSystemUIMode(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode)
io.flutter.plugins.webviewflutter.FlutterAssetManagerProxyApi: java.lang.String getAssetFilePathByName(io.flutter.plugins.webviewflutter.FlutterAssetManager,java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel$1: TextInputChannel$1(io.flutter.embedding.engine.systemchannels.TextInputChannel)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setEncodedStringList$1: SharedPreferencesPlugin$setEncodedStringList$1(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,java.lang.String,java.lang.String,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setSupportZoom(android.webkit.WebSettings,boolean)
io.flutter.app.FlutterFragmentActivity: void onBackPressed()
io.flutter.plugins.urllauncher.Messages$BrowserOptions: boolean equals(java.lang.Object)
androidx.datastore.preferences.protobuf.WireFormat$JavaType: androidx.datastore.preferences.protobuf.WireFormat$JavaType[] values()
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$1400(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.embedding.android.FlutterPlayStoreSplitApplication: void onCreate()
io.flutter.plugin.platform.PlatformViewsController: void attachToView(io.flutter.embedding.android.FlutterView)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$6700(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.embedding.engine.loader.FlutterLoader: void startInitialization(android.content.Context)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void onReceivedHttpError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse)
io.flutter.plugin.common.MessageCodec: java.lang.Object decodeMessage(java.nio.ByteBuffer)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$FeatureInstallStateUpdatedListener: PlayStoreDeferredComponentManager$FeatureInstallStateUpdatedListener(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager,io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$1)
androidx.activity.ComponentActivity$Api33Impl: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher(android.app.Activity)
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type fromLong(long)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: android.os.Bundle createArgs()
io.flutter.app.FlutterActivityEvents: boolean onBackPressed()
io.flutter.view.FlutterView$2: void surfaceDestroyed(android.view.SurfaceHolder)
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel$Companion: PigeonApiJavaScriptChannel$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.core.view.ViewCompat$Api26Impl: int getNextClusterForwardId(android.view.View)
androidx.datastore.preferences.protobuf.JavaType: androidx.datastore.preferences.protobuf.JavaType valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.RestorationChannel: java.util.Map access$300(io.flutter.embedding.engine.systemchannels.RestorationChannel,byte[])
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,io.flutter.embedding.android.FlutterImageView)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.FlutterActivity$NewEngineIntentBuilder withNewEngine()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.plugin.platform.PlatformViewsController: void onAttachedToJNI()
androidx.appcompat.view.menu.ListMenuItemView: void setForceShowIcon(boolean)
io.flutter.plugin.editing.ListenableEditingState: void beginBatchEdit()
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: boolean hasRequestInitialAccessibilityFocus(android.view.accessibility.AccessibilityNodeInfo)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateRefreshRate(float)
io.flutter.plugin.editing.TextInputPlugin: void setTextInputClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration)
io.flutter.view.AccessibilityBridge$1: void onTap(int)
androidx.activity.Api34Impl: int swipeEdge(android.window.BackEvent)
io.flutter.embedding.android.FlutterSurfaceView$2: void onFlutterUiDisplayed()
io.flutter.embedding.android.FlutterFragment: void onStop()
androidx.appcompat.widget.ActionBarOverlayLayout: int getNestedScrollAxes()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void setSynchronousReturnValueForOnConsoleMessage(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,boolean)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.CharSequence getTextFieldHint()
io.flutter.plugins.webviewflutter.PigeonApiWebView: void setBackgroundColor(android.webkit.WebView,long)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.lang.Object getPrefs(java.util.List,kotlin.coroutines.Continuation)
io.flutter.plugin.platform.PlatformPlugin: boolean clipboardHasStrings()
androidx.appcompat.widget.SwitchCompat: void setSplitTrack(boolean)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode valueOf(java.lang.String)
io.flutter.plugin.common.MethodCodec: java.lang.Object decodeEnvelope(java.nio.ByteBuffer)
org.chromium.support_lib_boundary.DropDataContentProviderBoundaryInterface: android.net.Uri cache(byte[],java.lang.String,java.lang.String)
io.flutter.plugins.webviewflutter.WebViewFlutterPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.plugins.urllauncher.UrlLauncherPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler: void proceed(android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)
androidx.activity.ComponentActivity: androidx.activity.ComponentActivity$ReportFullyDrawnExecutor access$getReportFullyDrawnExecutor$p(androidx.activity.ComponentActivity)
io.flutter.plugin.common.PluginRegistry$Registrar: io.flutter.view.FlutterView view()
androidx.core.app.ComponentActivity: void putExtraData(androidx.core.app.ComponentActivity$ExtraData)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void setDirection(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.platform.PlatformViewsController: PlatformViewsController()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: PlatformChannel$DeviceOrientation(java.lang.String,int,java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiView: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.view.VsyncWaiter: void init()
io.flutter.plugin.platform.PlatformView$-CC: void $default$onFlutterViewAttached(io.flutter.plugin.platform.PlatformView,android.view.View)
io.flutter.plugins.webviewflutter.PigeonApiWebStorage: android.webkit.WebStorage instance()
io.flutter.view.FlutterView: void onMemoryPressure()
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$32$lambda$31(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.FlutterActivity: boolean shouldRestoreAndSaveState()
androidx.activity.Api34Impl: float progress(android.window.BackEvent)
org.chromium.support_lib_boundary.ProfileBoundaryInterface: void prefetchUrl(java.lang.String,android.webkit.ValueCallback)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void scheduleFrame()
io.flutter.plugin.platform.PlatformViewsController: void attachToFlutterRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.embedding.engine.loader.ResourceExtractor: java.lang.String[] getExistingTimestamps(java.io.File)
io.flutter.plugin.platform.PlatformViewWrapper: int getRenderTargetWidth()
androidx.fragment.app.Fragment: void startActivity(android.content.Intent)
io.flutter.plugin.platform.PlatformViewWrapper: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()
io.flutter.plugin.common.ActivityLifecycleListener: void onPostResume()
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void appIsInactive()
io.flutter.plugins.imagepicker.Messages$GeneralOptions: java.lang.Long getLimit()
io.flutter.embedding.android.FlutterView: void removeFlutterEngineAttachmentListener(io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener)
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode valueOf(java.lang.String)
io.flutter.app.FlutterActivityDelegate: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.FlutterInjector: io.flutter.FlutterInjector instance()
io.flutter.plugins.imagepicker.ImagePickerDelegate: void handleImageResult(java.lang.String,boolean)
io.flutter.util.ViewUtils: boolean hasChildViewOfType(android.view.View,java.lang.Class[])
io.flutter.view.AccessibilityBridge: boolean shouldSetCollectionInfo(io.flutter.view.AccessibilityBridge$SemanticsNode)
androidx.appcompat.widget.Toolbar: int getTitleMarginStart()
androidx.appcompat.widget.AppCompatTextView: void setLineHeight(int)
androidx.appcompat.widget.SearchView: void setQueryHint(java.lang.CharSequence)
io.flutter.embedding.engine.loader.ApplicationInfoLoader: android.content.pm.ApplicationInfo getApplicationInfo(android.content.Context)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.plugin.platform.PlatformViewsController: android.view.MotionEvent$PointerCoords parsePointerCoords(java.lang.Object,float)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$5$lambda$4(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: java.lang.String getInitialRoute()
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$Adapter getAdapter()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onEnd(android.view.WindowInsetsAnimation)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi$-CC: void lambda$setUp$8(io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.preference.MultiSelectListPreference: MultiSelectListPreference(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.android.FlutterFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
io.flutter.embedding.engine.FlutterJNI: void onVsync(long,long,long)
io.flutter.plugin.platform.PlatformViewsController: void translateMotionEvent(android.view.MotionEvent,android.view.MotionEvent$PointerCoords[])
io.flutter.embedding.engine.systemchannels.TextInputChannel: TextInputChannel(io.flutter.embedding.engine.dart.DartExecutor)
androidx.fragment.app.Fragment: void setAllowReturnTransitionOverlap(boolean)
io.flutter.plugins.webviewflutter.JavaScriptChannelProxyApi: io.flutter.plugins.webviewflutter.JavaScriptChannel pigeon_defaultConstructor(java.lang.String)
io.flutter.plugins.imagepicker.ImagePickerPlugin: void pickImages(io.flutter.plugins.imagepicker.Messages$SourceSpecification,io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions,io.flutter.plugins.imagepicker.Messages$GeneralOptions,io.flutter.plugins.imagepicker.Messages$Result)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$dataStoreSetString$2: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.plugins.webviewflutter.PigeonApiWebView: PigeonApiWebView(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
io.flutter.embedding.android.KeyEmbedderResponder: java.util.Map getPressedState()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: ShimRegistrar(java.lang.String,java.util.Map)
androidx.appcompat.widget.ViewStubCompat: void setLayoutResource(int)
io.flutter.view.FlutterNativeView: void runFromBundle(io.flutter.view.FlutterRunArguments)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$11$lambda$10(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)
androidx.core.view.WindowInsetsCompat$Impl28: int hashCode()
io.flutter.embedding.engine.loader.ResourceExtractor: java.lang.String access$000(java.io.File,android.content.pm.PackageManager,java.lang.String)
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: void recreateSurfaceIfNeeded()
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.loader.ResourceExtractor initResources(android.content.Context)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle)
io.flutter.plugin.editing.TextInputPlugin: int inputTypeFromTextInputType(io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,boolean,boolean,boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization)
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentContainer createFragmentContainer()
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener: android.webkit.DownloadListener pigeon_defaultConstructor()
io.flutter.util.TraceSection: java.lang.String cropSectionName(java.lang.String)
io.flutter.embedding.engine.dart.DartExecutor: void send(java.lang.String,java.nio.ByteBuffer)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiCookieManager getPigeonApiCookieManager()
io.flutter.plugin.platform.PlatformViewsController: android.view.MotionEvent toMotionEvent(float,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch,boolean)
androidx.fragment.app.Fragment: android.view.View requireView()
io.flutter.plugins.webviewflutter.WebViewProxyApi: boolean canGoForward(android.webkit.WebView)
io.flutter.embedding.engine.systemchannels.NavigationChannel: void popRoute()
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi: void setSynchronousReturnValueForOnShowFileChooser(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,boolean)
io.flutter.plugins.imagepicker.ImageResizer: androidx.core.util.SizeFCompat calculateTargetSize(double,double,java.lang.Double,java.lang.Double)
io.flutter.plugins.webviewflutter.PigeonApiView: void scrollTo(android.view.View,long,long)
androidx.appcompat.app.AlertController$RecycleListView: AlertController$RecycleListView(android.content.Context,android.util.AttributeSet)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder withCachedEngine(java.lang.String)
io.flutter.plugin.common.MethodCodec: java.nio.ByteBuffer encodeErrorEnvelopeWithStacktrace(java.lang.String,java.lang.String,java.lang.Object,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer: void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
io.flutter.embedding.engine.plugins.lifecycle.FlutterLifecycleAdapter: FlutterLifecycleAdapter()
io.flutter.app.FlutterFragmentActivity: void onWindowFocusChanged(boolean)
androidx.appcompat.widget.Toolbar: Toolbar(android.content.Context,android.util.AttributeSet)
androidx.core.content.FileProvider: boolean onCreate()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: io.flutter.embedding.android.TransparencyMode getTransparencyMode()
io.flutter.plugin.platform.PlatformViewsController: io.flutter.view.TextureRegistry access$400(io.flutter.plugin.platform.PlatformViewsController)
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getVisibleInsets(android.view.View)
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: boolean equals(java.lang.Object)
io.flutter.plugins.webviewflutter.PigeonApiGeolocationPermissionsCallback: void invoke(android.webkit.GeolocationPermissions$Callback,java.lang.String,boolean,boolean)
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: void setProfile(java.lang.String)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean endBatchEdit()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar$1: void onFinalize(long)
androidx.appcompat.view.menu.ActionMenuItemView: void setIcon(android.graphics.drawable.Drawable)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void releaseInternal()
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeStableInsets()
io.flutter.embedding.android.AndroidTouchProcessor: AndroidTouchProcessor(io.flutter.embedding.engine.renderer.FlutterRenderer,boolean)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine getAttachedFlutterEngine()
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi$-CC: io.flutter.plugin.common.MessageCodec getCodec()
io.flutter.plugin.common.BinaryMessenger: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
kotlinx.coroutines.flow.SharingCommand: kotlinx.coroutines.flow.SharingCommand[] values()
io.flutter.plugins.sharedpreferences.StringListResult$Companion: io.flutter.plugins.sharedpreferences.StringListResult fromList(java.util.List)
io.flutter.plugins.sharedpreferences.StringListResult: java.lang.String getJsonEncodedValue()
io.flutter.embedding.android.FlutterView: boolean onGenericMotionEvent(android.view.MotionEvent)
io.flutter.embedding.android.FlutterActivity: void onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions$Builder: Messages$ImageSelectionOptions$Builder()
androidx.core.view.ViewCompat$Api21Impl: java.lang.String getTransitionName(android.view.View)
io.flutter.plugins.urllauncher.UrlLauncherPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
androidx.core.content.FileProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setDisplayZoomControls(android.webkit.WebSettings,boolean)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebStorage getPigeonApiWebStorage()
io.flutter.plugin.editing.TextEditingDelta: java.lang.CharSequence getDeltaText()
io.flutter.plugins.imagepicker.ImagePickerPlugin: io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState getActivityState()
io.flutter.FlutterInjector$Builder$NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder shouldDelayFirstAndroidViewDraw(boolean)
io.flutter.plugin.platform.SurfaceProducerPlatformViewRenderTarget: void resize(int,int)
io.flutter.view.FlutterNativeView: void assertAttached()
io.flutter.plugins.webviewflutter.PigeonApiWebStorage: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onProgressChanged$lambda$1(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: void onResume(androidx.lifecycle.LifecycleOwner)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: java.lang.String lookupKeyForAsset(java.lang.String,java.lang.String)
io.flutter.embedding.android.KeyboardManager$ViewDelegate: boolean onTextInputKeyEvent(android.view.KeyEvent)
io.flutter.view.FlutterView: void onPostResume()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.lang.Object access$getValueByKey(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,androidx.datastore.preferences.core.Preferences$Key,kotlin.coroutines.Continuation)
io.flutter.plugin.common.BinaryMessenger: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
androidx.core.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
io.flutter.view.AccessibilityBridge$3: void onChange(boolean)
io.flutter.view.FlutterNativeView: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
androidx.core.widget.NestedScrollView: float getBottomFadingEdgeStrength()
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets: java.lang.String getAssetFilePathByName(java.lang.String,java.lang.String)
io.flutter.embedding.engine.dart.DartMessenger$BufferedMessageInfo: DartMessenger$BufferedMessageInfo(java.nio.ByteBuffer,int,long)
io.flutter.plugins.webviewflutter.PigeonApiFileChooserParams: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$dataStoreSetString$2: SharedPreferencesPlugin$dataStoreSetString$2(androidx.datastore.preferences.core.Preferences$Key,java.lang.String,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: android.graphics.Matrix getMatrix()
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType fromLong(long)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathEnd()
io.flutter.plugin.editing.TextInputPlugin: void clearPlatformViewClient(int)
io.flutter.embedding.android.FlutterFragmentActivity: java.lang.String getCachedEngineId()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
io.flutter.app.FlutterActivityDelegate: boolean onActivityResult(int,int,android.content.Intent)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader: void lambda$new$0(android.media.ImageReader)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: kotlin.Unit lambda$onPageStarted$0(kotlin.Result)
io.flutter.plugins.webviewflutter.PigeonApiFileChooserParams: PigeonApiFileChooserParams(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
androidx.appcompat.view.menu.ListMenuItemView: androidx.appcompat.view.menu.MenuItemImpl getItemData()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonCodec: AndroidWebkitLibraryPigeonCodec()
io.flutter.embedding.engine.dart.DartExecutor: void enableBufferingIncomingMessages()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.WebViewPoint: long getY()
io.flutter.plugins.imagepicker.Messages$SourceSpecification: io.flutter.plugins.imagepicker.Messages$SourceType getType()
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugin.editing.ListenableEditingState: int getSelectionStart()
io.flutter.plugins.imagepicker.Messages$PigeonCodec: java.lang.Object readValueOfType(byte,java.nio.ByteBuffer)
io.flutter.plugin.common.ErrorLogResult: void error(java.lang.String,java.lang.String,java.lang.Object)
androidx.core.view.WindowInsetsCompat$Impl20: void setOverriddenInsets(androidx.core.graphics.Insets[])
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void removeOnNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener)
io.flutter.util.TraceSection: void begin(java.lang.String)
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions fromList(java.util.ArrayList)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setUserAgentString(android.webkit.WebSettings,java.lang.String)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()
io.flutter.view.FlutterNativeView: void attach(io.flutter.view.FlutterNativeView)
androidx.fragment.app.Fragment: void setReenterTransition(java.lang.Object)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: void tearDown()
io.flutter.plugins.imagepicker.ImagePickerDelegate: void lambda$handleCaptureImageResult$6(java.lang.String)
io.flutter.app.FlutterActivityDelegate: android.graphics.drawable.Drawable getLaunchScreenDrawableFromActivityTheme()
androidx.appcompat.widget.AppCompatImageButton: void setBackgroundResource(int)
io.flutter.plugins.webviewflutter.AndroidWebKitError: java.lang.String getCode()
androidx.appcompat.widget.SwitchCompat: void setChecked(boolean)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$RecycledViewPool getRecycledViewPool()
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$14$lambda$13(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.loader.ResourceExtractor: void copy(java.io.InputStream,java.io.OutputStream)
io.flutter.plugin.editing.TextEditingDelta: int getDeltaStart()
io.flutter.embedding.engine.loader.FlutterLoader$Settings: void setLogTag(java.lang.String)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView createImageView()
androidx.appcompat.widget.LinearLayoutCompat: float getWeightSum()
io.flutter.embedding.engine.systemchannels.LocalizationChannel: void setLocalizationMessageHandler(io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler)
io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler$Companion: void setUpMessageHandlers$lambda$3$lambda$2(io.flutter.plugins.webviewflutter.PigeonApiHttpAuthHandler,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.FlutterView$2: FlutterView$2(io.flutter.embedding.android.FlutterView,android.os.Handler)
io.flutter.plugin.platform.PlatformPlugin$1: void setSystemUiChangeListener()
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onReceivedHttpError(android.webkit.WebViewClient,android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse,kotlin.jvm.functions.Function1)
io.flutter.app.FlutterFragmentActivity: io.flutter.view.FlutterView getFlutterView()
io.flutter.plugins.sharedpreferences.Messages$PigeonCodec: Messages$PigeonCodec()
io.flutter.embedding.android.FlutterActivity: boolean shouldHandleDeeplinking()
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: void onActivityPostStarted(android.app.Activity)
io.flutter.embedding.android.FlutterSurfaceView: void access$200(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.app.FlutterActivityDelegate$ViewFactory: boolean retainFlutterNativeView()
androidx.activity.OnBackPressedCallback: kotlin.jvm.functions.Function0 getEnabledChangedCallback$activity_release()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: FlutterMutatorsStack$FlutterMutatorType(java.lang.String,int)
io.flutter.app.FlutterActivityDelegate: boolean isDebuggable()
androidx.recyclerview.widget.RecyclerView: void setRecyclerListener(androidx.recyclerview.widget.RecyclerView$RecyclerListener)
androidx.appcompat.widget.AppCompatImageButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
androidx.fragment.app.Fragment: void onAttach(android.app.Activity)
androidx.fragment.app.Fragment: androidx.lifecycle.viewmodel.CreationExtras getDefaultViewModelCreationExtras()
androidx.core.widget.NestedScrollView$Api21Impl: boolean getClipToPadding(android.view.ViewGroup)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceRequest: boolean isForMainFrame(android.webkit.WebResourceRequest)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
io.flutter.view.AccessibilityBridge$SemanticsNode: void log(java.lang.String,boolean)
io.flutter.plugins.webviewflutter.DisplayListenerProxy$1: void onDisplayChanged(int)
io.flutter.plugin.mouse.MouseCursorPlugin$2: MouseCursorPlugin$2(io.flutter.plugin.mouse.MouseCursorPlugin)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SettingsChannel getSettingsChannel()
io.flutter.embedding.android.WindowInfoRepositoryCallbackAdapterWrapper: void addWindowLayoutInfoListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
io.flutter.app.FlutterActivity: void onStop()
io.flutter.embedding.engine.systemchannels.TextInputChannel: void go(int)
org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertCookieManager(java.lang.Object)
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue: SettingsChannel$ConfigurationQueue()
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void endRearDisplaySession()
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$4202(io.flutter.view.AccessibilityBridge$SemanticsNode,java.util.List)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode access$400(io.flutter.embedding.engine.systemchannels.PlatformChannel,java.lang.String)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
androidx.core.view.ViewCompat$Api26Impl: void setAutofillHints(android.view.View,java.lang.String[])
io.flutter.view.FlutterNativeView: io.flutter.embedding.engine.dart.DartExecutor getDartExecutor()
io.flutter.plugins.webviewflutter.FileChooserMode: FileChooserMode(java.lang.String,int,int)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$15$lambda$14(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.localization.LocalizationPlugin: java.util.Locale resolveNativeLocale(java.util.List)
io.flutter.view.FlutterView: void onDetachedFromWindow()
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String)
androidx.core.view.ViewCompat$Api23Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getRegistrar()
io.flutter.embedding.android.FlutterView: boolean onTextInputKeyEvent(android.view.KeyEvent)
org.chromium.support_lib_boundary.WebViewClientBoundaryInterface: void onPageCommitVisible(android.webkit.WebView,java.lang.String)
androidx.appcompat.widget.AppCompatTextView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.core.view.MenuItemCompat$Api26Impl: int getAlphabeticModifiers(android.view.MenuItem)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void updateBackGestureProgress(android.window.BackEvent)
io.flutter.plugin.platform.PlatformPlugin$PlatformPluginDelegate: void setFrameworkHandlesBack(boolean)
io.flutter.plugin.editing.TextEditingDelta: int getDeltaEnd()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.dart.DartExecutor getDartExecutor()
io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder: io.flutter.embedding.android.FlutterActivity$CachedEngineIntentBuilder destroyEngineWithActivity(boolean)
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()
io.flutter.embedding.engine.FlutterEngine: void destroy()
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String getNetworkPolicy(android.content.pm.ApplicationInfo,android.content.Context)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void lambda$onReceivedError$7(android.webkit.WebView,android.webkit.WebResourceRequest,androidx.webkit.WebResourceErrorCompat)
io.flutter.embedding.engine.FlutterJNI: void nativeScheduleFrame(long)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: PlatformViewsChannel$1(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel)
io.flutter.plugins.urllauncher.Messages$BrowserOptions: void setShowTitle(java.lang.Boolean)
io.flutter.embedding.engine.dart.PlatformMessageHandler: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)
io.flutter.plugin.platform.PlatformViewsController: android.util.SparseArray access$1000(io.flutter.plugin.platform.PlatformViewsController)
io.flutter.embedding.engine.loader.FlutterLoader: FlutterLoader(io.flutter.embedding.engine.FlutterJNI,java.util.concurrent.ExecutorService)
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.ExclusiveAppComponent getExclusiveAppComponent()
io.flutter.plugin.common.BasicMessageChannel: io.flutter.plugin.common.MessageCodec access$200(io.flutter.plugin.common.BasicMessageChannel)
androidx.core.view.ViewCompat$Api21Impl: boolean isNestedScrollingEnabled(android.view.View)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: WebViewClientProxyApi$WebViewClientCompatImpl(io.flutter.plugins.webviewflutter.WebViewClientProxyApi)
androidx.core.widget.EdgeEffectCompat$Api31Impl: float onPullDistance(android.widget.EdgeEffect,float,float)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void updateTexImage()
androidx.appcompat.view.menu.ListMenuItemView: void setSubMenuArrowVisible(boolean)
io.flutter.view.AccessibilityBridge: boolean onAccessibilityHoverEvent(android.view.MotionEvent,boolean)
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String findAppBundlePath()
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder shouldDelayFirstAndroidViewDraw(boolean)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.engine.FlutterEngine provideFlutterEngine(android.content.Context)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: kotlin.Unit lambda$shouldOverrideUrlLoading$12(kotlin.Result)
androidx.activity.ComponentActivity: void addMenuProvider(androidx.core.view.MenuProvider,androidx.lifecycle.LifecycleOwner)
io.flutter.embedding.engine.dart.DartMessenger$Reply: DartMessenger$Reply(io.flutter.embedding.engine.FlutterJNI,int)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.lang.Object readAllKeys(kotlin.coroutines.Continuation)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode valueOf(java.lang.String)
io.flutter.embedding.engine.dart.DartExecutor: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setAllowContentAccess(android.webkit.WebSettings,boolean)
io.flutter.plugins.sharedpreferences.Messages$PigeonCodec: void writeValue(java.io.ByteArrayOutputStream,java.lang.Object)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void onReceivedHttpAuthRequest$lambda$10(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: EventChannel$IncomingStreamRequestHandler(io.flutter.plugin.common.EventChannel,io.flutter.plugin.common.EventChannel$StreamHandler)
org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler createWebView(android.webkit.WebView)
io.flutter.view.FlutterNativeView: void detachFromFlutterView()
io.flutter.plugins.webviewflutter.FlutterViewFactory$1: android.view.View getView()
io.flutter.embedding.android.FlutterActivity: android.content.Context getContext()
androidx.fragment.app.Fragment: void setNextTransition(int)
io.flutter.plugins.webviewflutter.PigeonApiConsoleMessage: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void pushImage(android.media.Image)
androidx.appcompat.widget.SwitchCompat: void setSwitchPadding(int)
io.flutter.plugins.imagepicker.ExifDataCopier: void copyExif(androidx.exifinterface.media.ExifInterface,androidx.exifinterface.media.ExifInterface)
androidx.core.widget.TextViewCompat$Api28Impl: java.lang.CharSequence castToCharSequence(android.text.PrecomputedText)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean setSelection(int,int)
io.flutter.embedding.engine.systemchannels.RestorationChannel: void clearData()
io.flutter.embedding.android.KeyboardManager: void access$000(io.flutter.embedding.android.KeyboardManager,android.view.KeyEvent)
io.flutter.plugins.imagepicker.ImagePickerCache$CacheType: ImagePickerCache$CacheType(java.lang.String,int)
androidx.appcompat.widget.SwitchCompat: android.graphics.PorterDuff$Mode getThumbTintMode()
androidx.fragment.app.Fragment: boolean getUserVisibleHint()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onWindowFocusChanged(boolean)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration)
io.flutter.app.FlutterActivityDelegate: boolean loadIntent(android.content.Intent)
io.flutter.plugin.common.PluginRegistry$PluginRegistrantCallback: void registerWith(io.flutter.plugin.common.PluginRegistry)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: void setInt(java.lang.String,long,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
androidx.core.view.ViewCompat$Api30Impl: void setImportantForContentCapture(android.view.View,int)
androidx.core.view.DisplayCutoutCompat$Api28Impl: java.util.List getBoundingRects(android.view.DisplayCutout)
io.flutter.embedding.android.KeyboardMap$PressingGoal: KeyboardMap$PressingGoal(int,io.flutter.embedding.android.KeyboardMap$KeyPair[])
androidx.fragment.app.Fragment: android.content.res.Resources getResources()
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: java.lang.String toString()
io.flutter.plugins.webviewflutter.PigeonApiView$Companion: void setUpMessageHandlers$lambda$3$lambda$2(io.flutter.plugins.webviewflutter.PigeonApiView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.platform.PlatformViewsController: void access$100(io.flutter.plugin.platform.PlatformViewsController,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityManager access$900(io.flutter.view.AccessibilityBridge)
androidx.appcompat.widget.Toolbar: android.content.Context getPopupContext()
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onConsoleMessage$lambda$8(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
androidx.fragment.app.Fragment: boolean getPopDirection()
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getMandatorySystemGestureInsets()
org.chromium.support_lib_boundary.WebViewRendererClientBoundaryInterface: void onRendererUnresponsive(android.webkit.WebView,java.lang.reflect.InvocationHandler)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceErrorCompat: void pigeon_newInstance(androidx.webkit.WebResourceErrorCompat,kotlin.jvm.functions.Function1)
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String getString(android.os.Bundle,java.lang.String)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: AccessibilityBridge$CustomAccessibilityAction()
io.flutter.plugin.common.StandardMethodCodec: StandardMethodCodec(io.flutter.plugin.common.StandardMessageCodec)
androidx.core.os.BundleCompat$Api33Impl: android.util.SparseArray getSparseParcelableArray(android.os.Bundle,java.lang.String,java.lang.Class)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void onTrimMemory(int)
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons valueOf(java.lang.String)
io.flutter.view.FlutterView$ZeroSides: FlutterView$ZeroSides(java.lang.String,int)
io.flutter.embedding.engine.dart.DartExecutor: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: SharedPreferencesBackend(io.flutter.plugin.common.BinaryMessenger,android.content.Context,io.flutter.plugins.sharedpreferences.SharedPreferencesListEncoder,int,kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.android.FlutterView: void sendUserSettingsToFlutter()
androidx.core.app.ComponentActivity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)
androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.DisplayCutoutCompat getDisplayCutout()
io.flutter.plugin.editing.TextInputPlugin: void notifyViewEntered()
io.flutter.embedding.android.FlutterFragmentActivity: java.lang.String getDartEntrypointFunctionName()
io.flutter.plugins.webviewflutter.PigeonApiWebView: void setWebViewClient(android.webkit.WebView,android.webkit.WebViewClient)
androidx.fragment.app.FragmentActivity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void appIsResumed()
io.flutter.plugin.editing.ListenableEditingState: void removeEditingStateListener(io.flutter.plugin.editing.ListenableEditingState$EditingStateWatcher)
io.flutter.plugin.common.StandardMessageCodec: void writeAlignment(java.io.ByteArrayOutputStream,int)
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: java.lang.Double getMaxHeight()
androidx.core.widget.EdgeEffectCompat$Api31Impl: float getDistance(android.widget.EdgeEffect)
io.flutter.plugins.webviewflutter.PigeonApiWebStorage: void pigeon_newInstance(android.webkit.WebStorage,kotlin.jvm.functions.Function1)
io.flutter.embedding.engine.FlutterEngineCache: io.flutter.embedding.engine.FlutterEngineCache getInstance()
io.flutter.embedding.android.FlutterSurfaceView$1: void surfaceCreated(android.view.SurfaceHolder)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage: FlutterRenderer$ImageReaderSurfaceProducer$PerImage(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer,android.media.Image,long)
androidx.recyclerview.widget.GridLayoutManager: GridLayoutManager(android.content.Context,android.util.AttributeSet,int,int)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
io.flutter.embedding.android.ExclusiveAppComponent: java.lang.Object getAppComponent()
androidx.core.widget.TextViewCompat$Api28Impl: java.lang.String[] getDigitStrings(android.icu.text.DecimalFormatSymbols)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: void lambda$onPageFinished$3(android.webkit.WebView,java.lang.String)
io.flutter.plugins.webviewflutter.WebViewProxyApi: void evaluateJavascript(android.webkit.WebView,java.lang.String,kotlin.jvm.functions.Function1)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$-CC: void lambda$setUp$2(io.flutter.plugins.imagepicker.Messages$ImagePickerApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.FlutterImageView: void closeCurrentImage()
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebViewPoint getPigeonApiWebViewPoint()
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: boolean onShowFileChooser(android.webkit.WebView,android.webkit.ValueCallback,android.webkit.WebChromeClient$FileChooserParams)
io.flutter.plugins.urllauncher.WebViewActivity$1: WebViewActivity$1(io.flutter.plugins.urllauncher.WebViewActivity)
io.flutter.plugin.text.ProcessTextPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.plugins.imagepicker.ImagePickerDelegate$2: ImagePickerDelegate$2(android.app.Activity)
androidx.datastore.preferences.protobuf.GeneratedMessageLite$MethodToInvoke: androidx.datastore.preferences.protobuf.GeneratedMessageLite$MethodToInvoke[] values()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2: SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2(kotlinx.coroutines.flow.FlowCollector,androidx.datastore.preferences.core.Preferences$Key)
io.flutter.app.FlutterActivityDelegate: java.lang.Object valuePublishedByPlugin(java.lang.String)
org.chromium.support_lib_boundary.JsReplyProxyBoundaryInterface: void postMessageWithPayload(java.lang.reflect.InvocationHandler)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api30Impl: void setStateDescription(android.view.accessibility.AccessibilityNodeInfo,java.lang.CharSequence)
androidx.webkit.WebViewClientCompat: void onPageCommitVisible(android.webkit.WebView,java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$42$lambda$41(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1$2$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void onMoveToBackground()
io.flutter.plugin.platform.PlatformViewsController: int toLogicalPixels(double,float)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void lambda$onActivityResult$1(int,android.content.Intent)
io.flutter.embedding.engine.FlutterEngineGroupCache: FlutterEngineGroupCache()
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: boolean isReleased()
io.flutter.app.FlutterActivityDelegate: java.lang.String[] getArgsFromIntent(android.content.Intent)
io.flutter.view.VsyncWaiter: long access$000(io.flutter.view.VsyncWaiter)
io.flutter.app.FlutterPluginRegistry: void destroy()
io.flutter.plugins.webviewflutter.DisplayListenerProxy: java.util.ArrayList yoinkDisplayListeners(android.hardware.display.DisplayManager)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiWebViewClient)
io.flutter.plugins.webviewflutter.FlutterViewFactory$1: FlutterViewFactory$1(io.flutter.plugins.webviewflutter.FlutterViewFactory,java.lang.Object)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2400(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.urllauncher.Messages$WebViewOptions: Messages$WebViewOptions()
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: void onActivityPostResumed(android.app.Activity)
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: void lambda$onScrollChanged$1(int,int,int,int)
io.flutter.app.FlutterActivity: void onResume()
androidx.profileinstaller.FileSectionType: androidx.profileinstaller.FileSectionType valueOf(java.lang.String)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.WindowManagerHandler access$200(io.flutter.plugin.platform.SingleViewPresentation$PresentationState)
io.flutter.plugins.urllauncher.UrlLauncher: android.os.Bundle extractBundle(java.util.Map)
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions$Builder: Messages$VideoSelectionOptions$Builder()
io.flutter.embedding.engine.FlutterJNI: void onSurfaceCreated(android.view.Surface)
io.flutter.plugins.imagepicker.ImagePickerCache: java.util.Map getCacheMap()
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.Boolean clear(java.lang.String,java.util.List)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setDisabledActionModeMenuItems(int)
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] values()
io.flutter.plugins.webviewflutter.PigeonApiDownloadListener$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiDownloadListener)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener: ImeSyncDeferringInsetsCallback$InsetsListener(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.flutter.view.FlutterNativeView: void destroy()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiConsoleMessage getPigeonApiConsoleMessage()
io.flutter.embedding.engine.systemchannels.KeyEventChannel: java.util.Map encodeKeyEvent(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent,boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: java.util.Map getAll(java.util.List,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineInGroupFragmentBuilder renderMode(io.flutter.embedding.android.RenderMode)
io.flutter.embedding.engine.FlutterEngine: FlutterEngine(android.content.Context,java.lang.String[],boolean,boolean)
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder: FlutterFragmentActivity$NewEngineInGroupIntentBuilder(java.lang.Class,java.lang.String)
io.flutter.plugins.webviewflutter.FileChooserMode$Companion: io.flutter.plugins.webviewflutter.FileChooserMode ofRaw(int)
io.flutter.app.FlutterActivityDelegate: void onUserLeaveHint()
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: AccessibilityViewEmbedder$ReflectionAccessors(io.flutter.view.AccessibilityViewEmbedder$1)
io.flutter.view.AccessibilityBridge: void onTouchExplorationExit()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setString$1: SharedPreferencesPlugin$setString$1(io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,java.lang.String,java.lang.String,kotlin.coroutines.Continuation)
io.flutter.plugins.imagepicker.Messages$SourceSpecification$Builder: io.flutter.plugins.imagepicker.Messages$SourceSpecification$Builder setType(io.flutter.plugins.imagepicker.Messages$SourceType)
io.flutter.app.FlutterActivity: void onStart()
io.flutter.plugins.imagepicker.ImageResizer: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)
androidx.appcompat.widget.SearchView: int getSuggestionCommitIconResId()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.plugins.webviewflutter.WebResourceRequestProxyApi: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.embedding.engine.FlutterEngine: void updateDisplayMetrics(float,float,float)
io.flutter.embedding.android.FlutterActivity$NewEngineInGroupIntentBuilder: android.content.Intent build(android.content.Context)
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromeSystemUIOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle)
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: void urlLoading(android.webkit.WebViewClient,android.webkit.WebView,java.lang.String,kotlin.jvm.functions.Function1)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void setCallback(io.flutter.view.TextureRegistry$SurfaceProducer$Callback)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void finishWithError(java.lang.String,java.lang.String)
io.flutter.embedding.engine.systemchannels.KeyboardChannel: KeyboardChannel(io.flutter.plugin.common.BinaryMessenger)
io.flutter.view.FlutterView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
io.flutter.view.AccessibilityBridge: int access$1176(io.flutter.view.AccessibilityBridge,int)
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: SharedPreferencesPigeonOptions(java.lang.String,boolean)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi: java.util.Map getAll(java.lang.String,java.util.List)
io.flutter.plugins.webviewflutter.PigeonApiCookieManager: void setCookie(android.webkit.CookieManager,java.lang.String,java.lang.String)
io.flutter.embedding.engine.systemchannels.ProcessTextChannel: io.flutter.embedding.engine.systemchannels.ProcessTextChannel$ProcessTextMethodHandler access$000(io.flutter.embedding.engine.systemchannels.ProcessTextChannel)
io.flutter.plugins.sharedpreferences.LegacySharedPreferencesPlugin: java.lang.Object transformPref(java.lang.String,java.lang.Object)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: void setUpMessageHandlers$lambda$3$lambda$2(io.flutter.plugins.webviewflutter.PigeonApiWebSettings,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder shouldAttachEngineToActivity(boolean)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
androidx.core.content.FileProvider: java.lang.String getTypeAnonymous(android.net.Uri)
io.flutter.plugins.imagepicker.Messages$GeneralOptions: int hashCode()
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode getAncestor(io.flutter.util.Predicate)
androidx.activity.ComponentActivity: void access$addObserverForBackInvoker(androidx.activity.ComponentActivity,androidx.activity.OnBackPressedDispatcher)
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetLeft()
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: TextInputChannel$InputType(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType,boolean,boolean)
io.flutter.plugin.common.ErrorLogResult: void notImplemented()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getKeys$prefs$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverAware: void onDetachedFromBroadcastReceiver()
androidx.activity.OnBackPressedDispatcher$Api33Impl: void registerOnBackInvokedCallback(java.lang.Object,int,java.lang.Object)
io.flutter.plugins.urllauncher.Messages$BrowserOptions: java.util.ArrayList toList()
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityPaused(android.app.Activity)
androidx.core.app.ComponentActivity: boolean superDispatchKeyEvent(android.view.KeyEvent)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder dartEntrypoint(java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel: void postMessage$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void requestDartDeferredLibrary(int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setScaleY(float)
io.flutter.embedding.engine.loader.ResourceExtractor: java.lang.String checkTimestamp(java.io.File,android.content.pm.PackageManager,java.lang.String)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder appBundlePath(java.lang.String)
org.chromium.support_lib_boundary.WebViewRendererBoundaryInterface: boolean terminate()
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.view.TextureRegistry getTextureRegistry()
io.flutter.view.TextureRegistry$SurfaceProducer$Callback: void onSurfaceCreated()
io.flutter.plugin.common.BinaryMessenger$-CC: void $default$enableBufferingIncomingMessages(io.flutter.plugin.common.BinaryMessenger)
io.flutter.embedding.android.FlutterSurfaceView$2: void onFlutterUiNoLongerDisplayed()
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getCollapseContentDescription()
io.flutter.plugin.common.BinaryMessenger: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
io.flutter.plugin.platform.PlatformViewWrapper$1: PlatformViewWrapper$1(io.flutter.plugin.platform.PlatformViewWrapper,android.view.View$OnFocusChangeListener)
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: int getWidth()
io.flutter.plugins.webviewflutter.PigeonApiWebView: void loadUrl(android.webkit.WebView,java.lang.String,java.util.Map)
io.flutter.embedding.engine.FlutterEngineGroup: io.flutter.embedding.engine.FlutterEngine createEngine(android.content.Context,io.flutter.plugin.platform.PlatformViewsController,boolean,boolean)
io.flutter.app.FlutterFragmentActivity: void onPause()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.lang.String lookupKeyForAsset(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$TextureFinalizerRunnable: void run()
io.flutter.plugins.webviewflutter.WebResourceRequestProxyApi: java.lang.String url(android.webkit.WebResourceRequest)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onHideCustomView(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,kotlin.jvm.functions.Function1)
io.flutter.app.FlutterActivityDelegate$1$1: FlutterActivityDelegate$1$1(io.flutter.app.FlutterActivityDelegate$1)
io.flutter.plugins.imagepicker.ImagePickerDelegate$1: boolean needRequestCameraPermission()
io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder: io.flutter.embedding.android.FlutterFragmentActivity$CachedEngineIntentBuilder backgroundMode(io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode)
io.flutter.embedding.android.FlutterImageView: FlutterImageView(android.content.Context)
androidx.fragment.app.Fragment: boolean isVisible()
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setTextZoom(android.webkit.WebSettings,long)
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi$-CC: void setUp(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.urllauncher.Messages$UrlLauncherApi)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void setMinDurationBetweenContentChangeMillis(android.view.accessibility.AccessibilityNodeInfo,long)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi: void setSynchronousReturnValueForOnConsoleMessage(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,boolean)
io.flutter.plugins.sharedpreferences.StringListResult: io.flutter.plugins.sharedpreferences.StringListLookupResultType component2()
io.flutter.plugins.webviewflutter.PigeonApiCookieManager: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2: SharedPreferencesPlugin$getBool$1$invokeSuspend$$inlined$map$1$2(kotlinx.coroutines.flow.FlowCollector,androidx.datastore.preferences.core.Preferences$Key)
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions copy$default(io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions,java.lang.String,boolean,int,java.lang.Object)
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.embedding.engine.FlutterEngineGroup getEngineGroup()
io.flutter.plugin.editing.SpellCheckPlugin: void initiateSpellCheck(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.webviewflutter.WebResourceErrorProxyApi: java.lang.String description(android.webkit.WebResourceError)
io.flutter.plugins.imagepicker.ImagePickerDelegate: boolean setPendingOptionsAndResult(io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions,io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions,io.flutter.plugins.imagepicker.Messages$Result)
io.flutter.embedding.engine.plugins.FlutterPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.view.FlutterView: boolean hasRenderedFirstFrame()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void touch(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$402(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.View)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreFling(android.view.View,float,float)
io.flutter.plugin.platform.VirtualDisplayController: void resetSurface()
io.flutter.plugin.platform.PlatformView: void onInputConnectionLocked()
androidx.core.view.ViewCompat$Api21Impl: boolean isImportantForAccessibility(android.view.View)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void hide()
io.flutter.embedding.engine.FlutterJNI: java.lang.String getVMServiceUri()
io.flutter.plugin.platform.PlatformPlugin: void setClipboardData(java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry: boolean hasPlugin(java.lang.String)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: java.lang.String getUniqueId(android.view.accessibility.AccessibilityNodeInfo)
androidx.activity.ComponentActivity: void onBackPressed()
io.flutter.embedding.android.KeyboardMap$KeyPair: KeyboardMap$KeyPair(long,long)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onJsConfirm(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,android.webkit.WebView,java.lang.String,java.lang.String,kotlin.jvm.functions.Function1)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getDouble$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.view.AccessibilityBridge: boolean performAction(int,int,android.os.Bundle)
io.flutter.view.AccessibilityBridge$1: void onFocus(int)
io.flutter.embedding.android.FlutterSurfaceView: void changeSurfaceSize(int,int)
io.flutter.plugin.platform.VirtualDisplayController: void resize31(android.view.View,int,int,java.lang.Runnable)
io.flutter.plugins.webviewflutter.PigeonApiCookieManager$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiCookieManager)
io.flutter.embedding.engine.FlutterShellArgs: FlutterShellArgs(java.util.List)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiFileChooserParams getPigeonApiFileChooserParams()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityStopped(android.app.Activity)
io.flutter.plugin.editing.TextEditingDelta: int getNewComposingEnd()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean isAttachedToBroadcastReceiver()
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: VirtualDisplayController$OneTimeOnDrawListener(android.view.View,java.lang.Runnable)
io.flutter.plugin.platform.PlatformViewsController$1: void onTouch(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: void loadDartLibrary(int,java.lang.String)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalType: io.flutter.plugins.imagepicker.Messages$CacheRetrievalType valueOf(java.lang.String)
io.flutter.plugins.imagepicker.ImageResizer: androidx.core.util.SizeFCompat readFileDimensions(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeNotifyLowMemoryWarning(long)
io.flutter.plugin.platform.VirtualDisplayController$2: void onViewAttachedToWindow(android.view.View)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void unsetOnDescendantFocusChangeListener()
androidx.activity.ComponentActivity: void addOnNewIntentListener(androidx.core.util.Consumer)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: AccessibilityBridge$AccessibilityFeature(java.lang.String,int,int)
io.flutter.embedding.engine.dart.DartMessenger: void handleMessageFromDart(java.lang.String,java.nio.ByteBuffer,int,long)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] $values()
androidx.fragment.app.FragmentContainerView: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)
io.flutter.plugin.platform.AccessibilityEventsDelegate: AccessibilityEventsDelegate()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()
io.flutter.util.TraceSection: void close()
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: void destroy()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: PlatformChannel$SoundType(java.lang.String,int,java.lang.String)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceError: PigeonApiWebResourceError(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
androidx.core.view.WindowInsetsCompat$Impl: boolean equals(java.lang.Object)
io.flutter.plugins.webviewflutter.PigeonApiWebSettings: void setAllowContentAccess(android.webkit.WebSettings,boolean)
io.flutter.plugins.webviewflutter.R: R()
io.flutter.plugin.editing.TextInputPlugin: void setTextInputEditingState(android.view.View,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterView$ZeroSides calculateShouldZeroSides()
io.flutter.view.FlutterView: void send(java.lang.String,java.nio.ByteBuffer)
io.flutter.plugins.sharedpreferences.StringListLookupResultType$Companion: StringListLookupResultType$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder shouldAutomaticallyHandleOnBackPressed(boolean)
io.flutter.plugins.sharedpreferences.StringListResult: java.lang.String component1()
androidx.fragment.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)
io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener: void onFlutterEngineDetachedFromFlutterView()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1$1: SharedPreferencesPlugin$setBool$1$1(androidx.datastore.preferences.core.Preferences$Key,boolean,kotlin.coroutines.Continuation)
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityPaneTitle(android.view.View,java.lang.CharSequence)
io.flutter.plugins.imagepicker.Messages$GeneralOptions: java.lang.Boolean getUsePhotoPicker()
io.flutter.plugins.imagepicker.Messages$GeneralOptions$Builder: io.flutter.plugins.imagepicker.Messages$GeneralOptions build()
io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue: java.util.concurrent.ConcurrentLinkedQueue access$200(io.flutter.embedding.engine.systemchannels.SettingsChannel$ConfigurationQueue)
io.flutter.plugins.webviewflutter.PigeonApiCookieManager$Companion: void setUpMessageHandlers$lambda$6$lambda$5(io.flutter.plugins.webviewflutter.PigeonApiCookieManager,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.view.AccessibilityBridge$4: AccessibilityBridge$4(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityManager)
io.flutter.embedding.engine.dart.DartMessenger$ConcurrentTaskQueue: void dispatch(java.lang.Runnable)
androidx.fragment.app.Fragment: boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)
io.flutter.embedding.android.FlutterActivity: void onUserLeaveHint()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
io.flutter.plugins.webviewflutter.FlutterViewFactory: io.flutter.plugin.platform.PlatformView create(android.content.Context,int,java.lang.Object)
io.flutter.plugins.imagepicker.ExifDataCopier: ExifDataCopier()
io.flutter.plugins.webviewflutter.WebViewProxyApi: void setWebViewClient(android.webkit.WebView,android.webkit.WebViewClient)
androidx.appcompat.widget.SwitchCompat: java.lang.CharSequence getTextOn()
io.flutter.app.FlutterPluginRegistry: void detach()
io.flutter.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: EventChannel$IncomingStreamRequestHandler$EventSinkImplementation(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler)
androidx.appcompat.widget.AppCompatTextView: void setAutoSizeTextTypeWithDefaults(int)
androidx.appcompat.widget.LinearLayoutCompat: void setVerticalGravity(int)
io.flutter.embedding.android.FlutterTextureView: void detachFromRenderer()
io.flutter.embedding.android.FlutterFragment: void detachFromFlutterEngine()
io.flutter.app.FlutterFragmentActivity: void onLowMemory()
io.flutter.embedding.engine.systemchannels.TextInputChannel: java.util.HashMap createEditingDeltaJSON(java.util.ArrayList)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType[] values()
io.flutter.plugin.platform.SingleViewPresentation$ImmContext: SingleViewPresentation$ImmContext(android.content.Context,android.view.inputmethod.InputMethodManager)
io.flutter.embedding.engine.FlutterEngineGroup$Options: io.flutter.plugin.platform.PlatformViewsController getPlatformViewsController()
androidx.core.content.FileProvider: java.lang.String access$000(java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.lang.Long getInt(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.core.widget.EdgeEffectCompat$Api21Impl: void onPull(android.widget.EdgeEffect,float,float)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getTappableElementInsets()
io.flutter.embedding.engine.systemchannels.SpellCheckChannel$SpellCheckMethodHandler: void initiateSpellCheck(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void handleCaptureVideoResult(int)
androidx.activity.ComponentActivity: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.view.AccessibilityBridge: void sendAccessibilityEvent(int,int)
androidx.appcompat.widget.SwitchCompat: int getThumbOffset()
io.flutter.embedding.engine.FlutterEngine: io.flutter.plugin.platform.PlatformViewsController getPlatformViewsController()
androidx.core.app.ActivityCompat$Api31Impl: boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String)
io.flutter.embedding.android.FlutterActivity: boolean shouldDispatchAppLifecycleState()
io.flutter.embedding.engine.FlutterJNI: void detachFromNativeAndReleaseResources()
androidx.core.widget.NestedScrollView: void setOnScrollChangeListener(androidx.core.widget.NestedScrollView$OnScrollChangeListener)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void pruneImageReaderQueue()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1$invokeSuspend$$inlined$map$1: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager: io.flutter.plugins.webviewflutter.FlutterAssetManager instance()
io.flutter.view.AccessibilityBridge$SemanticsNode: void collectRoutes(java.util.List)
androidx.fragment.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)
io.flutter.FlutterInjector: io.flutter.embedding.engine.loader.FlutterLoader flutterLoader()
io.flutter.plugin.text.ProcessTextPlugin: void cacheResolveInfos()
io.flutter.plugin.editing.ListenableEditingState: int getComposingStart()
androidx.core.os.BundleCompat$Api33Impl: java.io.Serializable getSerializable(android.os.Bundle,java.lang.String,java.lang.Class)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: void setReturnValueForOnJsConfirm(boolean)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String)
org.chromium.support_lib_boundary.ProfileBoundaryInterface: android.webkit.WebStorage getWebStorage()
io.flutter.view.FlutterView: boolean onHoverEvent(android.view.MotionEvent)
io.flutter.app.FlutterActivity: void onWindowFocusChanged(boolean)
io.flutter.view.FlutterView: void popRoute()
io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager: void installDeferredComponent(int,java.lang.String)
androidx.fragment.app.Fragment: java.lang.Object getReturnTransition()
androidx.appcompat.view.menu.ListMenuItemView: android.view.LayoutInflater getInflater()
io.flutter.embedding.engine.FlutterEngine: FlutterEngine(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterJNI)
io.flutter.app.FlutterActivityDelegate: void onStop()
io.flutter.view.AccessibilityBridge: void setBoldTextFlag()
io.flutter.plugins.webviewflutter.CookieManagerProxyApi: void setAcceptThirdPartyCookies(android.webkit.CookieManager,android.webkit.WebView,boolean)
androidx.fragment.app.Fragment: void performCreate(android.os.Bundle)
io.flutter.embedding.engine.FlutterJNI: void nativeSetAccessibilityFeatures(long,int)
io.flutter.util.TraceSection: void beginAsyncSection(java.lang.String,int)
io.flutter.plugin.editing.TextEditingDelta: TextEditingDelta(java.lang.CharSequence,int,int,java.lang.CharSequence,int,int,int,int)
io.flutter.embedding.android.FlutterFragmentActivity: boolean shouldDestroyEngineWithHost()
androidx.fragment.app.Fragment: boolean performPrepareOptionsMenu(android.view.Menu)
io.flutter.plugin.platform.PlatformViewsController: boolean checkInputConnectionProxy(android.view.View)
io.flutter.view.FlutterNativeView: java.lang.String getObservatoryUri()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean sendKeyEvent(android.view.KeyEvent)
io.flutter.embedding.engine.loader.ResourceExtractor$1: boolean accept(java.io.File,java.lang.String)
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment build()
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetLeft(android.view.DisplayCutout)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void handleChooseMultiImageResult(int,android.content.Intent)
io.flutter.embedding.engine.plugins.contentprovider.ContentProviderAware: void onAttachedToContentProvider(io.flutter.embedding.engine.plugins.contentprovider.ContentProviderPluginBinding)
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate: void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: boolean attachToEngineAutomatically()
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityEvent access$200(io.flutter.view.AccessibilityBridge,int,int)
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformView getView()
io.flutter.embedding.engine.plugins.service.ServicePluginBinding: android.app.Service getService()
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager$FeatureInstallStateUpdatedListener: void onStateUpdate(java.lang.Object)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebStorage getPigeonApiWebStorage()
androidx.activity.ComponentActivity: void access$onBackPressed$s1027565324(androidx.activity.ComponentActivity)
io.flutter.plugin.common.JSONMethodCodec: java.lang.Object decodeEnvelope(java.nio.ByteBuffer)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: io.flutter.plugins.imagepicker.Messages$CacheRetrievalType getType()
io.flutter.plugins.webviewflutter.PigeonApiWebView: boolean canGoForward(android.webkit.WebView)
io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient: void onConsoleMessage(io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl,android.webkit.ConsoleMessage,kotlin.jvm.functions.Function1)
androidx.appcompat.view.menu.ExpandedMenuView: int getWindowAnimations()
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedFling(android.view.View,float,float,boolean)
io.flutter.plugin.platform.SingleViewPresentation$ImmContext: SingleViewPresentation$ImmContext(android.content.Context)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setPlatformBrightness(io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness)
io.flutter.view.FlutterView: void assertAttached()
io.flutter.plugin.platform.PlatformViewRenderTarget: int getHeight()
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void setOnTrimMemoryListener(io.flutter.view.TextureRegistry$OnTrimMemoryListener)
androidx.window.core.VerificationMode: androidx.window.core.VerificationMode valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.ProcessTextChannel$ProcessTextMethodHandler: java.util.Map queryTextActions()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onPostResume()
io.flutter.embedding.android.FlutterActivity: java.lang.String getDartEntrypointLibraryUri()
androidx.core.view.WindowInsetsCompat$Impl30: WindowInsetsCompat$Impl30(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
io.flutter.plugins.imagepicker.Messages$SourceSpecification: boolean equals(java.lang.Object)
androidx.fragment.app.Fragment: androidx.loader.app.LoaderManager getLoaderManager()
io.flutter.embedding.android.FlutterActivity: android.content.Intent createDefaultIntent(android.content.Context)
io.flutter.embedding.engine.FlutterEngine$1: FlutterEngine$1(io.flutter.embedding.engine.FlutterEngine)
io.flutter.plugins.webviewflutter.WebViewProxyApi: void loadData(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$6000(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.FlutterNativeView$1: void onFlutterUiDisplayed()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$6300(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setStableInsets(androidx.core.graphics.Insets)
io.flutter.plugins.webviewflutter.FileChooserMode: io.flutter.plugins.webviewflutter.FileChooserMode valueOf(java.lang.String)
io.flutter.plugins.webviewflutter.AndroidWebKitError: java.lang.String getMessage()
androidx.core.view.ViewCompat$Api21Impl: float getZ(android.view.View)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: ShimPluginRegistry$ShimRegistrarAggregate(io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$1)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientCompatImpl: kotlin.Unit lambda$onPageFinished$2(kotlin.Result)
kotlinx.coroutines.android.AndroidExceptionPreHandler: AndroidExceptionPreHandler()
io.flutter.view.TextureRegistry$SurfaceProducer: void setCallback(io.flutter.view.TextureRegistry$SurfaceProducer$Callback)
io.flutter.plugin.platform.VirtualDisplayController: int getRenderTargetHeight()
org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertSettings(android.webkit.WebSettings)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: PlatformChannel$HapticFeedbackType(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.plugins.activity.ActivityControlSurface: void attachToActivity(io.flutter.embedding.android.ExclusiveAppComponent,androidx.lifecycle.Lifecycle)
androidx.window.layout.util.ContextCompatHelperApi30: androidx.core.view.WindowInsetsCompat currentWindowInsets(android.content.Context)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setDisplayMetrics(android.util.DisplayMetrics)
io.flutter.plugin.editing.InputConnectionAdaptor: byte[] readStreamFully(java.io.InputStream,int)
io.flutter.embedding.engine.FlutterEngineGroup$Options: android.content.Context getContext()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void attachToGLContext(int)
io.flutter.plugins.webviewflutter.ViewProxyApi: io.flutter.plugins.webviewflutter.WebViewPoint getScrollPosition(android.view.View)
io.flutter.plugins.webviewflutter.PigeonApiView$Companion: PigeonApiView$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.view.AccessibilityBridge: io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$500(io.flutter.view.AccessibilityBridge)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void release()
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: void postMessageToMainFrame(java.lang.reflect.InvocationHandler,android.net.Uri)
io.flutter.app.FlutterActivityEvents: void onStart()
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: android.media.ImageReader createImageReader33()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean deleteSurroundingTextInCodePoints(int,int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: PlatformChannel$ClipboardContentFormat(java.lang.String,int,java.lang.String)
io.flutter.view.VsyncWaiter: io.flutter.view.VsyncWaiter getInstance(float,io.flutter.embedding.engine.FlutterJNI)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setInt$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.plugin.common.EventChannel$EventSink: void endOfStream()
androidx.appcompat.widget.ActionBarOverlayLayout: void setUiOptions(int)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getInt$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
androidx.appcompat.widget.SwitchCompat: int getSwitchPadding()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getPivotY()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineContentProviderPluginBinding: android.content.ContentProvider getContentProvider()
io.flutter.plugins.imagepicker.ImagePickerDelegate: boolean needRequestCameraPermission()
io.flutter.app.FlutterActivity: void onBackPressed()
io.flutter.embedding.android.FlutterFragmentActivity: void onActivityResult(int,int,android.content.Intent)
io.flutter.embedding.engine.renderer.FlutterRenderer: void setViewportMetrics(io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics)
androidx.fragment.app.Fragment: void onAttachFragment(androidx.fragment.app.Fragment)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDeprecatedStringList$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.plugin.platform.PlatformViewRenderTarget: void release()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1$1: java.lang.Object invoke(androidx.datastore.preferences.core.MutablePreferences,kotlin.coroutines.Continuation)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: void setUp$lambda$16$lambda$15(io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.core.view.ViewCompat$Api29Impl: void setContentCaptureSession(android.view.View,androidx.core.view.contentcapture.ContentCaptureSessionCompat)
androidx.activity.Api34Impl: float touchX(android.window.BackEvent)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$SecureWebChromeClient: void setWebViewClient(android.webkit.WebViewClient)
io.flutter.plugins.urllauncher.Messages$UrlLauncherApi: java.lang.Boolean openUrlInApp(java.lang.String,java.lang.Boolean,io.flutter.plugins.urllauncher.Messages$WebViewOptions,io.flutter.plugins.urllauncher.Messages$BrowserOptions)
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode[] $values()
io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions$Builder: io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions build()
io.flutter.embedding.engine.plugins.activity.ActivityAware: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.plugin.platform.PlatformViewWrapper: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)
androidx.fragment.app.Fragment: void performMultiWindowModeChanged(boolean)
io.flutter.embedding.android.FlutterView$2: void onChange(boolean)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void handleChooseVideoResult(int,android.content.Intent)
io.flutter.app.FlutterApplication: void onCreate()
io.flutter.embedding.android.FlutterView$1: FlutterView$1(io.flutter.embedding.android.FlutterView)
io.flutter.embedding.android.MotionEventTracker$MotionEventId: io.flutter.embedding.android.MotionEventTracker$MotionEventId createUnique()
io.flutter.plugins.imagepicker.Messages$GeneralOptions$Builder: io.flutter.plugins.imagepicker.Messages$GeneralOptions$Builder setLimit(java.lang.Long)
androidx.appcompat.widget.ActionMenuView: android.view.Menu getMenu()
androidx.datastore.preferences.protobuf.WireFormat$FieldType: androidx.datastore.preferences.protobuf.WireFormat$FieldType[] values()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: FlutterMutatorsStack$FlutterMutator(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Matrix)
io.flutter.plugin.common.BinaryCodec: BinaryCodec()
androidx.fragment.app.FragmentActivity: void onAttachFragment(androidx.fragment.app.Fragment)
io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager: PigeonApiFlutterAssetManager(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar)
androidx.fragment.app.Fragment: boolean isMenuVisible()
androidx.appcompat.widget.FitWindowsFrameLayout: void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener)
io.flutter.plugin.common.StandardMessageCodec: int readSize(java.nio.ByteBuffer)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: SharedPreferencesPlugin()
io.flutter.embedding.engine.FlutterJNI: void ensureRunningOnMainThread()
androidx.activity.ComponentActivity: void startActivityForResult(android.content.Intent,int)
io.flutter.plugins.webviewflutter.PigeonApiWebResourceResponse: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions: boolean equals(java.lang.Object)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setEncodedStringList$1: java.lang.Object invokeSuspend(java.lang.Object)
androidx.activity.ComponentActivity: void setContentView(int)
io.flutter.view.FlutterMain$Settings: void setLogTag(java.lang.String)
io.flutter.view.FlutterView: void sendUserPlatformSettingsToDart()
io.flutter.embedding.engine.FlutterEngine: java.util.Set access$000(io.flutter.embedding.engine.FlutterEngine)
androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)
io.flutter.plugin.platform.PlatformViewsController: android.view.MotionEvent$PointerProperties parsePointerProperties(java.lang.Object)
io.flutter.plugins.imagepicker.Messages$Result: void success(java.lang.Object)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiFlutterAssetManager getPigeonApiFlutterAssetManager()
kotlinx.coroutines.selects.TrySelectDetailedResult: kotlinx.coroutines.selects.TrySelectDetailedResult[] values()
io.flutter.embedding.engine.systemchannels.KeyEventChannel: KeyEventChannel(io.flutter.plugin.common.BinaryMessenger)
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: HiddenLifecycleReference(androidx.lifecycle.Lifecycle)
io.flutter.plugin.platform.PlatformViewsController: void lambda$initializePlatformViewIfNeeded$2(int,android.view.View,boolean)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addViewDestroyListener(io.flutter.plugin.common.PluginRegistry$ViewDestroyListener)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: java.lang.String maybeGetInitialRouteFromIntent(android.content.Intent)
io.flutter.util.ViewUtils: boolean traverseHierarchy(android.view.View,io.flutter.util.ViewUtils$ViewVisitor)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: void setContext(android.content.Context)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setString$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.plugins.webviewflutter.JavaScriptChannelProxyApi: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
io.flutter.embedding.engine.renderer.FlutterRenderer$1: FlutterRenderer$1(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.embedding.engine.FlutterOverlaySurface: int getId()
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long getRecordSourceNodeId(android.view.accessibility.AccessibilityRecord)
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: void setJavaScriptEnabled(android.webkit.WebSettings,boolean)
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getFragmentManager()
io.flutter.embedding.engine.plugins.activity.ActivityAware: void onDetachedFromActivity()
io.flutter.plugins.webviewflutter.PigeonApiConsoleMessage: java.lang.String message(android.webkit.ConsoleMessage)
androidx.appcompat.view.menu.ActionMenuItemView: androidx.appcompat.view.menu.MenuItemImpl getItemData()
io.flutter.embedding.android.FlutterFragmentActivity: android.content.Intent createDefaultIntent(android.content.Context)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void setPreferredOrientations(int)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler: void onTouch(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onActivityResult(int,int,android.content.Intent)
androidx.core.view.WindowInsetsCompat$Impl: int hashCode()
io.flutter.embedding.android.FlutterSurfaceView: void disconnectSurfaceFromRenderer()
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1: AccessibilityChannel$1(io.flutter.embedding.engine.systemchannels.AccessibilityChannel)
androidx.activity.ComponentActivity: void addOnPictureInPictureModeChangedListener(androidx.core.util.Consumer)
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: void onActivityResumed(android.app.Activity)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.CharSequence getValue()
io.flutter.plugin.editing.InputConnectionAdaptor: void didChangeEditingState(boolean,boolean,boolean)
io.flutter.plugin.common.BinaryMessenger$BinaryReply: void reply(java.nio.ByteBuffer)
io.flutter.view.AccessibilityBridge: void release()
io.flutter.view.FlutterView: boolean onGenericMotionEvent(android.view.MotionEvent)
io.flutter.embedding.engine.systemchannels.RestorationChannel$2: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State[] values()
io.flutter.plugin.editing.FlutterTextUtils: boolean isEmojiModifier(int)
io.flutter.embedding.android.KeyboardManager$ViewDelegate: void redispatch(android.view.KeyEvent)
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityHeading(android.view.View,boolean)
io.flutter.embedding.engine.loader.ResourceExtractor: long getVersionCode(android.content.pm.PackageInfo)
androidx.appcompat.widget.ViewStubCompat: ViewStubCompat(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap nativeGetBitmap(long)
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.view.TextureRegistry textures()
io.flutter.plugin.platform.VirtualDisplayController: int getRenderTargetWidth()
kotlinx.coroutines.android.AndroidExceptionPreHandler: void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)
io.flutter.plugins.webviewflutter.FlutterViewFactory$1: void dispose()
org.chromium.support_lib_boundary.StaticsBoundaryInterface: void setSafeBrowsingWhitelist(java.util.List,android.webkit.ValueCallback)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalResult: int hashCode()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: boolean getAllowContentAccess()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathEnd(float)
io.flutter.view.FlutterView: android.view.PointerIcon getSystemPointerIcon(int)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$-CC: void setUp(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugins.imagepicker.Messages$ImagePickerApi)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1$1: java.lang.Object invokeSuspend(java.lang.Object)
androidx.core.graphics.drawable.IconCompat$Api28Impl: java.lang.String getResPackage(java.lang.Object)
io.flutter.plugin.platform.VirtualDisplayController: void onFlutterViewDetached()
io.flutter.plugins.webviewflutter.PigeonApiWebView: void onScrollChanged(android.webkit.WebView,long,long,long,long,kotlin.jvm.functions.Function1)
io.flutter.plugins.webviewflutter.WebResourceRequestProxyApi: boolean isForMainFrame(android.webkit.WebResourceRequest)
androidx.preference.internal.PreferenceImageView: PreferenceImageView(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.android.FlutterTextureView: FlutterTextureView(android.content.Context,android.util.AttributeSet)
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()
io.flutter.plugins.webviewflutter.PermissionRequestProxyApi: void grant(android.webkit.PermissionRequest,java.util.List)
io.flutter.view.FlutterView: void releaseAccessibilityNodeProvider()
io.flutter.view.FlutterView: io.flutter.view.TextureRegistry$SurfaceProducer createSurfaceProducer()
io.flutter.app.FlutterActivityDelegate$1: void onFirstFrame()
io.flutter.embedding.engine.dart.DartMessenger$DartMessengerTaskQueue: void dispatch(java.lang.Runnable)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$2000(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag)
io.flutter.app.FlutterActivityDelegate: android.view.View createLaunchView()
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState: ImagePickerPlugin$ActivityState(io.flutter.plugins.imagepicker.ImagePickerPlugin,android.app.Application,android.app.Activity,io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.imagepicker.Messages$ImagePickerApi,io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType fromValue(java.lang.String)
androidx.core.view.ViewCompat$Api26Impl: int getImportantForAutofill(android.view.View)
io.flutter.plugins.sharedpreferences.StringListLookupResultType$Companion: io.flutter.plugins.sharedpreferences.StringListLookupResultType ofRaw(int)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError: java.lang.String getMessage()
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$3100(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.FlutterView: void enableBufferingIncomingMessages()
androidx.datastore.preferences.protobuf.ProtoSyntax: androidx.datastore.preferences.protobuf.ProtoSyntax[] values()
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedHeightMajor()
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setTooltipText(android.view.MenuItem,java.lang.CharSequence)
io.flutter.plugin.common.MethodCodec: java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object)
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: java.lang.String translateAutofillHint(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numImages()
io.flutter.embedding.engine.FlutterJNI: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
io.flutter.app.FlutterActivity: void onNewIntent(android.content.Intent)
io.flutter.plugins.imagepicker.Messages$GeneralOptions: Messages$GeneralOptions()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$DefaultFlutterAssets: java.lang.String getAssetFilePathBySubpath(java.lang.String,java.lang.String)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addWindowFocusChangedListener(io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void waitOnFence(android.media.Image)
io.flutter.app.FlutterActivityDelegate: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.CharSequence getHint()
io.flutter.plugins.webviewflutter.WebSettingsProxyApi: WebSettingsProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.app.FlutterActivityDelegate: android.view.View access$000(io.flutter.app.FlutterActivityDelegate)
io.flutter.util.PathUtils: java.lang.String getFilesDir(android.content.Context)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void chooseMultiImageFromGallery(io.flutter.plugins.imagepicker.Messages$ImageSelectionOptions,boolean,int,io.flutter.plugins.imagepicker.Messages$Result)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void setUpFlutterEngine()
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget: int getHeight()
io.flutter.plugins.imagepicker.ImagePickerDelegate: void launchPickImageFromGalleryIntent(java.lang.Boolean)
io.flutter.plugins.webviewflutter.WebViewProxyApi: void reload(android.webkit.WebView)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$readAllKeys$$inlined$map$1$2$1: java.lang.Object invokeSuspend(java.lang.Object)
androidx.appcompat.widget.LinearLayoutCompat: void setShowDividers(int)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: java.lang.Boolean getBool(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.plugin.platform.PlatformViewsController: void unlockInputConnection(io.flutter.plugin.platform.VirtualDisplayController)
androidx.appcompat.widget.SearchView: void setImeOptions(int)
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.view.TextureRegistry$SurfaceProducer createSurfaceProducer()
androidx.fragment.app.Fragment: void performDestroy()
io.flutter.app.FlutterActivityDelegate$1: FlutterActivityDelegate$1(io.flutter.app.FlutterActivityDelegate)
io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager: void setDeferredComponentChannel(io.flutter.embedding.engine.systemchannels.DeferredComponentChannel)
io.flutter.plugin.common.JSONMessageCodec: java.nio.ByteBuffer encodeMessage(java.lang.Object)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError$Builder: io.flutter.plugins.imagepicker.Messages$CacheRetrievalError$Builder setCode(java.lang.String)
io.flutter.plugin.platform.PlatformViewsController: void attachTextInputPlugin(io.flutter.plugin.editing.TextInputPlugin)
io.flutter.view.AccessibilityBridge$SemanticsNode: android.graphics.Rect access$1700(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap decodeImage(java.nio.ByteBuffer,long)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void onDetachedFromActivityForConfigChanges()
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void setSystemUiChangeListener()
io.flutter.embedding.engine.FlutterJNI: void onDisplayOverlaySurface(int,int,int,int,int)
io.flutter.plugin.platform.SingleViewFakeWindowViewGroup: int atMost(int)
io.flutter.plugins.webviewflutter.PigeonApiPermissionRequest: void deny(android.webkit.PermissionRequest)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getMandatorySystemGestureInsets()
androidx.fragment.app.FragmentActivity: void onStateNotSaved()
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: android.webkit.WebViewClient pigeon_defaultConstructor()
io.flutter.embedding.engine.FlutterEngine: io.flutter.plugin.platform.PlatformViewsController access$100(io.flutter.embedding.engine.FlutterEngine)
androidx.lifecycle.ProcessLifecycleInitializer: ProcessLifecycleInitializer()
androidx.fragment.app.Fragment: void setReturnTransition(java.lang.Object)
io.flutter.embedding.android.FlutterFragment$CachedEngineFragmentBuilder: FlutterFragment$CachedEngineFragmentBuilder(java.lang.String)
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: LifecycleChannel$AppLifecycleState(java.lang.String,int)
io.flutter.view.FlutterView: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
io.flutter.plugin.editing.TextEditingDelta: TextEditingDelta(java.lang.CharSequence,int,int,int,int)
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageEmptyResponseCallback(long,int)
io.flutter.embedding.android.FlutterFragment$1: FlutterFragment$1(io.flutter.embedding.android.FlutterFragment)
androidx.core.view.ViewCompat$Api21Impl: float getTranslationZ(android.view.View)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void onNewIntent(android.content.Intent)
androidx.fragment.app.Fragment: void onDestroyOptionsMenu()
androidx.activity.ComponentActivity: void getOnBackPressedDispatcher$annotations()
org.chromium.support_lib_boundary.DropDataContentProviderBoundaryInterface: java.lang.String getType(android.net.Uri)
androidx.core.view.ViewCompat$Api30Impl: boolean isImportantForContentCapture(android.view.View)
io.flutter.embedding.android.FlutterSurfaceView: void detachFromRenderer()
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateDisplayMetrics(long)
io.flutter.plugin.editing.TextInputPlugin: void hideTextInput(android.view.View)
io.flutter.view.AccessibilityBridge: void reset()
io.flutter.plugin.common.BasicMessageChannel: void setWarnsOnChannelOverflow(boolean)
io.flutter.plugins.webviewflutter.PigeonApiWebViewPoint: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
androidx.fragment.app.Fragment: java.lang.Object getEnterTransition()
io.flutter.plugins.webviewflutter.PigeonApiView: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
androidx.activity.ComponentActivity: void onPictureInPictureModeChanged(boolean)
io.flutter.app.FlutterPlayStoreSplitApplication: FlutterPlayStoreSplitApplication()
io.flutter.plugin.platform.VirtualDisplayController$2: VirtualDisplayController$2(io.flutter.plugin.platform.VirtualDisplayController,android.view.View,java.lang.Runnable)
androidx.appcompat.widget.LinearLayoutCompat: void setOrientation(int)
androidx.core.content.ContextCompat$Api28Impl: java.util.concurrent.Executor getMainExecutor(android.content.Context)
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int,boolean)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture)
io.flutter.plugin.common.StringCodec: StringCodec()
androidx.appcompat.widget.SearchView: void setQuery(java.lang.CharSequence)
io.flutter.embedding.engine.plugins.broadcastreceiver.BroadcastReceiverControlSurface: void attachToBroadcastReceiver(android.content.BroadcastReceiver,androidx.lifecycle.Lifecycle)
io.flutter.plugin.platform.PlatformPlugin: void share(java.lang.String)
io.flutter.view.AccessibilityBridge$SemanticsNode: float access$5700(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.embedding.engine.FlutterJNI: void nativeLoadDartDeferredLibrary(long,int,java.lang.String[])
androidx.fragment.app.DefaultSpecialEffectsController$Api26Impl: void reverse(android.animation.AnimatorSet)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void addOnWindowFocusChangedListener(io.flutter.plugin.common.PluginRegistry$WindowFocusChangedListener)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getAll$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
io.flutter.plugins.webviewflutter.PigeonApiFileChooserParams: io.flutter.plugins.webviewflutter.FileChooserMode mode(android.webkit.WebChromeClient$FileChooserParams)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$002(io.flutter.view.AccessibilityBridge$SemanticsNode,int)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$6600(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$34$lambda$33(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugin.editing.TextInputPlugin: TextInputPlugin(android.view.View,io.flutter.embedding.engine.systemchannels.TextInputChannel,io.flutter.plugin.platform.PlatformViewsController)
io.flutter.plugin.platform.SingleViewWindowManager: android.view.Display getDefaultDisplay()
androidx.appcompat.widget.Toolbar: void setTitleTextColor(int)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
androidx.core.widget.TextViewCompat$Api23Impl: android.content.res.ColorStateList getCompoundDrawableTintList(android.widget.TextView)
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: void onActivityCreated(android.app.Activity,android.os.Bundle)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: kotlin.Unit lambda$onProgressChanged$0(kotlin.Result)
io.flutter.plugin.common.StringCodec: java.lang.Object decodeMessage(java.nio.ByteBuffer)
androidx.appcompat.widget.SwitchCompat: android.graphics.drawable.Drawable getTrackDrawable()
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: android.graphics.SurfaceTexture getSurfaceTexture()
io.flutter.plugin.editing.TextInputPlugin: void updateAutofillConfigurationIfNeeded(io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration)
androidx.activity.ComponentActivity: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int getWidth()
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityEvent createTextChangedEvent(int,java.lang.String,java.lang.String)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setUserAgentMetadataFromMap(java.util.Map)
io.flutter.plugin.platform.SurfaceTexturePlatformViewRenderTarget$1: void onTrimMemory(int)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean deleteSurroundingText(int,int)
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: android.content.Context context()
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setAlphabeticShortcut(android.view.MenuItem,char,int)
io.flutter.plugin.editing.TextInputPlugin: void showTextInput(android.view.View)
androidx.core.widget.ImageViewCompat$Api21Impl: void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)
io.flutter.plugin.editing.FlutterTextUtils: boolean isKeycapBase(int)
io.flutter.embedding.engine.loader.ResourceExtractor: io.flutter.embedding.engine.loader.ResourceExtractor start()
io.flutter.plugins.webviewflutter.PigeonApiConsoleMessage: io.flutter.plugins.webviewflutter.ConsoleMessageLevel level(android.webkit.ConsoleMessage)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long access$500(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo,int)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
io.flutter.plugin.editing.TextEditingDelta: int getNewSelectionStart()
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar: io.flutter.plugin.common.PluginRegistry$Registrar addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener)
io.flutter.plugins.webviewflutter.PigeonApiView$Companion: void setUpMessageHandlers$lambda$5$lambda$4(io.flutter.plugins.webviewflutter.PigeonApiView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setIconTintList(android.view.MenuItem,android.content.res.ColorStateList)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifier(int)
io.flutter.util.TraceSection: void end()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String)
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: BasicMessageChannel$IncomingMessageHandler(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler,io.flutter.plugin.common.BasicMessageChannel$1)
androidx.core.content.FileProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: android.app.Activity activity()
androidx.core.graphics.drawable.IconCompat: IconCompat()
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: void onActivityDestroyed(android.app.Activity)
io.flutter.embedding.android.FlutterActivity: boolean shouldDestroyEngineWithHost()
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle access$500(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject)
io.flutter.embedding.engine.FlutterShellArgs: FlutterShellArgs(java.lang.String[])
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: void logError(java.lang.String,java.lang.Throwable)
io.flutter.plugins.sharedpreferences.SharedPreferencesError: java.lang.String getCode()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setEncodedStringList$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.plugin.common.JSONMethodCodec: java.lang.Object unwrapNull(java.lang.Object)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$9(kotlin.Result)
io.flutter.plugins.webviewflutter.ResultCompat: kotlin.jvm.functions.Function1 asCompatCallback(kotlin.jvm.functions.Function1)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void removeAll()
io.flutter.embedding.engine.FlutterJNI: FlutterJNI()
io.flutter.plugin.common.BinaryMessenger$TaskQueueOptions: boolean getIsSerial()
io.flutter.plugins.webviewflutter.PigeonApiCookieManager: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: android.util.SparseIntArray access$100(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeAlpha(float)
io.flutter.plugins.sharedpreferences.ListEncoder: ListEncoder()
io.flutter.view.TextureRegistry$TextureEntry: long id()
io.flutter.plugins.imagepicker.FileUtils: FileUtils()
io.flutter.plugin.editing.TextInputPlugin$1: void finishAutofillContext(boolean)
io.flutter.embedding.engine.loader.FlutterLoader: java.util.concurrent.ExecutorService access$300(io.flutter.embedding.engine.loader.FlutterLoader)
androidx.appcompat.widget.SearchView: void setQueryRefinementEnabled(boolean)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: void notImplemented()
androidx.appcompat.widget.Toolbar: void setOnMenuItemClickListener(androidx.appcompat.widget.Toolbar$OnMenuItemClickListener)
io.flutter.plugins.webviewflutter.PigeonApiWebView: void setWebChromeClient(android.webkit.WebView,io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl)
androidx.core.os.BundleCompat$Api33Impl: java.lang.Object getParcelable(android.os.Bundle,java.lang.String,java.lang.Class)
io.flutter.embedding.engine.renderer.FlutterRenderer: boolean isSoftwareRenderingEnabled()
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.platform.PlatformViewRenderTarget makePlatformViewRenderTarget(io.flutter.view.TextureRegistry)
io.flutter.Log: Log()
io.flutter.plugin.editing.TextInputPlugin: void setPlatformViewTextInputClient(int,boolean)
kotlin.collections.AbstractMutableList: AbstractMutableList()
androidx.appcompat.widget.Toolbar: android.view.MenuInflater getMenuInflater()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: java.lang.Object readValueOfType(byte,java.nio.ByteBuffer)
io.flutter.plugins.webviewflutter.DownloadListenerProxyApi$DownloadListenerImpl: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)
org.chromium.support_lib_boundary.WebViewCookieManagerBoundaryInterface: java.util.List getCookieInfo(java.lang.String)
io.flutter.embedding.android.MotionEventTracker: io.flutter.embedding.android.MotionEventTracker$MotionEventId track(android.view.MotionEvent)
io.flutter.plugin.editing.ListenableEditingState: java.util.ArrayList extractBatchTextEditingDeltas()
io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding: void addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void finalize()
io.flutter.Log: void v(java.lang.String,java.lang.String)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.PlatformChannel getPlatformChannel()
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int)
androidx.appcompat.view.menu.ListMenuItemView: ListMenuItemView(android.content.Context,android.util.AttributeSet)
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: void resize(int,int)
io.flutter.plugins.imagepicker.ImageResizer: java.io.File createImageOnExternalDirectory(java.lang.String,android.graphics.Bitmap,int)
io.flutter.plugin.common.StandardMessageCodec: java.lang.Object readValueOfType(byte,java.nio.ByteBuffer)
io.flutter.plugins.sharedpreferences.SharedPreferencesBackend: java.lang.Boolean getBool(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.appcompat.widget.ActionBarContextView: java.lang.CharSequence getSubtitle()
io.flutter.embedding.android.FlutterActivity: void onSaveInstanceState(android.os.Bundle)
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription access$200(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject)
io.flutter.plugin.common.StandardMessageCodec: void writeFloat(java.io.ByteArrayOutputStream,float)
io.flutter.embedding.engine.loader.ApplicationInfoLoader: void parseDomainConfig(android.content.res.XmlResourceParser,org.json.JSONArray,boolean)
io.flutter.plugins.webviewflutter.CookieManagerProxyApi: void setCookie(android.webkit.CookieManager,java.lang.String,java.lang.String)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: ReportFragment$LifecycleCallbacks()
org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getServiceWorkerController()
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$-CC: io.flutter.plugin.common.MessageCodec getCodec()
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode access$7000(io.flutter.view.AccessibilityBridge,int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader: java.util.ArrayDeque access$900(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader)
androidx.fragment.app.Fragment: void performDestroyView()
io.flutter.plugins.webviewflutter.PigeonApiWebSettings$Companion: PigeonApiWebSettings$Companion()
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: void lambda$installDeferredComponent$0(java.lang.String,int,java.lang.Integer)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi$Companion: void setUpMessageHandlers$lambda$1$lambda$0(io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManager,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.fragment.app.Fragment: void startPostponedEnterTransition()
io.flutter.embedding.engine.plugins.activity.ActivityControlSurface: void onNewIntent(android.content.Intent)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi$-CC: void lambda$setUp$0(io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState: io.flutter.plugins.imagepicker.ImagePickerDelegate getDelegate()
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: void dispose()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPaused(android.app.Activity)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String)
io.flutter.embedding.engine.dart.DartMessenger$SerialTaskQueue: void dispatch(java.lang.Runnable)
io.flutter.plugins.webviewflutter.PigeonApiWebViewPoint: void pigeon_newInstance$lambda$0(kotlin.jvm.functions.Function1,java.lang.String,java.lang.Object)
io.flutter.plugin.platform.PlatformViewsController: void diposeAllViews()
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill fromJson(org.json.JSONObject)
io.flutter.app.FlutterActivityEvents: void onWindowFocusChanged(boolean)
androidx.preference.PreferenceCategory: PreferenceCategory(android.content.Context,android.util.AttributeSet)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$-CC: void lambda$setUp$1(io.flutter.plugins.imagepicker.Messages$ImagePickerApi,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setContentDescription(android.view.MenuItem,java.lang.CharSequence)
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetStart()
androidx.activity.ComponentActivity: java.lang.Object onRetainCustomNonConfigurationInstance()
io.flutter.app.FlutterActivity: boolean retainFlutterNativeView()
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi$Companion: AndroidWebkitLibraryPigeonInstanceManagerApi$Companion()
io.flutter.plugins.webviewflutter.WebViewPointProxyApi: long y(io.flutter.plugins.webviewflutter.WebViewPoint)
io.flutter.view.FlutterView: FlutterView(android.content.Context,android.util.AttributeSet,io.flutter.view.FlutterNativeView)
io.flutter.plugin.editing.SpellCheckPlugin: void performSpellCheck(java.lang.String,java.lang.String)
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: void reply(java.nio.ByteBuffer)
io.flutter.plugin.platform.PlatformViewsController: android.content.Context access$1500(io.flutter.plugin.platform.PlatformViewsController)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean shouldUpdate()
io.flutter.plugins.webviewflutter.PigeonApiWebViewClient: io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiRegistrar getPigeonRegistrar()
io.flutter.plugins.imagepicker.ImageResizer: java.lang.String resizeImageIfNeeded(java.lang.String,java.lang.Double,java.lang.Double,int)
androidx.activity.OnBackPressedCallback: void handleOnBackStarted(androidx.activity.BackEventCompat)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi$-CC: void setUp(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi)
androidx.fragment.app.Fragment: void postponeEnterTransition(long,java.util.concurrent.TimeUnit)
io.flutter.plugin.platform.PlatformViewWrapper: void setLayoutParams(android.widget.FrameLayout$LayoutParams)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap getBitmap()
androidx.fragment.app.Fragment: java.lang.String getTag()
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: ProxyApiRegistrar(io.flutter.plugin.common.BinaryMessenger,android.content.Context,io.flutter.plugins.webviewflutter.FlutterAssetManager)
io.flutter.plugin.platform.SingleViewFakeWindowViewGroup: void onMeasure(int,int)
io.flutter.plugins.webviewflutter.WebViewProxyApi$WebViewPlatformView: void onScrollChanged(int,int,int,int)
io.flutter.app.FlutterActivityEvents: void onPostResume()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: PlatformViewsChannel$PlatformViewCreationRequest(int,java.lang.String,double,double,double,double,int,java.nio.ByteBuffer)
androidx.fragment.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)
androidx.appcompat.widget.ActionBarOverlayLayout: void setIcon(android.graphics.drawable.Drawable)
io.flutter.plugin.platform.SingleViewWindowManager: void removeView(android.view.View)
io.flutter.plugins.webviewflutter.ResultCompat: boolean isSuccess()
kotlin.coroutines.jvm.internal.SuspendLambda: java.lang.String toString()
io.flutter.plugins.GeneratedPluginRegistrant: void registerWith(io.flutter.embedding.engine.FlutterEngine)
io.flutter.embedding.android.FlutterTextureView: android.view.Surface access$502(io.flutter.embedding.android.FlutterTextureView,android.view.Surface)
io.flutter.app.FlutterFragmentActivity: boolean hasPlugin(java.lang.String)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void chooseVideoFromGallery(io.flutter.plugins.imagepicker.Messages$VideoSelectionOptions,boolean,io.flutter.plugins.imagepicker.Messages$Result)
io.flutter.util.PathUtils: java.lang.String getDataDirPath(android.content.Context)
androidx.fragment.app.Fragment: float getPostOnViewCreatedAlpha()
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat computeSystemWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat,android.graphics.Rect)
io.flutter.view.AccessibilityBridge$SpellOutStringAttribute: AccessibilityBridge$SpellOutStringAttribute(io.flutter.view.AccessibilityBridge$1)
android.support.v4.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.android.KeyChannelResponder: void lambda$handleEvent$0(io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback,boolean)
io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder: io.flutter.embedding.android.FlutterFragment$NewEngineFragmentBuilder shouldDelayFirstAndroidViewDraw(boolean)
io.flutter.FlutterInjector$Builder: io.flutter.FlutterInjector$Builder setFlutterLoader(io.flutter.embedding.engine.loader.FlutterLoader)
io.flutter.plugins.imagepicker.ImagePickerDelegate: void grantUriPermissions(android.content.Intent,android.net.Uri)
io.flutter.embedding.engine.systemchannels.RestorationChannel: RestorationChannel(io.flutter.embedding.engine.dart.DartExecutor,boolean)
io.flutter.embedding.engine.renderer.FlutterRenderer$2: void onResume(androidx.lifecycle.LifecycleOwner)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)
androidx.appcompat.widget.Toolbar: void setContentInsetEndWithActions(int)
io.flutter.embedding.android.FlutterFragment: io.flutter.embedding.android.RenderMode getRenderMode()
io.flutter.plugin.common.JSONMethodCodec: java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object)
io.flutter.plugins.imagepicker.Messages$SourceSpecification: io.flutter.plugins.imagepicker.Messages$SourceCamera getCamera()
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.FlutterTextureView)
androidx.appcompat.widget.AppCompatImageButton: android.graphics.PorterDuff$Mode getSupportImageTintMode()
io.flutter.embedding.android.KeyboardManager: void destroy()
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: io.flutter.plugin.common.MessageCodec getCodec()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hasFlag(io.flutter.view.AccessibilityBridge$Flag)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] $values()
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.plugin.platform.PlatformViewRegistry getPlatformViewRegistry()
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions$Companion: SharedPreferencesPigeonOptions$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.plugins.webviewflutter.WebChromeClientProxyApi$WebChromeClientImpl: kotlin.Unit lambda$onShowCustomView$1(kotlin.Result)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceDestroyed(long)
androidx.fragment.app.Fragment: boolean hasOptionsMenu()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean access$202(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate,boolean)
androidx.profileinstaller.FileSectionType: androidx.profileinstaller.FileSectionType[] values()
io.flutter.plugins.webviewflutter.JavaScriptChannel: kotlin.Unit lambda$postMessage$0(kotlin.Result)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: io.flutter.embedding.engine.FlutterShellArgs getFlutterShellArgs()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.plugins.activity.ActivityControlSurface getActivityControlSurface()
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$44$lambda$43(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.imagepicker.Messages$ImagePickerApi$1: void error(java.lang.Throwable)
io.flutter.plugin.platform.PlatformPlugin$1: void setFrameworkHandlesBack(boolean)
io.flutter.embedding.android.FlutterActivity: java.lang.String getDartEntrypointFunctionName()
io.flutter.plugins.sharedpreferences.ListEncoder: java.lang.String encode(java.util.List)
io.flutter.plugin.platform.PlatformViewsController: int access$1100(io.flutter.plugin.platform.PlatformViewsController,double)
androidx.appcompat.widget.SwitchCompat: int getCompoundPaddingRight()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setBool$1: SharedPreferencesPlugin$setBool$1(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin,boolean,kotlin.coroutines.Continuation)
androidx.appcompat.widget.Toolbar: void setCollapseContentDescription(java.lang.CharSequence)
io.flutter.embedding.engine.systemchannels.BackGestureChannel: void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler)
io.flutter.plugins.webviewflutter.PigeonApiJavaScriptChannel: io.flutter.plugins.webviewflutter.JavaScriptChannel pigeon_defaultConstructor(java.lang.String)
androidx.core.view.ViewParentCompat$Api21Impl: void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int)
androidx.fragment.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebChromeClient getPigeonApiWebChromeClient()
io.flutter.embedding.android.FlutterImageView: void logW(java.lang.String,java.lang.Object[])
androidx.fragment.app.Fragment: void performPrimaryNavigationFragmentChanged()
io.flutter.plugin.editing.TextInputPlugin$1: void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void done(int)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: void error(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonInstanceManagerApi$Companion: io.flutter.plugin.common.MessageCodec getCodec()
io.flutter.plugin.platform.PlatformPlugin: void access$1300(io.flutter.plugin.platform.PlatformPlugin,java.lang.String)
androidx.core.content.ContextCompat$Api21Impl: java.io.File getCodeCacheDir(android.content.Context)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void finishAutofillContext(boolean)
io.flutter.plugin.editing.InputConnectionAdaptor: android.text.Editable getEditable()
io.flutter.plugins.sharedpreferences.Messages: Messages()
androidx.lifecycle.ReportFragment: ReportFragment()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void disableFenceForTest()
androidx.core.app.ActivityCompat$Api32Impl: boolean shouldShowRequestPermissionRationale(android.app.Activity,java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setPivotX(float)
io.flutter.plugins.webviewflutter.ProxyApiRegistrar: io.flutter.plugins.webviewflutter.PigeonApiWebResourceResponse getPigeonApiWebResourceResponse()
androidx.core.graphics.drawable.DrawableCompat$Api23Impl: int getLayoutDirection(android.graphics.drawable.Drawable)
androidx.core.view.ViewGroupCompat$Api21Impl: int getNestedScrollAxes(android.view.ViewGroup)
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void appIsPaused()
io.flutter.plugin.common.StandardMessageCodec: void writeSize(java.io.ByteArrayOutputStream,int)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values()
io.flutter.embedding.android.FlutterView: boolean onHoverEvent(android.view.MotionEvent)
androidx.core.view.ViewParentCompat$Api21Impl: boolean onNestedPreFling(android.view.ViewParent,android.view.View,float,float)
androidx.fragment.app.Fragment: java.lang.Object getSharedElementEnterTransition()
io.flutter.plugin.common.JSONMethodCodec: java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: java.util.Map access$100(io.flutter.embedding.engine.systemchannels.DeferredComponentChannel)
io.flutter.embedding.android.FlutterFragmentActivity: void onCreate(android.os.Bundle)
androidx.fragment.app.Fragment: void setAnimations(int,int,int,int)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$clear$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.plugin.mouse.MouseCursorPlugin$1: void activateSystemCursor(java.lang.String)
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: void setAudioMuted(boolean)
androidx.datastore.preferences.protobuf.Writer$FieldOrder: androidx.datastore.preferences.protobuf.Writer$FieldOrder[] values()
io.flutter.plugin.platform.AccessibilityEventsDelegate: void setAccessibilityBridge(io.flutter.view.AccessibilityBridge)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: TextInputChannel$TextInputType(java.lang.String,int,java.lang.String)
io.flutter.plugins.imagepicker.Messages$FlutterError: Messages$FlutterError(java.lang.String,java.lang.String,java.lang.Object)
org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: int getWebViewMediaIntegrityApiDefaultStatus()
io.flutter.plugins.imagepicker.ImagePickerPlugin$ActivityState: void release()
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient$1: WebViewActivity$FlutterWebChromeClient$1(io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setPivotY(float)
org.chromium.support_lib_boundary.SafeBrowsingResponseBoundaryInterface: void proceed(boolean)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host: boolean shouldAttachEngineToActivity()
io.flutter.plugins.imagepicker.ImagePickerPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setScaleX(float)
io.flutter.embedding.android.KeyEmbedderResponder: java.lang.Long getPhysicalKey(android.view.KeyEvent)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: kotlin.Unit setUpMessageHandlers$lambda$28$lambda$27$lambda$26(io.flutter.plugin.common.BasicMessageChannel$Reply,kotlin.Result)
io.flutter.plugins.imagepicker.Messages$Result: void error(java.lang.Throwable)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.ExclusiveAppComponent getExclusiveAppComponent()
androidx.core.app.ComponentActivity: boolean dispatchKeyEvent(android.view.KeyEvent)
io.flutter.plugin.common.BinaryMessenger$-CC: io.flutter.plugin.common.BinaryMessenger$TaskQueue $default$makeBackgroundTaskQueue(io.flutter.plugin.common.BinaryMessenger)
io.flutter.plugins.webviewflutter.ConsoleMessageLevel$Companion: ConsoleMessageLevel$Companion()
io.flutter.embedding.engine.FlutterJNI: void unregisterTexture(long)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityStarted(android.app.Activity)
io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget: io.flutter.view.TextureRegistry$ImageTextureEntry access$000(io.flutter.plugin.platform.ImageReaderPlatformViewRenderTarget)
io.flutter.embedding.android.FlutterActivity: java.lang.String getCachedEngineId()
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState[] values()
androidx.activity.ComponentActivity: void onPictureInPictureModeChanged(boolean,android.content.res.Configuration)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi: WebViewClientProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.plugins.urllauncher.WebViewActivity: java.util.Map extractHeaders(android.os.Bundle)
io.flutter.embedding.android.FlutterView: java.util.Set access$300(io.flutter.embedding.android.FlutterView)
io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager: android.util.SparseArray access$400(io.flutter.embedding.engine.deferredcomponents.PlayStoreDeferredComponentManager)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$DefaultFlutterAssets: java.lang.String getAssetFilePathBySubpath(java.lang.String)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getValueByKey$$inlined$map$1: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
io.flutter.plugins.sharedpreferences.StringListResult$Companion: StringListResult$Companion()
io.flutter.plugins.imagepicker.Messages$SourceCamera: io.flutter.plugins.imagepicker.Messages$SourceCamera valueOf(java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeColor(int)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry: ShimPluginRegistry(io.flutter.embedding.engine.FlutterEngine)
io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager: boolean uninstallDeferredComponent(int,java.lang.String)
io.flutter.plugins.urllauncher.WebViewActivity: void onDestroy()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void setDeprecatedStringList(java.lang.String,java.util.List,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
androidx.core.view.ViewCompat$Api26Impl: void setImportantForAutofill(android.view.View,int)
io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions: SharedPreferencesPigeonOptions(java.lang.String,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.webviewflutter.PigeonApiWebView)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: MethodChannel$IncomingMethodCallHandler$1(io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugins.imagepicker.Messages$SourceType: io.flutter.plugins.imagepicker.Messages$SourceType valueOf(java.lang.String)
io.flutter.embedding.engine.loader.ResourceExtractor: io.flutter.embedding.engine.loader.ResourceExtractor addResource(java.lang.String)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView access$400(io.flutter.embedding.android.FlutterView)
io.flutter.plugins.webviewflutter.WebViewProxyApi: void setBackgroundColor(android.webkit.WebView,long)
org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: boolean getAllowFileAccess()
io.flutter.embedding.engine.loader.FlutterLoader: boolean initialized()
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: android.webkit.WebViewClient getWebViewClient()
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: BasicMessageChannel$IncomingReplyHandler(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply,io.flutter.plugin.common.BasicMessageChannel$1)
io.flutter.plugins.imagepicker.Messages$CacheRetrievalError$Builder: io.flutter.plugins.imagepicker.Messages$CacheRetrievalError build()
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$3900(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.imagepicker.ImagePickerPlugin$LifeCycleObserver: void onStop(androidx.lifecycle.LifecycleOwner)
androidx.core.view.ViewCompat$Api30Impl: void setStateDescription(android.view.View,java.lang.CharSequence)
io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder: io.flutter.embedding.android.FlutterFragmentActivity$NewEngineInGroupIntentBuilder dartEntrypoint(java.lang.String)
io.flutter.plugins.webviewflutter.AndroidWebkitLibraryPigeonProxyApiBaseCodec: kotlin.Unit writeValue$lambda$16(kotlin.Result)
io.flutter.embedding.android.FlutterImageView: void detachFromRenderer()
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List getStringAttributesFromBuffer(java.nio.ByteBuffer,java.nio.ByteBuffer[])
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler: void onTooltip(java.lang.String)
androidx.core.view.ViewParentCompat$Api21Impl: boolean onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int)
org.chromium.support_lib_boundary.ProxyControllerBoundaryInterface: void clearProxyOverride(java.lang.Runnable,java.util.concurrent.Executor)
io.flutter.app.FlutterActivityDelegate$1$1: void onAnimationEnd(android.animation.Animator)
androidx.recyclerview.widget.RecyclerView: void setChildDrawingOrderCallback(androidx.recyclerview.widget.RecyclerView$ChildDrawingOrderCallback)
androidx.appcompat.widget.ActionBarContextView: java.lang.CharSequence getTitle()
io.flutter.embedding.android.FlutterActivity: void registerOnBackInvokedCallback()
androidx.core.view.ViewCompat$Api28Impl: void addOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
io.flutter.app.FlutterActivity: void onTrimMemory(int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$1: FlutterActivityAndFragmentDelegate$1(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate)
io.flutter.view.VsyncWaiter$1: VsyncWaiter$1(io.flutter.view.VsyncWaiter)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)
androidx.appcompat.widget.Toolbar: void setCollapsible(boolean)
io.flutter.embedding.engine.FlutterJNI: void loadLibrary()
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi: java.lang.Boolean getBool(java.lang.String,io.flutter.plugins.sharedpreferences.SharedPreferencesPigeonOptions)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: void setPlatformViewsHandler(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getBool$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
io.flutter.util.ViewUtils: android.app.Activity getActivity(android.content.Context)
org.chromium.support_lib_boundary.PrefetchParamsBoundaryInterface: java.lang.String getNoVarySearchHint()
org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: java.lang.reflect.InvocationHandler getWebViewRendererClient()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean performPrivateCommand(java.lang.String,android.os.Bundle)
org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setBlockNetworkLoads(boolean)
io.flutter.plugins.urllauncher.R: R()
io.flutter.plugin.platform.PlatformViewsController: void disposePlatformView(int)
io.flutter.plugin.platform.PlatformViewsController: int toPhysicalPixels(double)
org.chromium.support_lib_boundary.PrefetchOperationResultBoundaryInterface: int getStatusCode()
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeMaxTextSize()
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetRight()
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long getSourceNodeId(android.view.accessibility.AccessibilityNodeInfo)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: io.flutter.embedding.engine.renderer.SurfaceTextureWrapper textureWrapper()
io.flutter.plugin.localization.LocalizationPlugin$1: LocalizationPlugin$1(io.flutter.plugin.localization.LocalizationPlugin)
io.flutter.plugins.webviewflutter.PigeonApiWebView$Companion: void setUpMessageHandlers$lambda$17$lambda$16(io.flutter.plugins.webviewflutter.PigeonApiWebView,java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler: void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription)
androidx.core.view.ViewParentCompat$Api21Impl: void onStopNestedScroll(android.view.ViewParent,android.view.View)
io.flutter.plugins.webviewflutter.WebViewClientProxyApi$WebViewClientImpl: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError)
androidx.core.view.ViewConfigurationCompat$Api28Impl: int getScaledHoverSlop(android.view.ViewConfiguration)
androidx.appcompat.widget.Toolbar: void setCollapseContentDescription(int)
androidx.core.view.MenuItemCompat$Api26Impl: android.content.res.ColorStateList getIconTintList(android.view.MenuItem)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$setDouble$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.RestorationChannel getRestorationChannel()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getStrokeWidth()
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
io.flutter.embedding.engine.renderer.FlutterRenderer: boolean access$002(io.flutter.embedding.engine.renderer.FlutterRenderer,boolean)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$2: boolean onPreDraw()
io.flutter.embedding.engine.FlutterJNI: void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)
io.flutter.plugins.imagepicker.ImagePickerPlugin: void tearDown()
androidx.appcompat.widget.Toolbar: void setNavigationContentDescription(int)
io.flutter.view.TextureRegistry: void onTrimMemory(int)
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView: void setSelector(android.graphics.drawable.Drawable)
io.flutter.plugins.sharedpreferences.Messages$SharedPreferencesApi: java.lang.Boolean setString(java.lang.String,java.lang.String)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onUserLeaveHint()
io.flutter.plugin.platform.VirtualDisplayController: void onInputConnectionLocked()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler: void requestAutofill()
io.flutter.plugin.platform.PlatformViewsController: void initializePlatformViewIfNeeded(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode decodeSystemUiMode(java.lang.String)
io.flutter.plugin.editing.TextInputPlugin: void notifyViewExited()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding: void onMoveToBackground()
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: KeyEventChannel$FlutterKeyEvent(android.view.KeyEvent)
io.flutter.plugins.webviewflutter.WebViewProxyApi: WebViewProxyApi(io.flutter.plugins.webviewflutter.ProxyApiRegistrar)
io.flutter.plugin.platform.PlatformViewsController: boolean access$1702(io.flutter.plugin.platform.PlatformViewsController,boolean)
io.flutter.embedding.engine.dart.DartMessenger: DartMessenger(io.flutter.embedding.engine.FlutterJNI)
io.flutter.embedding.engine.renderer.SurfaceTextureSurfaceProducer: void setCallback(io.flutter.view.TextureRegistry$SurfaceProducer$Callback)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.CharSequence access$3200(io.flutter.view.AccessibilityBridge$SemanticsNode)
androidx.activity.ComponentActivity: boolean onCreatePanelMenu(int,android.view.Menu)
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1: void reply(java.lang.Object)
io.flutter.plugins.urllauncher.UrlLauncher: java.lang.Boolean launchUrl(java.lang.String,java.util.Map)
androidx.core.graphics.drawable.DrawableCompat$Api23Impl: boolean setLayoutDirection(android.graphics.drawable.Drawable,int)
io.flutter.plugins.webviewflutter.DisplayListenerProxy: void onPostWebViewInitialization(android.hardware.display.DisplayManager)
io.flutter.view.FlutterView: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)
io.flutter.embedding.engine.systemchannels.RestorationChannel: io.flutter.plugin.common.MethodChannel$Result access$402(io.flutter.embedding.engine.systemchannels.RestorationChannel,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.urllauncher.BuildConfig: BuildConfig()
org.chromium.support_lib_boundary.ProfileBoundaryInterface: void clearPrefetch(java.lang.String,android.webkit.ValueCallback)
io.flutter.embedding.engine.FlutterJNI: io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long)
androidx.appcompat.widget.ActionBarOverlayLayout: void setWindowCallback(android.view.Window$Callback)
androidx.lifecycle.SavedStateHandlesVM: SavedStateHandlesVM()
io.flutter.plugins.webviewflutter.WebViewFlutterPlugin: WebViewFlutterPlugin()
androidx.activity.ComponentActivity: void removeOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)
io.flutter.plugins.webviewflutter.ResultCompat$Companion: void success(java.lang.Object,java.lang.Object)
androidx.core.content.res.ResourcesCompat$Api23Impl: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)
io.flutter.plugins.sharedpreferences.SharedPreferencesAsyncApi$Companion: SharedPreferencesAsyncApi$Companion()
io.flutter.embedding.android.FlutterView: void setVisibility(int)
io.flutter.plugins.urllauncher.Messages$WebViewOptions: void setHeaders(java.util.Map)
io.flutter.plugin.editing.InputConnectionAdaptor: InputConnectionAdaptor(android.view.View,int,io.flutter.embedding.engine.systemchannels.TextInputChannel,io.flutter.plugin.editing.InputConnectionAdaptor$KeyboardDelegate,io.flutter.plugin.editing.ListenableEditingState,android.view.inputmethod.EditorInfo)
org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: boolean getBlockNetworkLoads()
io.flutter.embedding.engine.loader.FlutterLoader: void lambda$ensureInitializationCompleteAsync$0(android.content.Context,java.lang.String[],android.os.Handler,java.lang.Runnable)
io.flutter.plugin.platform.PlatformViewWrapper$1: void onGlobalFocusChanged(android.view.View,android.view.View)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void startBackGesture(android.window.BackEvent)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getAll$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: AccessibilityChannel(io.flutter.embedding.engine.dart.DartExecutor,io.flutter.embedding.engine.FlutterJNI)
io.flutter.view.FlutterView: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine access$100(io.flutter.embedding.android.FlutterView)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin$getString$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
